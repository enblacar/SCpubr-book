# Functional Annotation Analysis plots

A major analysis in Single-Cell transcriptomics, and subsequential to the previous chapter, is **Functional Annotation Analysis**. This allows to get more insights in a list of genes that we might have at hand, and retrieve a set of statistically enriched terms ([**GO**](http://geneontology.org/) terms, [**KEGG**](https://www.genome.jp/kegg/) terms) shared amongst the genes in the gene signature. For this purpose, **SCpubr** makes use of [**clusterProfiler**](https://bioconductor.org/packages/release/bioc/html/clusterProfiler.html) and [**enrichplot**](https://bioconductor.org/packages/release/bioc/html/enrichplot.html) packages together with some own plots to provide a set of comprehensive data visualization to understand the output of functional enrichment analyses using **clusterProfiler**. This can be accessed using `SCpubr::do_FunctionalAnnotationPlot()`.

## Basic output

```{r}
#| results: "asis"
#| echo: false
source("_common.R")
suppressMessages(library("org.Hs.eg.db"))
```

The basic output of `SCpubr::do_FunctionalAnnotationPlot()`contains a list with several plots, and can be computed by providing the function with a list of genes and a **database** object, such as the one provided by the [**org.Hs.eg.db**](https://bioconductor.org/packages/release/data/annotation/html/org.Hs.eg.db.html) package:

```{r}
genes.use <- c("CCR7", "CD14", "LYZ", 
           "S100A4", "MS4A1", 
           "MS4A7", "GNLY", "NKG7", "FCER1A", 
           "CST3", "PPBP")

# Compute the grouped GO terms.
out <- SCpubr::do_FunctionalAnnotationPlot(genes = genes.use,
                                           org.db = org.Hs.eg.db)
```
This reports a list containing four complementary plots. The first, is a heatmap that contains the overlap between the genes and the term, the gene count and their corresponding adjusted p-value:

```{r}
#| fig-width: 12
#| fig-height: 7
#| fig-cap: "Heatmap of reported terms."

# Retrieve the heatmap.
out$Heatmap
```

Second, is a bar plot showing the enriched terms with the height of the bars corresponding to the gene count per term, and the color or the bars corresponding to the adjusted p-value associated to the terms:

```{r}
#| fig-width: 7
#| fig-height: 7
#| fig-cap: "Bar plot of reported terms."

# Retrieve the Bar plot.
out$BarPlot
```

Almost identical, we can also retrieve a Dot plot in which the size of the dots correspond to the number of genes supporting the term and the color to the adjusted p-value:

```{r}
#| fig-width: 10
#| fig-height: 7
#| fig-cap: "Dot plot of reported terms."

# Retrieve the Dot plot.
out$DotPlot
```

Finally, and thanks to [**enrichplot**](https://bioconductor.org/packages/release/bioc/html/enrichplot.html) package, we can also obtain a customized hierarchical visualization of the enriched terms called Tree plot:


```{r}
#| fig-width: 12
#| fig-height: 7
#| fig-cap: "Tree plot of reported terms."

# Retrieve the Tree plot.
out$TreePlot
```
We can control the number of clusters and the number of high-frequency words with `nClusters` and `nWords` parameters. Similarly, the total number of terms to display (if available), can be controlled using `showCategory` parameter.

::: callout-note
## Please note:

The right-most labels refer to high frequency words, not to the GO terms on a level above. For more information please consult the [**official documentation for enrichplot package**](https://yulab-smu.top/biomedical-knowledge-mining-book/enrichplot.html#tree-plot)

It can also be the case that the high frequency words and the clusters behave a bit wonky. This has been observed already but is also related entirely to enrichplot package and the number of clusters selected by `nClusters`. If you are experiencing problems with this, consider reducing the number of `nClusters`.
:::

## Limit the number of terms reported

Similar to the previous chapter, we can decide whether we want more or less overlap between the genes for the reported terms using `min.overlap`:

```{r}
# Compute the grouped GO terms.
out <- SCpubr::do_FunctionalAnnotationPlot(genes = genes.use,
                                           org.db = org.Hs.eg.db,
                                           min.overlap = 2)
```

```{r}
#| fig-width: 14
#| fig-height: 9
#| fig-cap: "Heatmap of reported terms."

# Retrieve the heatmap.
out$Heatmap
```

```{r}
#| fig-width: 20
#| fig-height: 7
#| fig-cap: "Bar plot of reported terms."

# Retrieve the Bar and Dot plot.
out$BarPlot | out$DotPlot
```

```{r}
#| fig-width: 14
#| fig-height: 7
#| fig-cap: "Tree plot of reported terms."

# Retrieve the Tree plot.
out$TreePlot
```


## Compute the results for different databases

We can also query other database apart from GO. KEGG and MKEGG are also available, and can be selected using `database` parameter:

```{r}
genes.use <- c("IL7R", "CCR7", "CD14", "LYZ", 
           "S100A4", "MS4A1", "CD8A", "FCGR3A", 
           "MS4A7", "GNLY", "NKG7", "FCER1A", 
           "CST3", "PPBP")

# Compute the grouped KEGG terms.
out1 <- SCpubr::do_FunctionalAnnotationPlot(genes = genes.use,
                                            org.db = org.Hs.eg.db,
                                            database = "KEGG")
```

```{r}
#| fig-width: 10
#| fig-height: 7
#| fig-cap: "Dot plot of reported KEGG terms."

# Retrieve the Bar and Dot plot.
out1$DotPlot
```
