# Grouped GO Term analysis plots

More often than not in a Single-Cell Transcriptomics analysis, one comes across a list of genes. This might be the result of computing Differentially Expressed genes, running Non-Negative Matrix Factorization, for instance. In order to get a sense of what the role that the genes in the list play, we can make use of [**clusterProfiler**](https://bioconductor.org/packages/release/bioc/html/clusterProfiler.html) package. This package has, among other incredible functions, one called `groupGO()`, which outputs a matrix of the GO terms associated with the genes in the list, across the different GO ontologies and levels. 

`SCpubr`makes use of these output matrices and represent them as heatmaps with the `SCpubr::do_GroupedGOTermPlot()` function. 

## Basic usage

The basic usage of this function will compute all the GO terms associated with the genes for the **Biological Process** ontology, and return all the matrices for all the levels as well as the individual heatmaps for each level plus a combined one with all of them. All of this is returned **as a list** object, that we can then navigate to obtain the plot/matrix that we want. We will also need a **database** object, such as the one provided by the [**org.Hs.eg.db**](https://bioconductor.org/packages/release/data/annotation/html/org.Hs.eg.db.html) package.

```{r}
#| results: "asis"
#| echo: false
source("_common.R")
suppressMessages(library("org.Hs.eg.db"))
```


```{r}
genes.use <- c("CENPK", "CENPE", "BRCA1", "VWF", "CD8A")

# Compute the grouped GO terms.
out <- SCpubr::do_GroupedGOTermPlot(genes = genes.use,
                                    org.db = org.Hs.eg.db)
```

Here is how the one of the output matrices looks like:
```{r}
# Retrieve one of the output matrices.
head(out$Matrices$BP$`Lv. 3`)
```

And this is the output combined heatmap:

```{r}
#| fig-width: 22
#| fig-height: 6
#| fig-cap: "Combined heatmap."

# Plot the output combined heatmap.
out$Plots$BP$Combined
```
::: callout-note
## Please note:

This function might take a while to compute, specially for the **Biological Process** ontology. If you are running it interactively, consider passing `verbose = TRUE` to see the process.
:::

## Control the clustering of the rows and columns
By default, both rows and columns are clustered to group the terms together. If one wants to customize this behaviour, we just need to pass `cluster_cols = FALSE` or `cluster_rows = FALSE` to the function:

```{r}
#| fig-width: 22
#| fig-height: 6
#| fig-cap: "Control the clustering of rows and columns."

# Compute the grouped GO terms.
out <- SCpubr::do_GroupedGOTermPlot(genes = genes.use,
                                    org.db = org.Hs.eg.db,
                                    cluster_rows = FALSE,
                                    cluster_cols = FALSE)

# Plot the output combined heatmap.
out$Plots$BP$Combined
```
## Limit the number of terms reported
By default, the terms displays have to be shared in between three of the genes if the provided list of genes has more than four genes. However, we can control this behavior using `min.overlap`:

```{r}
#| fig-width: 8
#| fig-height: 6
#| fig-cap: "Limit the number of terms reported."

# Compute the grouped GO terms.
out <- SCpubr::do_GroupedGOTermPlot(genes = genes.use,
                                    org.db = org.Hs.eg.db,
                                    min.overlap = 4)

# Plot the output combined heatmap.
out$Plots$BP$Combined
```

## Flip the output heatmap
We might as well be interested in having a vertically-aligned heatmap instead. This can be achieved by using `flip = FALSE` (as the default version is already flipped).

```{r}
#| fig-width: 8
#| fig-height: 6
#| fig-cap: "Flip the output heatmap."

# Compute the grouped GO terms.
out <- SCpubr::do_GroupedGOTermPlot(genes = genes.use,
                                    org.db = org.Hs.eg.db,
                                    min.overlap = 4,
                                    flip = FALSE)

# Plot the output combined heatmap.
out$Plots$BP$Combined
```

## Restrict the ontology levels
If we are sure of which ontology levels we want to display the terms, we can restrict the output to those by using `levels.use`. This works in combination with `min.overlap`.

```{r}
#| fig-width: 8
#| fig-height: 6
#| fig-cap: "Restrict the ontology levels."

# Compute the grouped GO terms.
out <- SCpubr::do_GroupedGOTermPlot(genes = genes.use,
                                    org.db = org.Hs.eg.db,
                                    min.overlap = 4,
                                    levels.use = c(1, 2, 3, 4))

# Plot the output combined heatmap.
out$Plots$BP$Combined
```
## Select other GO ontologies

We can retrieve terms for other GO ontologies by using `GO_ontology` parameter with either:

- **BP**: For **B**iological **P**rocess.
- **MF**: For **M**olecular **F**unction.
- **CC**: For **C**ellular **C**omponent.

```{r}
#| fig-width: 8
#| fig-height: 6
#| fig-cap: "Use other GO ontologies."

# Compute the grouped GO terms.
out <- SCpubr::do_GroupedGOTermPlot(genes = genes.use,
                                    org.db = org.Hs.eg.db,
                                    min.overlap = 2,
                                    GO_ontology = "MF")

# Plot the output combined heatmap.
out$Plots$MF$Combined
```


## Reverse the order of the heatmaps
As can be noticed, the heatmaps are ordered **in inverse order**. This is due to the fact that [**ComplexHeatmap**]() arranges the alignment of heatmaps using one as a **principal** heatmap. By using the normal ordering, the rows are columns, that are clustered, will be done based on the **low-level** terms instead of the most specific ones. However, this behaviour can be reverted using `reverse.levels = FALSE`.

```{r}
#| fig-width: 8
#| fig-height: 6
#| fig-cap: "Reverse the order of the heatmaps."

# Compute the grouped GO terms.
out <- SCpubr::do_GroupedGOTermPlot(genes = genes.use,
                                    org.db = org.Hs.eg.db,
                                    min.overlap = 4,
                                    levels.use = c(1, 2, 3, 4),
                                    reverse.levels = FALSE)

# Plot the output combined heatmap.
out$Plots$BP$Combined
```

## Increase the gap between heatmaps
By default, this is set to 0.5 cm by the `heatmap_gap` parameter.

```{r}
#| fig-width: 8
#| fig-height: 6
#| fig-cap: "Increase the gap between heatmaps."

# Compute the grouped GO terms.
out <- SCpubr::do_GroupedGOTermPlot(genes = genes.use,
                                    org.db = org.Hs.eg.db,
                                    min.overlap = 4,
                                    levels.use = c(1, 2, 3, 4),
                                    heatmap_gap = 1)

# Plot the output combined heatmap.
out$Plots$BP$Combined
```

## Increase the cell size of the heatmap
We can modify the tile size of the heatamaps by using `cell_size` paramter:

```{r}
#| fig-width: 8
#| fig-height: 6
#| fig-cap: "Modify the tile size."

# Compute the grouped GO terms.
out <- SCpubr::do_GroupedGOTermPlot(genes = genes.use,
                                    org.db = org.Hs.eg.db,
                                    min.overlap = 4,
                                    levels.use = c(1, 2, 3, 4),
                                    cell_size = 7)

# Plot the output combined heatmap.
out$Plots$BP$Combined
```

## Modify default colors

Finally, we can modify the default colors of the heatmap by using `colors.use` and provide two colors. The first will map to the absent values and the second to the present values.

```{r}
#| fig-width: 8
#| fig-height: 6
#| fig-cap: "Modify the colors."

# Compute the grouped GO terms.
out <- SCpubr::do_GroupedGOTermPlot(genes = genes.use,
                                    org.db = org.Hs.eg.db,
                                    min.overlap = 4,
                                    levels.use = c(1, 2, 3, 4),
                                    colors.use = c("lightblue", "navyblue"))

# Plot the output combined heatmap.
out$Plots$BP$Combined
```
