[{"path":"index.html","id":"about-this-package","chapter":"About this package","heading":"About this package","text":"package aims provide streamlined way generating publication ready plots known Single-Cell visualizations “publication ready” format (SCpubr). , aim automatically generate plots highest quality possible, can used right away minimal modifications research article.subjective term “aesthetically pleasant” can , set theme modifications implemented across different plot types. package also serves personal project, future prospects growth.","code":""},{"path":"installation-guide.html","id":"installation-guide","chapter":"Installation guide","heading":"Installation guide","text":"package can installed using following commands:packages needed order run different functions:colortoolsdplyrenrichRforcatsggbeeswarmggplot2ggrastrggrepelMatrixNebulosapatchworkpbapplypurrrrlangscalesSeuratstringrsvglitetidyrviridisAll packages can installed using following commands:interested running subset functions, SCpubr::state_dependencies() outputs different packages sources needed functions.","code":"\n# From CRAN:\n# Future sumission to CRAN.\n\n# From GitHub.\nif(!requireNamespace(\"devtools\", quietly = T)){\n  install.packages(\"devtools\") # If not installed.\n}\ndevtools::install_github(\"enblacar/SCpubr\")\n# Install CRAN packages.\ncran_packages <- c(\"colortools\",\n                   \"dplyr\",\n                   \"enrichR\",\n                   \"forcats\",\n                   \"ggbeeswarm\",\n                   \"ggplot2\",\n                   \"ggrepel\",\n                   \"Matrix\",\n                   \"patchwork\",\n                   \"purrr\",\n                   \"rlang\",\n                   \"scales\",\n                   \"Seurat\",\n                   \"stringr\",\n                   \"svglite\",\n                   \"tidyr\",\n                   \"viridis\")\ninstall.packages(cran_packages)\n\n# Install bioconductor packages.\nbioconductor_packages <- c(\"Nebulosa\")\nif (!require(\"BiocManager\", quietly = TRUE))\n    install.packages(\"BiocManager\")\n\nBiocManager::install(bioconductor_packages)\n# Will return the package dependencies for all functions.\nSCpubr::state_dependencies()\n\n# Will return the package dependencies for selected functions.\nSCpubr::state_dependencies(func_name = c(\"do_DimPlot\", \"do_Feature_Plot\"))\n\n# Will return the package dependencies of a single function.\nSCpubr::state_dependencies(func_name = \"do_DimPlot\")"},{"path":"dataset-used.html","id":"dataset-used","chapter":"Dataset used","heading":"Dataset used","text":"manual going use publicly available dataset containing 10K raw cells. following code used generate Seurat object ready plotting.","code":"\ncounts_path <- \"path_to_count_matrix\"\n\n# Path count matrix.\ncounts <- Seurat::Read10X(counts_path)\n# Create Seurat object.\nsample <- Seurat::CreateSeuratObject(counts = counts, project = \"10K_pbmc\")\n# Compute percentage of mithochondrial RNA.\nsample <- Seurat::PercentageFeatureSet(sample, pattern = \"^MT-\", col.name = \"percent.mt\")\n# Compute QC.\nmask1 <- sample$nCount_RNA >= 1000\nmask2 <- sample$nFeature_RNA >= 500\nmask3 <- sample$percent.mt <= 20\nmask <- mask1 & mask2 & mask3\nsample <- sample[, mask]\n# Normalize.\nsample <- Seurat::SCTransform(sample)\n\n# Dimensional reduction.\nsample <- Seurat::RunPCA(sample)\nsample <- Seurat::RunUMAP(sample, dims = 1:30)\n# Find clusters.\nsample <- Seurat::FindNeighbors(sample, dims = 1:30)\nsample <- Seurat::FindClusters(sample, resolution = 0.2)"},{"path":"dim-plots.html","id":"dim-plots","chapter":"1 Dim plots","heading":"1 Dim plots","text":"Dimensional reduction Plots (DimPlots) , probably, one iconic visualizations Seurat. allows user visualize cells dimensional reduction embedding PCA UMAP. cells can , , colored desired groups. short, visualization allows user plot kind categorical data onto cells dimensional reduction embedding.","code":""},{"path":"dim-plots.html","id":"basic-usage","chapter":"1 Dim plots","heading":"1.1 Basic usage","text":"SCpubr’s take Seurat::DimPlot().\nFigure 1.1: SCpubr DimPlot vs Seurat DimPlot.\nEven though axes removed UMAP reductions, title axes kept reduction used. applied UMAP default dimension order altered.\nFigure 1.2: SCpubr DimPlot PCA embedding showing axes titles UMAP changing default dimension component order.\ncan change legend’s number columns rows legend.ncol legend.nrow.\nFigure 1.3: SCpubr DimPlot legend left.\n","code":"\n# Seurat's DimPlot.\np1 <- Seurat::DimPlot(sample)\n\n# SCpubr's DimPlot.\np2 <- SCpubr::do_DimPlot(sample = sample)\n\np <- p1 | p2\np\n# Example using PCA reduction.\np1 <- SCpubr::do_DimPlot(sample = sample, \n                         reduction = \"pca\")\n\n# Example using a non-canonical set of dimensions.\np2 <- SCpubr::do_DimPlot(sample = sample, \n                         dims = c(2, 1))\n\np <- p1 | p2\np\n# Modify the number of columns in the legend.\np1 <- SCpubr::do_DimPlot(sample = sample, \n                         legend.ncol = 2)\n\n# Modify the number of rows in the legend.\np2 <- SCpubr::do_DimPlot(sample = sample, \n                         legend.nrow = 3)\n\np <- p1 | p2 \np"},{"path":"dim-plots.html","id":"using-labels-instead-of-a-legend","chapter":"1 Dim plots","heading":"1.2 Using labels instead of a legend","text":"cases, especially early analysis numbers cluster names, might want remove legend entirely, instead plot labels top cluster. achieved using label = TRUE. looks Seurat:\nFigure 1.4: Seurat DimPlot labels top clusters.\nHowever, can play parameters function label.color provide different color text inside labels:\nFigure 1.5: Seurat DimPlot labels top clusters different color.\nFinally, one can alwayss get rid legend legend = FALSE:\nFigure 1.6: Seurat DimPlot without legend.\n","code":"\n# Put labels on top of the clusters.\np <- Seurat::DimPlot(sample, \n                     label = T)\np\n# Change the color of the text in the labels.\np <- SCpubr::do_DimPlot(sample = sample, \n                        label = TRUE, \n                        label.color = \"black\")\np\n# Remove the legend from the plot.\np <- SCpubr::do_DimPlot(sample = sample, \n                        label = TRUE, \n                        legend = FALSE)\np"},{"path":"dim-plots.html","id":"changing-the-order-of-plotting","chapter":"1 Dim plots","heading":"1.3 Changing the order of plotting","text":"default, cells SCpubr::do_DimPlot() randomly plotted using shuffle = TRUE. done default behavior Seurat::DimPlot() plot cells based factor levels identities. Sometimes, way plotting results clusters visible another one top . However, behavior might intended, even , like specific identity stand rest. can achieved providing order parameter either vector identities ordered however want, just identities, plotted top rest. However, still clear whether using order alongside shuffle = TRUE unexpected side effects. , please use alongside shuffle = FALSE. following example, going test:going bring cluster 5 front.order one value values.order shuffle = TRUE/FALSE.increase dot size better see cells cluster 7, data set lack overlapping clusters..\nFigure 1.7: SCpubr, modifying order plotted identities DimPlot\ncan see cluster 5 always plots top cluster 0 order set. still clear order shuffle interact, apparent using order cancels original behavior shuffle. Therefore, order shuffle set, SCpubr::do_DimPlot() throw warning.","code":"\n# Regular SCpubr DimPlot.\np1 <- SCpubr::do_DimPlot(sample = sample,\n                         reduction = \"pca\",\n                         plot.title = \"Normal DimPlot\")\n\n# Using order with one value and shuffle = TRUE.\np2 <- SCpubr::do_DimPlot(sample = sample,\n                         shuffle = TRUE,\n                         order = \"5\",\n                         reduction = \"pca\",\n                         plot.title = \"shuffle = TRUE\")\n\n# Using order with one value and shuffle = FALSE.\np3 <- SCpubr::do_DimPlot(sample = sample,\n                         shuffle = FALSE,\n                         order = \"5\",\n                         reduction = \"pca\",\n                         plot.title = \"shuffle = FALSE\")\n\n# Using order with all values.\np4 <- SCpubr::do_DimPlot(sample = sample,\n                         shuffle = FALSE,\n                         order = c(\"5\", \"8\", \"4\",\n                                   \"9\", \"3\", \"1\",\n                                   \"6\", \"0\", \"7\", \"2\"),\n                         reduction = \"pca\",\n                         plot.title = \"shuffle = FALSE all identities\")\n\np <- (p1 | p2) / (p3 | p4)\np"},{"path":"dim-plots.html","id":"highlighting-cells","chapter":"1 Dim plots","heading":"1.4 Highlighting cells","text":"One nice features Seurat::DimPlot() possibility highlighting certain group cells plot. achieved using cells.highligh parameter. default plot looks like SCpubr::do_DimPlot()’s take :\nFigure 1.8: Highlighting cells, comparison Seurat SCpubr.\nOne can also change color highligted cells providing single color colors.use color selected cells na.value:\nFigure 1.9: SCpubr DimPlot highlighting cells changing default colors.\ndefault, size cells SCpubr::do_DimPlot() . However, size highlighted dots can modified parameter sizes.highlight.\nFigure 1.10: SCpubr DimPlot highlighting cells bigger dot size.\ncan also highlight whole identities idents.highlight parameter. , just provide desired identities selected. can also work combination cells.highlight.\nFigure 1.11: SCpubr DimPlot highlighting cells testing combinations cells.highlight idents.highlight.\n","code":"\ncells.use <- sample(x = colnames(sample), \n                    size = 1500)\n\n# Compare Seurat and SCpubr way of highlighting cells.\np1 <- Seurat::DimPlot(sample, \n                      cells.highlight = cells.use)\n\np2 <- SCpubr::do_DimPlot(sample = sample,\n                         cells.highlight = cells.use)\n\np <- p1 | p2\np\n# Change color of highlighted and non-highlighted cells.\np <- SCpubr::do_DimPlot(sample = sample, \n                        cells.highlight = cells.use,\n                        colors.use = \"steelblue\",\n                        na.value = \"grey50\")\np\n# Increase the size of the highlighted cells.\np <- SCpubr::do_DimPlot(sample = sample, \n                        cells.highlight = cells.use, \n                        sizes.highlight = 1)\np\n# Using cells.highlight.\np1 <- SCpubr::do_DimPlot(sample = sample, \n                         cells.highlight = cells.use)\n\n# Using idents.highlight.\np2 <- SCpubr::do_DimPlot(sample = sample, \n                         idents.highlight = c(\"6\"))\n\n# Using both.\np3 <- SCpubr::do_DimPlot(sample = sample, \n                         cells.highlight = cells.use, \n                         idents.highlight = c(\"6\"))\n\np <- p1 | p2 | p3\np"},{"path":"dim-plots.html","id":"restrict-the-identitites-shown-and-grey-out-the-rest","chapter":"1 Dim plots","heading":"1.5 Restrict the identitites shown and grey out the rest","text":"Sometimes, interested showing identities groups sample, instead previous approach, still want keep original colors legend. , might inclined just subset sample, follows:\nFigure 1.12: Seurat DimPlot selecting identities subsetting sample.\nHowever, end losing UMAP silhouette. , SCpubr::do_DimPlot() introduces idents.keep parameter, can provide vector identities want keep. assign rest cells value NA colored according na.value parameter:\nFigure 1.13: Seurat DimPlot selecting identities using idents.keep.\n","code":"\n# Subset desired identities in a DimPlot.\np <- SCpubr::do_DimPlot(sample = sample[, sample$seurat_clusters %in% c(\"0\", \"5\")])\n\np\n# Select identities with idents.keep.\np1 <- SCpubr::do_DimPlot(sample = sample,\n                         idents.keep = c(\"0\", \"5\"))\n\n# Also, non-selected cells's color can be modified.\np2 <- SCpubr::do_DimPlot(sample = sample,\n                         idents.keep = c(\"0\", \"5\"),\n                         na.value = \"grey50\")\np <- p1 | p2\np"},{"path":"dim-plots.html","id":"splitting-by-a-category","chapter":"1 Dim plots","heading":"1.6 Splitting by a category","text":"Another useful parameter Seurat::DimPlot split., allows split DimPlot multiple panels, one containing different unique value metadata variable provided argument. One can understand using group.parameter splitting resulting DimPlot different panels. example, going use different clusters example. looks default:\nFigure 1.14: Seurat DimPlot using split..\ncan observed, plot accomplish task separating cells panel, approach followed actually makes interpretation difficult. Clusters Cluster 9, fewer cells, tell pretty much nothing. Besides, losing UMAP silhouette major downside approach. SCpubr focus . generates many plots unique values metadata split plot , uses cells.highlight instead, keeps rest cells greyed according na.value color. looks:\nFigure 1.15: SCpubr DimPlot using split..\nway, can see clusters Cluster 7 way disperse rest, accounting standalone groups cells also blending bigger clusters.interested subset possible values, can use idents.keep alongside vector containing values keep unique values split.:\nFigure 1.16: SCpubr DimPlot using split.idents.keep.\nActually, user might want change color highlighted cells split DimPlot. achieved using colors.use parameter providing either vector valid color representations equal length unique values split.just single color use panels.\nFigure 1.17: SCpubr DimPlot using split.changed color\n","code":"\n# Seurat's DimPlot using split.by\np <- Seurat::DimPlot(sample, \n                     split.by = \"seurat_clusters\", \n                     ncol = 5)\n\np\n# SCpubr's DimPlot using split.by\np <- SCpubr::do_DimPlot(sample, \n                        split.by = \"seurat_clusters\", \n                        ncol = 5, \n                        legend = F,\n                        font.size = 24)\n\np\n# Using split.by and restricting the number of output plots with idents.keep.\np <- SCpubr::do_DimPlot(sample, \n                        split.by = \"seurat_clusters\", \n                        ncol = 3, \n                        idents.keep = c(\"0\", \"1\", \"7\"),\n                        legend = F,\n                        font.size = 24)\n\np\n# Create a color scale for the unique values in seurat clusters.\ncolors <- c(\"0\" = \"#001219\",\n            \"1\" = \"#005f73\",\n            \"2\" = \"#0a9396\",\n            \"3\" = \"#94d2bd\",\n            \"4\" = \"#e9d8a6\",\n            \"5\" = \"#ee9b00\",\n            \"6\" = \"#ca6702\",\n            \"7\" = \"#bb3e03\",\n            \"8\" = \"#ae2012\",\n            \"9\" = \"#9b2226\")\n\n# Use a custom set of colors, one for each identity.\np1 <- SCpubr::do_DimPlot(sample, \n                         split.by = \"seurat_clusters\", \n                         ncol = 5, \n                         legend = F, \n                         colors.use = colors,\n                         font.size = 24)\n\n# Use the same color for all identities.\np2 <- SCpubr::do_DimPlot(sample, \n                         split.by = \"seurat_clusters\", \n                         ncol = 5, \n                         legend = F, \n                         colors.use = \"#008080\",\n                         font.size = 24)\n                         \np <- p1 / p2\np"},{"path":"feature-plots.html","id":"feature-plots","chapter":"2 Feature plots","heading":"2 Feature plots","text":"Another flagship function Seurat Seurat::FeaturePlot(). basically counterpart Seurat::DimPlot() , instead coloring cells based categorical color scale, uses continuous scale instead, according variable provided user. can range gene expression, metadata variables number genes, even values principal component.","code":""},{"path":"feature-plots.html","id":"basic-usage-1","chapter":"2 Feature plots","heading":"2.1 Basic usage","text":"SCpubr’s take Seurat::FeaturePlot():\nFigure 1.1: SCpubr do_FeaturePlot vs Seurat FeaturePlot\ndefault, SCpubr::do_FeaturePlot() enlarges dots bit modifies legend, better stand . Even though axes removed UMAP reductions, title axes kept reduction used. applied UMAP default dimension order altered.\nFigure 1.2: SCpubr Feature showing axes titles.\n","code":"\n# Seurat's Feature Plot.\np1 <- Seurat::FeaturePlot(sample, \n                          features = \"PC_1\")\n\n# SCpubr's Feature Plot.\np2 <- SCpubr::do_FeaturePlot(sample = sample,\n                             features = \"PC_1\")\n\np <- p1 | p2\np\n# Use case with PCA embedding.\np1 <- SCpubr::do_FeaturePlot(sample = sample, \n                             features = \"CD14\",\n                             plot.title = \"Plotting PCA coordinates\",\n                             reduction = \"pca\")\n\n# Use case with non-canonical dimensions.                             \np2 <- SCpubr::do_FeaturePlot(sample = sample, \n                             features = \"CD14\",\n                             plot.title = \"Plotting UMAP coordinates in a different order\",\n                             dims = c(2, 1))\n\np <- p1 | p2\np"},{"path":"feature-plots.html","id":"multiple-features","chapter":"2 Feature plots","heading":"2.2 Multiple features","text":"SCpubr::do_FeaturePlot() can tackle multiple queries time. Plots can rearranged desired ncol parameter:\nFigure 1.3: SCpubr FeaturePlot, 4 features 2 columns\nmultiple queries, using plot.title parameter actually adds general title plots. one wants modify title plot independently, vector length number features needs provided individual.titles parameter. case title need changed, use NA instead.\nFigure 1.4: SCpubr FeaturePlot, individual modified titles\nconcept can applied individual subtitles captions. , need use individual.subtitles individual.captions parameters.\nFigure 1.5: SCpubr FeaturePlot, individual modified titles, subtitles captions.\n","code":"\n# Query multiple features at the same time.\np <- SCpubr::do_FeaturePlot(sample, features = c(\"nCount_RNA\", \n                                                 \"nFeature_RNA\", \n                                                 \"percent.mt\", \n                                                 \"CD14\"), \n                            plot.title = \"A collection of features\", \n                            ncol = 2)\n\np\n# Add individual titles to the plots.\np <- SCpubr::do_FeaturePlot(sample = sample,\n                            features = c(\"nCount_RNA\",\n                                         \"nFeature_RNA\",\n                                         \"percent.mt\",\n                                         \"CD14\"),\n                            plot.title = \"A collection of features\",\n                            individual.titles = c(\"Plot A\",\n                                                  \"Plot_B\",\n                                                  NA,\n                                                  \"Plot_D\"),\n                            ncol = 2)\n\np\n# Add individual titles, subtitles and captions.\np <- SCpubr::do_FeaturePlot(sample = sample,\n                            features = c(\"nCount_RNA\",\n                                         \"nFeature_RNA\",\n                                         \"percent.mt\",\n                                         \"CD14\"),\n                            plot.title = \"A collection of features\",\n                            plot.subtitle = \"Everything is commented!\",\n                            plot.caption = \"Dataset from: ...\",\n                            individual.titles = c(\"Plot A\",\n                                                  \"Plot_B\",\n                                                  NA,\n                                                  \"Plot_D\"),\n                            individual.subtitles = c(\"Subtitle A\",\n                                                  NA,\n                                                  \"Subtitle C\",\n                                                  \"Subtitle D\"),\n                            individual.captions = c(\"Caption A\",\n                                                  \"Caption B\",\n                                                  \"Caption C\",\n                                                  \"Caption D\"),\n                            ncol = 2)\n\np"},{"path":"feature-plots.html","id":"working-with-subsets-of-cells","chapter":"2 Feature plots","heading":"2.3 Working with subsets of cells","text":"One things can misleading case specific subset cells driving ends color scales. Let’s say identified clusters 2, 5, 8 responsible behavior. like plot values without taking cells consideration. first thing comes mind , indeed, removing cells completely, resulting following:\nFigure 1.6: SCpubr FeaturePlot, removing cells clusters 2, 5 8\nHowever, falls back problem Seurat::DimPlot split.parameter. lose overall context cells , lost original UMAP silhouette. can fixed using cells.highlight parameter:\nFigure 1.7: SCpubr FeaturePlot, masking cells clusters 2, 5 8\nway, adding cells back modifying legend, accomplish desired effect. Furthermore, SCpubr::do_FeaturePlot() also accepts vector identities plot, long part levels(seurat_object). can achieved using idents.highlight instead.\nFigure 1.8: SCpubr FeaturePlot, masking cells clusters 2, 5 8 using idents.highlight\n","code":"\n# Subset the cells in the Seurat object to remove unwanted cells.\ncells.plot <- colnames(sample[, !(sample$seurat_clusters %in% c(\"2\", \"5\", \"8\"))])\n\np <- SCpubr::do_FeaturePlot(sample[, cells.plot], \n                            features = c(\"CD14\"))\n\np\n# Using cells.highlight parameter to select the cells we want to include in the plot.\np <- SCpubr::do_FeaturePlot(sample = sample, \n                            cells.highlight = cells.plot, \n                            features = c(\"CD14\"))\n\np\n# Selecting given identitites to include in the plot.\np <- SCpubr::do_FeaturePlot(sample = sample, \n                            idents.highlight = levels(sample)[!(levels(sample) %in% c(\"0\", \"2\", \"5\", \"8\"))], \n                            features = c(\"CD14\"))\n\np"},{"path":"feature-plots.html","id":"splitting-the-featureplot-by-a-variable","chapter":"2 Feature plots","heading":"2.4 Splitting the FeaturePlot by a variable","text":"cases, want visualize given feature, let’s say, expression LYN across another variable, instance seurat_clusters. can achieved easily Seurat using split.parameter. sake representation, let’s reduce number clusters.\nFigure 1.9: Seurat FeaturePlot split clusters.\nApart general aesthetic discrepancies mentioned , two main aspects missing. First, loss UMAP silhouette. Secondly, knowing , default, color scale shared across plots, like know range values color scale displaying. two aspects SCpubr::do_FeaturePlot() delves :\nFigure 1.10: SCpubr FeaturePlot split clusters.\nway, able achieve better understandable plot. Furthermore, can query multiple features. following example, provide three possible examples features:LYN gene located rownames count matrix (`rownames(sample)``).nCount_RNA metadata variable located colnames(sample@meta.data).PC_1 column dimensional reduction embedding, located colnames(sample@reductions[[\"pca\"]][[]])\nFigure 1.11: SCpubr FeaturePlot split clusters using multiple features.\ncan even subset previous plot set ofidentities split.particularly interested . color scale also limits contain values selected identities. can achieved provided vector identities split..idents parameter.\nFigure 1.12: SCpubr FeaturePlot split clusters using multiple features selected identities.\n","code":"\n# Group clusters into three values for visualization purposes.\nsample$new_clusters <- as.character(sample$seurat_clusters)\nsample$new_clusters[sample$new_clusters %in% c(\"0\", \"1\", \"2\", \"3\")] <- \"Cluster 1\"\nsample$new_clusters[sample$new_clusters %in% c(\"4\", \"5\", \"6\")] <- \"Cluster 2\"\nsample$new_clusters[sample$new_clusters %in% c(\"7\", \"8\", \"9\")] <- \"Cluster 3\"\n\n# Seurat Feature Plot using split.by.\np <- Seurat::FeaturePlot(sample, \n                         features = \"LYN\", \n                         split.by = \"new_clusters\")\np\n# SCpubr Feature Plot using split.by\np <- SCpubr::do_FeaturePlot(sample = sample, \n                            features = \"LYN\", \n                            split.by = \"new_clusters\")\n\np\n# Use split.by with multiple features.\np <- SCpubr::do_FeaturePlot(sample, \n                            features = c(\"LYN\", \"nCount_RNA\", \"PC_1\"), \n                            split.by = \"new_clusters\")\n                            \np\n# Using split.by.idents parameter alongside split.by.\np <- SCpubr::do_FeaturePlot(sample, \n                            features = c(\"LYN\", \"nCount_RNA\", \"PC_1\"), \n                            split.by = \"seurat_clusters\", \n                            split.by.idents = c(\"2\", \"5\"))\n\np"},{"path":"nebulosa-plots.html","id":"nebulosa-plots","chapter":"3 Nebulosa plots","heading":"3 Nebulosa plots","text":"plot comes straight Nebulosa package. information, vignette. short, computes “density” whether surrounding cells (UMAP embedding) also express variable provide function, variables one feed Seurat::FeaturePlot(). default plot looks like:","code":""},{"path":"nebulosa-plots.html","id":"basic-usage-2","chapter":"3 Nebulosa plots","heading":"3.1 Basic usage","text":"\nFigure 1.1: Nebulosa plot\nway, know clusters enriched CD14, also know regions highest density cells expressing . Minor modifications, line rest plots, applied SCpubr:\nFigure 1.2: SCpubr Nebulosa plot.\n, type visualization becomes natural partner `Seurat::FeaturePlot()’ able visualize expression variable, also query density surrounding cells. example:\nFigure 1.3: SCpubr FeaturePlot NebulosaPlot.\nNebulosa package also offers option query multiple features time:\nFigure 1.4: SCpubr Nebulosa plot multiple features.\n, intriguingly, can also compute joint density features. achieved parsing joint = TRUE.\nFigure 1.5: SCpubr Nebulosa plot joint density\ninterested retrieving joint density plot, can accomplish return_only_joint parameter. Please note , since return one plot, wanted modify plot title, use plot.title instead:\nFigure 1.6: SCpubr Nebulosa plot joint density, selecting last plot\nquery multiple features use joint = TRUE, using plot.title add general title different panels generated. modify plot title individual panel, vector length number features needs provided individual.titles parameter. case title need changed, use NA instead. Please take note joint = TRUE generate extra panel needs another plot title.\nFigure 1.7: SCpubr Nebulosa plot joint density, modifying individual plot’s name\n","code":"\np <- Nebulosa::plot_density(sample,\n                            features = \"CD14\")\np\np <- SCpubr::do_NebulosaPlot(sample = sample, \n                             features = \"CD14\")\np\np1 <- SCpubr::do_FeaturePlot(sample = sample, \n                             features = \"CD14\") \np2 <- SCpubr::do_NebulosaPlot(sample = sample, \n                              features = \"CD14\")\np1 | p2\np <- SCpubr::do_NebulosaPlot(sample, \n                             features = c(\"CD14\", \"CD8A\"))\np\np <- SCpubr::do_NebulosaPlot(sample = sample, \n                             features = c(\"CD14\", \"CD8A\"), \n                             joint = TRUE)\np \nfeatures.use <- c(\"CD14\", \"CD8A\")\n\np <- SCpubr::do_NebulosaPlot(sample = sample, \n                             features = c(\"CD14\", \"CD8A\"), \n                             joint = TRUE, \n                             return_only_joint = TRUE,\n                             plot.title = \"Joint density CD14-CD8A\")\n\np\np <- SCpubr::do_NebulosaPlot(sample = sample, \n                             features = c(\"CD14\", \"CD8A\"), \n                             joint = TRUE, \n                             individual.titles = c(\"Plot A\",\n                                                   NA,\n                                                   \"Combined density\"),\n                             plot.title = \"Density analysis\")\np"},{"path":"bee-swarm-plots.html","id":"bee-swarm-plots","chapter":"4 Bee Swarm plots","heading":"4 Bee Swarm plots","text":"interesting plot. stems idea can order (rank) cells given variable. variable continuous variable, better representation. order goes lowest maximum value. , cells grouped variable interest displayed scatter plot fashion.Put example, let’s say cells queried enrichement given list genes. can done using Seurat::AddModuleScore(), returns one score cell. continuous variable. , can rank (.e: provide order lowest highest), giving cell lowest enrichment score first rank one maximum value last rank. plot rank right away, see behaves linear distribution:\nFigure 1.1: Distribution enrichment scores ranks.\ncan observe, ranks behave linear fashion expected. However, interesting part comes subset distribution another variable:\nFigure 1.2: Splitting ranks groups.\n, can see clusters show distribution ranks. clusters distribution shifted higher ranks others lower ones. Plotting differential distributions nice way aim SCpubr::do_BeeSwarmPlot(). achieved using ggbeeswarm package. idea using ggbeeswarm::geom_quasirandom() geometry provided package implement single-cell analyses came tutorial Broad Institute.","code":"\n# Compute enrichment.\ngene_list <- c(\"OLIG1\", \"MBP\")\nsample <- Seurat::AddModuleScore(sample, features = list(gene_list), name = \"testing_list\")\n\n# Rank the enrichment scores.\nsample$rank <- rank(sample$testing_list1)\n\n# Visualize the two distribution.\np1 <- SCpubr::do_VlnPlot(sample = sample,\n                         features = \"testing_list1\",\n                         group.by = \"orig.ident\")\np2 <- sample@meta.data %>% # Extract metadata\n      dplyr::mutate(cell_name = rownames(sample@meta.data)) %>% # Get the cell names.\n      dplyr::select(.data$cell_name, .data$rank) %>% # Select the columns to plot.\n      dplyr::arrange(.data$rank) %>% # Reorder the rows.\n      dplyr::mutate(cell_name = factor(.data$cell_name, levels = .data$cell_name)) %>% # Conver to factor for plotting.\n      ggplot2::ggplot(mapping = ggplot2::aes(x = .data$cell_name, y = .data$rank)) +\n      ggplot2::geom_point() +\n      ggpubr::theme_pubr() +\n      ggpubr::rremove(\"x.text\") +\n      ggpubr::rremove(\"x.ticks\") + \n      ggplot2::xlab(\"Cell name\") + \n      ggplot2::ylab(\"Rank\")\np <- p1 | p2\np\n\np <- sample@meta.data %>% # Extract metadata\n      dplyr::mutate(cell_name = rownames(sample@meta.data)) %>% # Get the cell names.\n      dplyr::select(.data$cell_name, .data$rank, .data$seurat_clusters) %>% # Select the columns to plot.\n      dplyr::arrange(.data$rank) %>% # Reorder the rows.\n      dplyr::mutate(cell_name = factor(.data$cell_name, levels = .data$cell_name)) %>% # Conver to factor for plotting.\n      ggplot2::ggplot(mapping = ggplot2::aes(x = .data$cell_name, y = .data$rank)) +\n      ggplot2::geom_point() +\n      ggpubr::theme_pubr() +\n      ggpubr::rremove(\"x.text\") +\n      ggpubr::rremove(\"x.ticks\") + \n      ggplot2::xlab(\"Cell name\") + \n      ggplot2::ylab(\"Rank\") + \n      ggplot2::facet_wrap(\"seurat_clusters\", ncol = 5)\np"},{"path":"bee-swarm-plots.html","id":"using-categorical-variables","chapter":"4 Bee Swarm plots","heading":"4.1 Using categorical variables","text":"Let’s say want focus much cluster driven PC_1 PC_2. first thought just use SCpubr::do_Dimplot() plot PCA embedding instead UMAP. also query PC_3 PC_4 --clear example.\nFigure 1.3: Plotting PCA embeddings SCpubr::do_DimPlot()\n, get right away decent overview. Clusters 0, 5, 7 8 separate PC_1 rest. However, many cases clear, image right. Bee Swarm plots come handy. implemented SCpubr::do_BeeSwarmPlot(). function needs user provide:\n- variable rank feature_to_rank.\n- groups divide plot group..\n- Whether output colored categorical continuous scale, continuous_feature.\nFigure 1.4: SCpubr Bee Swarm plots categorical variables.\n, selected PC_1 PC_4. can observe X axis Bee Swarm plot displays ordering (rank) cells across selected feature. Focusing PC_1, can see cluster 0 completely shifted right PC_1, nicely displayed Bee Swarm plot cells also ranked high (higher rank, bigger “value” feature rank, case, PC_1 value). case PC_4, Bee Swarm plot nicely shows clusters lay upper, lower middle part PC_4.important thing note kind plots cells rank. , imagine scenario like PC_4, artificially remove clusters 0, 3, 5, 7, 8, 9, leaving forming “straight line” PC_4. nature plot also separate remaining clusters:\nFigure 1.5: SCpubr Bee Swarm plots similar values.\nSee, still clearly see two groups, formed clusters 1 2, clusters 4 6. even remove clusters 1 2 still see similar effect.\nFigure 1.6: SCpubr Bee Swarm plots almost identical values.\ncan seen , clusters now span X axis. cells still ranked, therefore showing cloud dots. , just want , data visualization technique, plot comes set benefits caveats. visualization suffers trying plot highly similar values. Therefore, key understand nature variable want rank beforehand.","code":"\np1 <- SCpubr::do_DimPlot(sample, \n                         reduction = \"pca\", \n                         label = T, \n                         legend = F, \n                         dims = c(1, 2)) \np2 <- SCpubr::do_DimPlot(sample, \n                         reduction = \"pca\", \n                         label = T, \n                         legend = F, \n                         dims = c(3, 4)) \n\np1 | p2\np1 <- SCpubr::do_DimPlot(sample = sample, \n                         reduction = \"pca\", \n                         label = T, \n                         legend = F, \n                         dims = c(1, 2))\n\np2 <- SCpubr::do_DimPlot(sample = sample, \n                         reduction = \"pca\", \n                         label = T, \n                         legend = F, \n                         dims = c(3, 4)) \n\np3 <- SCpubr::do_BeeSwarmPlot(sample = sample, \n                              feature_to_rank = \"PC_1\", \n                              group.by = \"seurat_clusters\", \n                              continuous_feature = F)\n\np4 <- SCpubr::do_BeeSwarmPlot(sample = sample, \n                              feature_to_rank = \"PC_4\", \n                              group.by = \"seurat_clusters\", \n                              continuous_feature = F)\n\n(p1 | p3) / (p2 | p4)\n# Clusters to exclude.\nclusters_exclude <- c(\"0\", \"3\", \"5\", \"7\", \"8\", \"9\")\n\n# Keep the original coloring.\ncols.use <- colorspace::qualitative_hcl(length(levels(sample)), \n                                        palette = \"Dark 3\")\nnames(cols.use) <- levels(sample)\n\n# Only provide the needed colors. If more are provided, an error is thrown.\ncols.use <- cols.use[!(names(cols.use) %in% clusters_exclude)]\n\np1 <- SCpubr::do_DimPlot(sample = sample[, !(sample$seurat_clusters %in% clusters_exclude)], \n                         reduction = \"pca\", \n                         label = T, \n                         legend = F, \n                         dims = c(3, 4), \n                         colors.use = cols.use) \np2 <- SCpubr::do_BeeSwarmPlot(sample = sample[, !(sample$seurat_clusters %in% clusters_exclude)], \n                              feature_to_rank = \"PC_4\", \n                              group.by = \"seurat_clusters\", \n                              continuous_feature = F, \n                              colors.use = cols.use)\n\np1 | p2\n# Clusters to exclude.\nclusters_exclude <- c(\"0\", \"1\", \"2\", \"3\", \"5\", \"7\", \"8\", \"9\")\n\n# Keep the original coloring.\ncols.use <- colorspace::qualitative_hcl(length(levels(sample)), \n                                        palette = \"Dark 3\")\nnames(cols.use) <- levels(sample)\n\n# Only provide the needed colors. If more are provided, an error is thrown.\ncols.use <- cols.use[!(names(cols.use) %in% clusters_exclude)]\n\n\np1 <- SCpubr::do_DimPlot(sample = sample[, !(sample$seurat_clusters %in% clusters_exclude)], \n                         reduction = \"pca\", \n                         label = T, \n                         legend = F, \n                         dims = c(3, 4), \n                         colors.use = cols.use) \np2 <- SCpubr::do_BeeSwarmPlot(sample = sample[, !(sample$seurat_clusters %in% clusters_exclude)], \n                              feature_to_rank = \"PC_4\", \n                              group.by = \"seurat_clusters\", \n                              continuous_feature = F, \n                              colors.use = cols.use)\n\np1 | p2"},{"path":"bee-swarm-plots.html","id":"using-continuous-variables","chapter":"4 Bee Swarm plots","heading":"4.2 Using continuous variables","text":"also scenarios want rank cells continuous variable, instead showing colors group (anyway depicted Y axis), want introduce continuous color scale. specially interesting assess enrichment clusters towards given set features.\nFigure 1.7: Using continuous color scale SCpubr::do_BeeSwarmPlot().\nusing combination figures, can also assess monocyte signature seems predominantly enriched clusters 0 7.","code":"\n# Set up list of a genes to compute enrichment. Let's use a monocyte signature.\ngenes.use <- c(\"CD14\", \"LYZ\")\n\n# Compute enrichment and rename the output.\nsample <- Seurat::AddModuleScore(sample, \n                                 features = genes.use, \n                                 name = \"Monocyte_signature\")\nsample$Monocyte_signature <- sample$Monocyte_signature1\nsample$Monocyte_signature1 <- NULL\n\np1 <- SCpubr::do_DimPlot(sample = sample, \n                         label = T, \n                         legend = F)\np2 <- SCpubr::do_FeaturePlot(sample = sample, \n                             features = \"Monocyte_signature\") \np3 <- SCpubr::do_BeeSwarmPlot(sample = sample, \n                              feature_to_rank = \"Monocyte_signature\", \n                              group.by = \"seurat_clusters\", \n                              continuous_feature = T)\np1 | p2 | p3"},{"path":"bee-swarm-plots.html","id":"change-default-colors-in-categorical-variables","chapter":"4 Bee Swarm plots","heading":"4.3 Change default colors in categorical variables","text":"categorical representations, can modify default color palette providing custom one colors.use. named vector HEX values names groups names values:\nFigure 1.8: SCpubr, modifying default colors Bee Swarm plot\n","code":"\n# Create a color scale for the unique values in seurat clusters.\ncolors <- c(\"0\" = \"#001219\",\n            \"1\" = \"#005f73\",\n            \"2\" = \"#0a9396\",\n            \"3\" = \"#94d2bd\",\n            \"4\" = \"#e9d8a6\",\n            \"5\" = \"#ee9b00\",\n            \"6\" = \"#ca6702\",\n            \"7\" = \"#bb3e03\",\n            \"8\" = \"#ae2012\",\n            \"9\" = \"#9b2226\")\n\np <- SCpubr::do_BeeSwarmPlot(sample = sample, \n                             feature_to_rank = \"Monocyte_signature\", \n                             group.by = \"seurat_clusters\",\n                             colors.use = colors)\np"},{"path":"violin-plots.html","id":"violin-plots","chapter":"5 Violin plots","heading":"5 Violin plots","text":"Violin plots require little description. depiction distribution variable. makes ideal order show differential enrichment patterns alongside different groups. , also included Seurat Seurat::VlnPlot() function. first time new user encounters function likely going querying different QC paramters, number UMIs, number genes percentage mitochondrial RNA. looks number UMIs:","code":""},{"path":"violin-plots.html","id":"basic-usage-3","chapter":"5 Violin plots","heading":"5.1 Basic usage","text":"\nFigure 1.1: Seurat’s violin plot.\none thing really stands , indeed, extra dots plotted alongside violin plot. Since dot represent cell, quickly becomes dominant feature figure. One can play alpha dots reduce presence:\nFigure 1.2: Seurat’s violin plot transparent dots.\nstill, making dots almost invisible, still observe dominance bigger clusters. Therefore, ’s better remove . , together modifications basis SCpubr::do_VlnPlot(). default plot looks like:\nFigure 1.3: SCpubr’s violin plot.\naddition removing dots, boxplot added violin shape, get better sense quantiles distribution. effect can removed using plot_boxplot = FALSE. Also, legend default removed, groups displayed already X axis.\nFigure 1.4: SCpubr’s violin plot without box plots.\nwant rotate X axis labels, can also providing rotate_x_labels = TRUE/FALSE:\nFigure 1.5: SCpubr’s violin plot rotating x axis.\ncan also specific violin plots one feature queried. , rotate_x_labels vector logical values (TRUE FALSE) length equal number features.\nFigure 1.6: SCpubr’s violin plot rotating x axis.\nHowever, please note names current identities long enough, result overlapping one another.","code":"\np <- Seurat::VlnPlot(sample, \n                     features = \"nCount_RNA\")\np\np <- Seurat::VlnPlot(sample, \n                     features = \"nCount_RNA\")\n# \"Surgically\" add the alpha parameter in the ggplot2 object.\np$layers[[2]]$aes_params$alpha <- 0.05\np\np <- SCpubr::do_VlnPlot(sample = sample, \n                        features = \"nCount_RNA\")\np\np <- SCpubr::do_VlnPlot(sample = sample, \n                        features = \"nCount_RNA\",\n                        plot_boxplot = FALSE)\np\np <- SCpubr::do_VlnPlot(sample = sample, \n                        features = c(\"nCount_RNA\"),\n                        rotate_x_labels = TRUE,)\np\np <- SCpubr::do_VlnPlot(sample = sample, \n                        features = c(\"nCount_RNA\", \"nFeature_RNA\"),\n                        rotate_x_labels = c(FALSE, TRUE),\n                        ncol = 1)\np"},{"path":"violin-plots.html","id":"violin-plots-as-a-means-of-qc","chapter":"5 Violin plots","heading":"5.2 Violin plots as a means of QC","text":"QC analyses, users might want also add features line indicating put cutoff. can achieved using y_cut parameter. Currently, one value per plot y_cut can used.\nFigure 1.7: SCpubr’s violin plot horizontal line.\nmultiple features queried, user can set different horizontal lines parsing vector y_cut. Also, can achieved individual plot titles using individual.titles parameter. restriction, vector length number features. particular plot, want modify anything, use NA instead.\nFigure 1.8: SCpubr’s violin plot multiple features.\n","code":"\np <- SCpubr::do_VlnPlot(sample = sample, \n                        features = \"nCount_RNA\", \n                        y_cut = 30000)\np\np <- SCpubr::do_VlnPlot(sample = sample, \n                        features = c(\"nCount_RNA\", \"nFeature_RNA\"), \n                        y_cut = c(NA, 5000), \n                        individual.titles = c(\"UMIs\", NA),\n                        ncol = 1)\np"},{"path":"violin-plots.html","id":"modifying-aesthetics","chapter":"5 Violin plots","heading":"5.3 Modifying aesthetics","text":"Sometimes might want modify overall look violin plots. instance, line width violin shape box plot can modified line_width parameter, defaults 1.\nFigure 1.9: SCpubr’s violin plot increased line width\nAlso, width box plots can modified boxplot_width parameter, defaults 0.2. aware parameter scales width boxplot. , value 1 provided, box plot take much space violin shape. recommended deviate 0.2 small amount.\nFigure 1.10: SCpubr’s violin plot decreased box plot width\n","code":"\np1 <- SCpubr::do_VlnPlot(sample = sample,\n                         features = \"nCount_RNA\")\n\np2 <- SCpubr::do_VlnPlot(sample = sample,\n                         features = \"nCount_RNA\",\n                         line_width = 2)\n\np <- p1 / p2\np\np1 <- SCpubr::do_VlnPlot(sample = sample,\n                         features = \"nCount_RNA\")\n\np2 <- SCpubr::do_VlnPlot(sample = sample,\n                         features = \"nCount_RNA\",\n                         boxplot_width = 0.1)\n\np <- p1 / p2\np"},{"path":"dot-plots.html","id":"dot-plots","chapter":"6 Dot plots","heading":"6 Dot plots","text":"Dot plots nice data representation technique. involves use two scales. One scale color-based second one size-based. context Seurat::DotPlot(), scales pre-defined contain average expression values color scale percentage cells within group expressing feature size, increasing percentage grows bigger. heavily implied features need genes, otherwise color scale lost. output Seurat:","code":""},{"path":"dot-plots.html","id":"basic-usage-4","chapter":"6 Dot plots","heading":"6.1 Basic usage","text":"\nFigure 1.1: Seurat DotPlot\ncan seen, try plot type variables, resulting plot contain color scale. SCpubr::do_DimPlot() focuses enhancing overall appearance plots. Implementation using types features currently supported. looks using SCpubr::do_DimPlot():\nFigure 1.2: SCpubr DotPlot\n","code":"\np1 <- Seurat::DotPlot(sample, \n                      features = \"CD14\")\np2 <- Seurat::DotPlot(sample, \n                      features = \"nCount_RNA\")\np1 | p2\np1 <- SCpubr::do_DotPlot(sample = sample, \n                         features = \"CD14\")\np2 <- SCpubr::do_DotPlot(sample = sample, \n                         features = \"nFeature_RNA\")\np1 | p2"},{"path":"dot-plots.html","id":"querying-multiple-features-at-once","chapter":"6 Dot plots","heading":"6.2 Querying multiple features at once","text":"true power data visualization relies querying multiple genes . Let’s query ones described Seurat vignette:\nFigure 1.3: SCpubr DotPlot using multiple genes\n, can clearly distinguish clusters highly enriched given genes. proves interesting way query cluster identities. highly dependent, though, accuracy selected genes queried dataset. actually provide list genes named list, can facet plot different list genes provided:\nFigure 1.4: SCpubr DotPlot using multiple genes\n","code":"\ngenes <- c(\"IL7R\", \"CCR7\", \"CD14\", \"LYZ\", \n           \"S100A4\", \"MS4A1\", \"CD8A\", \"FCGR3A\", \n           \"MS4A7\", \"GNLY\", \"NKG7\", \"FCER1A\", \n           \"CST3\", \"PPBP\")\np <- SCpubr::do_DotPlot(sample = sample, \n                        features = genes)\np\ngenes <- list(\"Naive CD4+ T\" = c(\"IL7R\", \"CCR7\"),\n              \"CD14+ Mono\" = c(\"CD14\", \"LYZ\"),\n              \"Memory CD4+\" = c(\"S100A4\"),\n              \"B\" = c(\"MS4A1\"),\n              \"CD8+ T\" = c(\"CD8A\"),\n              \"FCGR3A+ Mono\" = c(\"FCGR3A\", \"MS4A7\"),\n              \"NK\" = c(\"GNLY\", \"NKG7\"),\n              \"DC\" = c(\"FCER1A\", \"CST3\"),\n              \"Platelet\" = c(\"PPBP\"))\np <- SCpubr::do_DotPlot(sample = sample, \n                        features = genes)\np"},{"path":"dot-plots.html","id":"clustering-the-identities","chapter":"6 Dot plots","heading":"6.3 Clustering the identities","text":"One really cool feature Seurat::DotPlot() lets cluster identities Y axis depending similar across values X axis. achieved using cluster.idents = TRUE, parameter also implemented SCpubr::do_DotPlot():\nFigure 1.5: SCpubr DotPlot using multiple genes clustering identities\n","code":"\ngenes <- list(\"Naive CD4+ T\" = c(\"IL7R\", \"CCR7\"),\n              \"CD14+ Mono\" = c(\"CD14\", \"LYZ\"),\n              \"Memory CD4+\" = c(\"S100A4\"),\n              \"B\" = c(\"MS4A1\"),\n              \"CD8+ T\" = c(\"CD8A\"),\n              \"FCGR3A+ Mono\" = c(\"FCGR3A\", \"MS4A7\"),\n              \"NK\" = c(\"GNLY\", \"NKG7\"),\n              \"DC\" = c(\"FCER1A\", \"CST3\"),\n              \"Platelet\" = c(\"PPBP\"))\np1 <- SCpubr::do_DotPlot(sample = sample, \n                         features = genes,\n                         plot.title = \"Not clustered\")\np2 <- SCpubr::do_DotPlot(sample = sample, \n                         features = genes, \n                         cluster.idents = TRUE, \n                         plot.title = \"Clustered\")\np1 / p2"},{"path":"dot-plots.html","id":"inverting-the-axes","chapter":"6 Dot plots","heading":"6.4 Inverting the axes","text":"SCpubr::do_DotPlot(), can also invert axes, groups X axis genes Y axis. achieved using flip = TRUE. Note, however, work using named list genes input, completely distort way facets computed. Given , combination parameters currently blocked SCpubr.\nFigure 1.6: SCpubr DotPlot using multiple genes clustering identities flipping axes\n","code":"\ngenes <- c(\"IL7R\", \"CCR7\", \"CD14\", \"LYZ\", \n           \"S100A4\", \"MS4A1\", \"CD8A\", \"FCGR3A\", \n           \"MS4A7\", \"GNLY\", \"NKG7\", \"FCER1A\", \n           \"CST3\", \"PPBP\")\np1 <- SCpubr::do_DotPlot(sample = sample, \n                         features = genes, \n                         plot.title = \"Not clustered\", \n                         flip = T)\np2 <- SCpubr::do_DotPlot(sample = sample, \n                         features = genes, \n                         cluster.idents = TRUE, \n                         plot.title = \"Clustered\", \n                         flip = T,\n                         rotate_x_labels = T)\np1 | p2"},{"path":"bar-plots.html","id":"bar-plots","chapter":"7 Bar plots","heading":"7 Bar plots","text":"Bar plots another well known data representation. handy resource plot summary statistics QC part single-cell analysis. Consequently, part SCpubr, available SCpubr::do_BarPlot(). Let’s say interested plotting different number cells cluster.","code":""},{"path":"bar-plots.html","id":"basic-usage-5","chapter":"7 Bar plots","heading":"7.1 Basic usage","text":"\nFigure 1.1: SCpubr Bar plots, plotting single variables\nUsing SCpubr::do_BarPlot() features yields simple bar plot ordered descending value. can also set direction bars horizontal = TRUE/FALSE, default set vertical underlying assumptions taken generate plots:values features need metadata variables, stored object@meta.data. design choice, data need grouped using dplyr tidyr. also later apply values provided group..feature provided need clear rather small number groups. good estimate assess querying feature table, table(sample@meta.data[, feature]).Focusing last point, happen choose feature high number unique values:\nFigure 1.2: SCpubr Bar plots, choosing wrong variable\nhappens, precisely, high amount unique values nCount_RNA. type continuous values best suited data visualizations like histogram.","code":"\np1 <- SCpubr::do_BarPlot(sample = sample, \n                         features = \"seurat_clusters\", \n                         legend = F, \n                         plot.title = \"Number of cells per cluster\")\np2 <- SCpubr::do_BarPlot(sample = sample, \n                         features = \"seurat_clusters\", \n                         legend = F, \n                         plot.title = \"Number of cells per cluster\", \n                         horizontal = T)\np1 | p2\n\np <- SCpubr::do_BarPlot(sample = sample, \n                        features = \"nCount_RNA\", \n                        legend = F, \n                        plot.title = \"Number of UMIs?\",\n                        horizontal = F)\np"},{"path":"bar-plots.html","id":"grouping-by-a-second-variable","chapter":"7 Bar plots","heading":"7.2 Grouping by a second variable","text":"Let’s expand previous example number cells per cluster. interested , like profile many cells cluster present unique samples present Seurat object? , need provide SCpubr::do_BarPlot() second parameter, group., tackles want feature grouped:\nFigure 1.3: SCpubr Bar plots, introducing variable group values \ncan see, nicely yields many number bars unique values feature, bars segmented many times unique values group.. first, hard grasp, helps thinking two parameters, used together, :feature: want show different bars.group.: Secondary variable bars generated feature can subdivided.Another interesting parameter introduced last example position. Position can either stack fill. difference position = \"stack\" yield total number cells unique values feature, position = \"fill\" bring bars height split bar proportions within bar different groups (one group.= NULL many groups group.used). Therefore, becomes highly recommended use position = \"stack\" group.used position = \"fill\" otherwise. also warned package. want silence warnings, use verbose = FALSE.\nFigure 1.4: SCpubr Bar plots, difference position\n","code":"\n# We only have one value in orig.ident. Let's modify it so that it resembles a multi-sample Seurat object.\nsample$modified_orig.ident <- sample(x = c(\"Sample_A\", \"Sample_B\", \"Sample_C\"), \n                                     size = ncol(sample), \n                                     replace = T, \n                                     prob = c(0.2, 0.7, 0.1))\n\np1 <- SCpubr::do_BarPlot(sample, \n                         features = \"modified_orig.ident\",\n                         plot.title = \"Number of cells per sample\",\n                         position = \"stack\",\n                         legend = T,\n                         horizontal = F)\n\np2 <- SCpubr::do_BarPlot(sample, \n                         features = \"modified_orig.ident\", \n                         group.by = \"seurat_clusters\",\n                         plot.title = \"Number of cells per cluster and sample\",\n                         position = \"stack\",\n                         legend = T,\n                         horizontal = F)\np1 | p2\n# We are going to use the previously generated sample assignment.\n\np1 <- SCpubr::do_BarPlot(sample, \n                         features = \"modified_orig.ident\",\n                         plot.title = \"Without group.by - position = stack\",\n                         position = \"stack\",\n                         legend = T,\n                         horizontal = F)\n\np2 <- SCpubr::do_BarPlot(sample, \n                         features = \"modified_orig.ident\",\n                         plot.title = \"Without group.by - position = fill\",\n                         position = \"fill\",\n                         legend = T,\n                         horizontal = F)\n\np3 <- SCpubr::do_BarPlot(sample, \n                         features = \"modified_orig.ident\",\n                         group.by = \"seurat_clusters\",\n                         plot.title = \"With group.by - position = stack\",\n                         position = \"stack\",\n                         legend = T,\n                         horizontal = F)\n\np4 <- SCpubr::do_BarPlot(sample, \n                         features = \"modified_orig.ident\",\n                         group.by = \"seurat_clusters\",\n                         plot.title = \"With group.by - position = fill\",\n                         position = \"fill\",\n                         legend = T,\n                         horizontal = F)\np <- (p1 | p2) / (p3 | p4)\np"},{"path":"bar-plots.html","id":"reordering-columns-based-on-a-single-entity","chapter":"7 Bar plots","heading":"7.3 Reordering columns based on a single entity","text":"One advanced use bar plots, useful one reorder columns based single entity descending order. works group.set best position = \"fill\". instance, imagine scenario heavily interested cluster 1, want reorder columns based . achieved providing order.parameter SCpubr::do_BarPlot(). value order.necessary one unique values group.. Therefore, best practice, one want generate bar plots without using order.decide. Let’s also, sake example, modify proportions cluster 1 becomes really evident. looks:\nFigure 1.5: SCpubr Bar plots, reordering colums using order.\n","code":"\n# Modify proportions. \nsample$modified_seurat_clusters <- as.character(sample$seurat_clusters)\nsample$modified_seurat_clusters[sample$modified_orig.ident == \"Sample_A\" & sample$modified_seurat_clusters %in% c(\"0\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\")] <- \"1\"\n\np1 <- SCpubr::do_BarPlot(sample, \n                         features = \"modified_orig.ident\",\n                         group.by = \"modified_seurat_clusters\",\n                         plot.title = \"Number of cells per sample\",\n                         order.by = \"1\",\n                         position = \"stack\",\n                         legend = T,\n                         horizontal = F)\n\np2 <- SCpubr::do_BarPlot(sample, \n                         features = \"modified_orig.ident\", \n                         group.by = \"modified_seurat_clusters\",\n                         plot.title = \"Number of cells per cluster and sample\",\n                         order.by = \"1\",\n                         position = \"fill\",\n                         legend = T,\n                         horizontal = F)\np1 | p2"},{"path":"bar-plots.html","id":"adding-the-exact-values-to-the-bars","chapter":"7 Bar plots","heading":"7.4 Adding the exact values to the bars","text":"Sometimes, interested displaying bars also reporting exact number bar. can achieved using add.summary_labels = TRUE:\nFigure 1.6: SCpubr, Adding labels bars\nsize labels can adjusted using size.labels. default value 3. value changes size quite drastically. Modification low ammounts reccomended.\nFigure 1.7: SCpubr, Modifying size labels bars\nusing combination group., also adds value top bar:\nFigure 1.8: SCpubr, Adding labels bars grouped another variable\nalso interested adding labels bar sugroups, can using add.subgroup_labels = TRUE:\nFigure 1.9: SCpubr, Adding labels bars subgroups grouped another variable\ncan observed, type labelling situational highly depends overall structure bars whether feasible plot many labels. order ease cluttering, one can pass repel.subroup_labels = TRUE avoid overlapping group labels (colored ones inside bars).\nFigure 1.10: SCpubr, Relocating group labels\nalso want summary labels (ones black top bar) relocate, can use repel.summary_labels = TRUE. combination parameters designed grant user freedom keep either two groups labels centered make either group appear disappear (bar plot different scenario sometimes might viable option).\nFigure 1.11: SCpubr, Adding relocating bars\ntime , labelling feature available position = \"stack\".","code":"\n\np1 <- SCpubr::do_BarPlot(sample = sample, \n                         features = \"seurat_clusters\", \n                         legend = FALSE,\n                         add.summary_labels = TRUE)\np2 <- SCpubr::do_BarPlot(sample = sample, \n                         features = \"seurat_clusters\", \n                         legend = FALSE,\n                         horizontal = TRUE,\n                         add.summary_labels = TRUE)\np1 | p2\n\np1 <- SCpubr::do_BarPlot(sample = sample, \n                         features = \"seurat_clusters\", \n                         legend = FALSE,\n                         add.summary_labels = TRUE,\n                         size.labels = 2.5)\np2 <- SCpubr::do_BarPlot(sample = sample, \n                         features = \"seurat_clusters\", \n                         legend = FALSE,\n                         horizontal = TRUE,\n                         add.summary_labels = TRUE,\n                         size.labels = 2.5)\np1 | p2\np1 <- SCpubr::do_BarPlot(sample = sample, \n                         features = \"seurat_clusters\",\n                         group.by = \"modified_orig.ident\",\n                         legend = TRUE,\n                         add.summary_labels = TRUE)\np2 <- SCpubr::do_BarPlot(sample = sample, \n                         features = \"seurat_clusters\",\n                         group.by = \"modified_orig.ident\", \n                         legend = TRUE,\n                         horizontal = TRUE,\n                         add.summary_labels = TRUE)\np1 | p2\np1 <- SCpubr::do_BarPlot(sample = sample, \n                         features = \"seurat_clusters\",\n                         group.by = \"modified_orig.ident\",\n                         legend = TRUE,\n                         add.summary_labels = TRUE,\n                         add.subgroup_labels = TRUE)\np2 <- SCpubr::do_BarPlot(sample = sample, \n                         features = \"seurat_clusters\",\n                         group.by = \"modified_orig.ident\", \n                         legend = TRUE,\n                         horizontal = TRUE,\n                         add.summary_labels = TRUE,\n                         add.subgroup_labels = TRUE)\np1 | p2\np1 <- SCpubr::do_BarPlot(sample = sample, \n                         features = \"seurat_clusters\",\n                         group.by = \"modified_orig.ident\",\n                         legend = TRUE,\n                         add.summary_labels = TRUE,\n                         add.subgroup_labels = TRUE,\n                         repel.subgroup_labels = TRUE)\np2 <- SCpubr::do_BarPlot(sample = sample, \n                         features = \"seurat_clusters\",\n                         group.by = \"modified_orig.ident\", \n                         legend = TRUE,\n                         horizontal = TRUE,\n                         add.summary_labels = TRUE,\n                         add.subgroup_labels = TRUE,\n                         repel.subgroup_labels = TRUE)\np1 | p2\np1 <- SCpubr::do_BarPlot(sample = sample, \n                         features = \"seurat_clusters\",\n                         group.by = \"modified_orig.ident\",\n                         legend = TRUE,\n                         add.summary_labels = TRUE,\n                         add.subgroup_labels = TRUE,\n                         repel.summary_labels = TRUE,\n                         repel.subgroup_labels = TRUE)\np2 <- SCpubr::do_BarPlot(sample = sample, \n                         features = \"seurat_clusters\",\n                         group.by = \"modified_orig.ident\",\n                         legend = TRUE,\n                         horizontal = TRUE,\n                         add.summary_labels = TRUE,\n                         add.subgroup_labels = TRUE,\n                         repel.summary_labels = TRUE,\n                         repel.subgroup_labels = TRUE)\np1 | p2"},{"path":"bar-plots.html","id":"retrieving-the-data-matrix","chapter":"7 Bar plots","heading":"7.5 Retrieving the data matrix","text":"Many times, interested actually displaying data, also want store data matrix. common case supplementary material publications. assess , one can set return_data_matrix = TRUE, output list containing plot data matrix (long wide format). also work several features queried time. position = \"fill\" position = \"stack\" output , total counts.type data matrix beneficial different purposes. Long data desired format want store data matrix future use plotting. Wide data, turn, easier understand right away.","code":"\noutput <- SCpubr::do_BarPlot(sample, \n                             features = \"modified_orig.ident\",\n                             group.by = \"seurat_clusters\",\n                             legend = TRUE,\n                             horizontal = FALSE,\n                             return_data_matrix = TRUE)\n# Retrieve plot.\nplot <- output$plot\n\n# Retrieve data in long format.\ndata.long <- output$data[[\"modified_orig.ident\"]]$long\n\n# Retrieve data in wide format.\ndata.wide <- output$data[[\"modified_orig.ident\"]]$wide\n\n# Show data in long format.\nknitr::kable(head(data.long, 15), booktabs = TRUE) %>%\n  kableExtra::kable_styling(font_size = 12)\n# Show data in wide format.\nknitr::kable(head(data.wide, 15), booktabs = TRUE) %>%\n  kableExtra::kable_styling(font_size = 12)"},{"path":"term-enrichment-plots.html","id":"term-enrichment-plots","chapter":"8 Term Enrichment Plots","heading":"8 Term Enrichment Plots","text":"One key downstream analysis Single Cell analysis revolves list candidate genes (.e: DE genes) one wants know whether genes enriched specific biological function, pathway cell type. can easily done using enrichR package, R interface website, Enrichr. package allows query list genes 100 databases retrieve terms enriched list genes, together adjusted p-value. process, together data processing visualization comprised SCpubr::do_TermEnrichmentPlot().First , enrichR allows select site query results . can provided site parameter can one following:\n- Enrichr.\n- FlyEnrichr.\n- WormEnrichr.\n- YeastEnrichr.\n- FishEnrichr., also need specify databases query . complete list databases can consulted using:databases use need provided character vector dbs_use parameter. However, one can also provide one following pre-defined options:“”: perform query 4 databases cell types (Azimuth, Descartes, PanglaoDB Descartes) 4 databases functional terms (MsigDB, GO-BP, GO-MF KEGG). default option parameter provided.“B”: Performs query cell type databases (Azimuth, Descartes, PanglaoDB Descartes).“C”: Performs query functional terms (MsigDB, GO-BP, GO-MF KEGG).previous option return list plots. plots can, , assembled together.\nFigure 1.1: SCpubr do_TermEnrichmentPlot use case.\n","code":"\ndbs <- sort(enrichR::listEnrichrDbs()[, 'libraryName'])\n# Genes related to breast cancer.\ngenes <- c(\"ABCB1\", \"ABCG2\", \"AHR\", \"AKT1\", \"AR\")\np <- SCpubr::do_TermEnrichmentPlot(genes = genes,\n                                   dbs_use = \"C\")\npatchwork::wrap_plots(p, ncol = 2)"},{"path":"term-enrichment-plots.html","id":"modifying-the-number-of-terms-to-retrieve.","chapter":"8 Term Enrichment Plots","heading":"8.1 Modifying the number of terms to retrieve.","text":"Depending focus analysis, might want focus one database retrieve terms . can achieved using nterms parameter.\nFigure 1.2: SCpubr do_TermEnrichmentPlot increased terms.\n","code":"\n# Genes related to breast cancer.\ngenes <- c(\"ABCB1\", \"ABCG2\", \"AHR\", \"AKT1\", \"AR\")\np <- SCpubr::do_TermEnrichmentPlot(genes = genes,\n                                   dbs_use = \"GO_Biological_Process_2021\",\n                                   nterms = 15)\np"},{"path":"term-enrichment-plots.html","id":"modifying-the-length-of-the-terms","chapter":"8 Term Enrichment Plots","heading":"8.2 Modifying the length of the terms","text":"Another issue plots , normally, term takes much space. , terms wrapped according cutoff defined nchar_wrap parameter. term characters value provided, split less half, always preserving whole words.\nFigure 1.3: SCpubr do_TermEnrichmentPlot reduced term length.\nway, one can enhance limit order term just one row.","code":"\n# Genes related to breast cancer.\ngenes <- c(\"ABCB1\", \"ABCG2\", \"AHR\", \"AKT1\", \"AR\")\np1 <- SCpubr::do_TermEnrichmentPlot(genes = genes,\n                                    dbs_use = \"GO_Biological_Process_2021\",\n                                    nterms = 15)\np2 <- SCpubr::do_TermEnrichmentPlot(genes = genes,\n                                    dbs_use = \"GO_Biological_Process_2021\",\n                                    nterms = 15,\n                                    nchar_wrap = 30)\np <- p1 | p2\np"},{"path":"term-enrichment-plots.html","id":"increase-the-font-size-of-the-labels","chapter":"8 Term Enrichment Plots","heading":"8.3 Increase the font size of the labels","text":"want increase font size labels - , anything part legend titles, use text_labels_size parameter:\nFigure 1.4: SCpubr do_TermEnrichmentPlot modified fontsize\n","code":"\n# Genes related to breast cancer.\ngenes <- c(\"ABCB1\", \"ABCG2\", \"AHR\", \"AKT1\", \"AR\")\np1 <- SCpubr::do_TermEnrichmentPlot(genes = genes,\n                                   dbs_use = \"GO_Biological_Process_2021\")\np2 <- SCpubr::do_TermEnrichmentPlot(genes = genes,\n                                   text_labels_size = 6,\n                                   dbs_use = \"GO_Biological_Process_2021\")\n\np <- p1 | p2\np"},{"path":"enrichment-score-heatmaps.html","id":"enrichment-score-heatmaps","chapter":"9 Enrichment score heatmaps","heading":"9 Enrichment score heatmaps","text":"common approach make sense cells query several list marker genes, retrieved literature, compute enriched cell given list genes. achieved using Seurat::AddModuleScore. scores can visualized Feature plot, one can also aggregate enrichment scores variable interest, instance different clusters sample.kind heatmaps can easily computed using SCpubr::do_EnrichmentHeatmap():","code":""},{"path":"enrichment-score-heatmaps.html","id":"single-grouping-variable","chapter":"9 Enrichment score heatmaps","heading":"9.1 Single grouping variable","text":"\nFigure 1.1: SCpubr::do_EnrichmentHeatmap default parameters.\ndefault, SCpubr::do_EnrichmentHeatmap aggregates values current identity. However, metadata variables can used aggregate . , provide name group.parameter.\nFigure 1.2: SCpubr::do_EnrichmentHeatmap custom aggregation.\nmatrix can transposed using transpose = TRUE.\nFigure 1.3: SCpubr::do_EnrichmentHeatmap transposed matrix.\nrows column names can rotated using column_names_rot row_names_rot parameters, providing desired angle.\nFigure 1.4: SCpubr::do_EnrichmentHeatmap transposed matrix different angle column names.\n","code":"\n# Define list of genes.\ngenes <- list(\"Naive CD4+ T\" = c(\"IL7R\", \"CCR7\"),\n              \"CD14+ Mono\" = c(\"CD14\", \"LYZ\"),\n              \"Memory CD4+\" = c(\"S100A4\"),\n              \"B\" = c(\"MS4A1\"),\n              \"CD8+ T\" = c(\"CD8A\"),\n              \"FCGR3A+ Mono\" = c(\"FCGR3A\", \"MS4A7\"),\n              \"NK\" = c(\"GNLY\", \"NKG7\"),\n              \"DC\" = c(\"FCER1A\", \"CST3\"),\n              \"Platelet\" = c(\"PPBP\"))\n\n# Default parameters.\np <- SCpubr::do_EnrichmentHeatmap(sample = sample,\n                                  list_genes = genes)\np\n# Custom aggregated values.\np <- SCpubr::do_EnrichmentHeatmap(sample = sample,\n                                  list_genes = genes,\n                                  group.by = \"orig.ident\")\np\n# Transposing the matrix.\np <- SCpubr::do_EnrichmentHeatmap(sample = sample,\n                                  list_genes = genes,\n                                  transpose = TRUE)\np\n# Rotating the labels.\np <- SCpubr::do_EnrichmentHeatmap(sample = sample,\n                                  list_genes = genes,\n                                  transpose = TRUE,\n                                  column_names_rot = 0)\np"},{"path":"enrichment-score-heatmaps.html","id":"multiple-grouping-variables","chapter":"9 Enrichment score heatmaps","heading":"9.2 Multiple grouping variables","text":"One can split output heatmap several according second metadata variable. achieved using split.parameter.\nFigure 1.5: SCpubr::do_EnrichmentHeatmap transposed matrix using split..\ndefault, heatmaps joined horizontally. want joined vertically, use split.horizontal = FALSE\nFigure 1.6: SCpubr::do_EnrichmentHeatmap transposed matrix using split.joined vertically.\n","code":"\n# Splitting by a second metadata variable.\nsample$custom_group <- ifelse(sample$seurat_clusters %in% c(\"1\", \"3\", \"5\", \"7\", \"9\"), \"Group A\", \"Group B\")\np <- SCpubr::do_EnrichmentHeatmap(sample = sample,\n                                  list_genes = genes,\n                                  transpose = TRUE,\n                                  column_names_rot = 0,\n                                  cluster_cols = F,\n                                  cluster_rows = T,\n                                  split.by = \"custom_group\")\np\n# Splitting by a second metadata variable and joining vertically.\np <- SCpubr::do_EnrichmentHeatmap(sample = sample,\n                                  list_genes = genes,\n                                  transpose = TRUE,\n                                  column_names_rot = 0,\n                                  cluster_cols = F,\n                                  cluster_rows = T,\n                                  split.by = \"custom_group\",\n                                  split.horizontal = F)\np"},{"path":"enrichment-score-heatmaps.html","id":"changing-the-cell-size-in-the-heatmap.","chapter":"9 Enrichment score heatmaps","heading":"9.3 Changing the cell size in the heatmap.","text":"design, aspect ratio tiles heatmap fixed cells squares, rectangles. However, user possibility increase/decrease cell size tile modifying cell_size parameter. set 5 default.\nFigure 1.7: SCpubr::do_EnrichmentHeatmap transposed matrix using split.changing tile size.\n","code":"\n# Modifying the tile size.\np <- SCpubr::do_EnrichmentHeatmap(sample = sample,\n                                  list_genes = genes,\n                                  transpose = TRUE,\n                                  column_names_rot = 0,\n                                  cluster_cols = F,\n                                  cluster_rows = T,\n                                  split.by = \"custom_group\",\n                                  cell_size = 7)\np"},{"path":"correlation-matrix-heatmaps.html","id":"correlation-matrix-heatmaps","chapter":"10 Correlation matrix heatmaps","heading":"10 Correlation matrix heatmaps","text":"common analysis perform single cell data assess much different subsets data correlated . , correlation matrices used, typically displayed heatmaps. implemented SCpubr::do_CorrelationPlot(). Right now, works single use case: computing correlation matrix highly variable genes desired groups. use cases implemented future.","code":""},{"path":"correlation-matrix-heatmaps.html","id":"using-highly-variable-genes","chapter":"10 Correlation matrix heatmaps","heading":"10.1 Using Highly Variable Genes","text":"\nFigure 1.1: SCpubr::do_CorrelationPlot default parameters.\ndefault, computes correlation current identities object. can changed providing another metadata variable group..\nFigure 1.2: SCpubr::do_CorrelationPlot custom grouping.\nAxes labels can also rotated.\nFigure 1.3: SCpubr::do_CorrelationPlot rotated axis labels.\n","code":"\n# Default values.\np <- SCpubr::do_CorrelationPlot(sample = sample)\np\n# Custom grouping.\nsample$custom_group <- ifelse(sample$seurat_clusters %in% c(\"1\", \"3\", \"5\", \"7\", \"9\"), \"Group A\", \"Group B\")\np <- SCpubr::do_CorrelationPlot(sample = sample, group.by = \"custom_group\")\np\n# Rotated axis labels.\np <- SCpubr::do_CorrelationPlot(sample = sample,\n                                column_names_rot = 0)\np"},{"path":"correlation-matrix-heatmaps.html","id":"changing-the-cell-size-in-the-heatmap.-1","chapter":"10 Correlation matrix heatmaps","heading":"10.2 Changing the cell size in the heatmap.","text":"Enrichment Heatmaps, aspect ratio tiles heatmap fixed cells squares, rectangles. can changed modifying cell_size parameter. set 5 default.\nFigure 1.4: SCpubr::do_CorrelationPlot rotated axis labels.\n","code":"\n# Increase cell size.\np <- SCpubr::do_CorrelationPlot(sample = sample,\n                                column_names_rot = 0,\n                                cell_size = 7)\np"},{"path":"cellular-state-plots.html","id":"cellular-state-plots","chapter":"11 Cellular State Plots","heading":"11 Cellular State Plots","text":"plots , bare basis, scatter plots. today, completely sure correct name plot, follow name provided plot Neftel, et al, 2019. core concept function computing plots, SCpubr::do_CellularStatesPlot() need Seurat object named list gene signatures. , function compute enrichment scores using Seurat::AddModuleScore() store metadata object, use plotting later . , alongside list gene signatures, user needs provide names lists plotted arguments.","code":"\ngene_set <- list(\"A\" = Seurat::VariableFeatures(sample)[1:10],\n                 \"B\" = Seurat::VariableFeatures(sample)[11:20],\n                 \"C\" = Seurat::VariableFeatures(sample)[21:30],\n                 \"D\" = Seurat::VariableFeatures(sample)[31:40])"},{"path":"cellular-state-plots.html","id":"variable-plots","chapter":"11 Cellular State Plots","heading":"11.1 2 variable plots","text":"easiest case. , user needs provide name two gene signatures present list genes provided gene_list parameter:\n- x1: enrichment scores computed list displayed X axis.\n- y1: enrichment scores computed list displayed Y axis.\nFigure 1.2: SCpubr::do_CellularStatesPlot, 2 variables\nway, can see much effect gene set regards gene set B. One can enforce simmetry plot enforce_symmetry = TRUE. Also, title, subtitle caption can provided plot.title, plot.subtitle plot.caption parameter.\nFigure 1.3: SCpubr::do_CellularStatesPlot, 2 variables symmetry enforced\n","code":"\np <- SCpubr::do_CellularStatesPlot(sample = sample,\n                                   gene_list = gene_set,\n                                   x1 = \"A\",\n                                   y1 = \"B\")\np\np <- SCpubr::do_CellularStatesPlot(sample = sample,\n                                   gene_list = gene_set,\n                                   x1 = \"A\",\n                                   y1 = \"B\",\n                                   enforce_simmetry = TRUE,\n                                   plot.title = \"2 Variable plot\",\n                                   plot.subtitle = \"It shows the relationship between A and B\",\n                                   plot.caption = \"Showing: Enrichment scores\")\np"},{"path":"cellular-state-plots.html","id":"variables","chapter":"11 Cellular State Plots","heading":"11.2 3 variables","text":"plot retrieved Tirosh, et al, 2016 plot requires user provide three gene sets, enrichment scores computed using Seurat::AddModuleScore. X axis, two gene sets assigned . Cells placed towards right enriched x1 towards left enriched x2. decided , first, retrieving enrichment scores lists keeping highest two. score turn positive negative depending gene list highest enrichment score belonged : positive x1 negative x2. Y axis. one gene set provided. value Y axis computed subtracting enrichment scores y1 value X axis.plot makes lot sense, showcased Tirosh, et al, 2016, Y axis shows differentiation trajectory. , contains enrichment scores stemness genes. Therefore, lower Y axis, less stem given cell . X axis, cells order depending whether enriched x1 x2. extreme value X axis, differentiated towards given list genes cell .\nFigure 1.4: SCpubr::do_CellularStatesPlot, 3 variables\nenforce_symmetry set true, X axis 0 middle point.\nFigure 1.5: SCpubr::do_CellularStatesPlot, 3 variables symmetry enforced\n","code":"\np <- SCpubr::do_CellularStatesPlot(sample = sample,\n                                   gene_list = gene_set,\n                                   x1 = \"A\",\n                                   y1 = \"B\",\n                                   x2 = \"C\")\np\np <- SCpubr::do_CellularStatesPlot(sample = sample,\n                                   gene_list = gene_set,\n                                   x1 = \"A\",\n                                   y1 = \"B\",\n                                   x2 = \"C\",\n                                   enforce_simmetry = TRUE,\n                                   plot.title = \"3 Variable plot\",\n                                   plot.subtitle = \"It shows the relationship between B (Y axis) and A and C (X axis)\",\n                                   plot.caption = \"Showing: Enrichment scores\")\np"},{"path":"cellular-state-plots.html","id":"variables-1","chapter":"11 Cellular State Plots","heading":"11.3 4 variables","text":"complicated variant plot, retrieved Neftel, et al, 2019. makes use four gene sets: x1, x2, y1 y2. general, brief description, enrichment scores computed 4 gene sets cells locate resulting figure according list enriched , towards given corner, following scheme shown .achieved assuming:\n- x1 x2 connected, y1 y2. first step decide highest score x1-x2 y1-y2, locate cells either upper lower half (Y axis).\n- , X axis, depending whether score Y axis positive negative, values computed log2 logarithm absolute difference enrichment scores plus 1: log2(abs((x1 y1) - (x2 y2)) + 1). resulting value positive negative depending whether score x1 y1 higher lower score x2 y2.\nFigure 1.6: SCpubr::do_CellularStatesPlot, 4 variables\nenforce_symmetry set true, plot completely squared.\nFigure 1.7: SCpubr::do_CellularStatesPlot, 4 variables symmetry enforced\n","code":"\np <- SCpubr::do_CellularStatesPlot(sample = sample,\n                                   gene_list = gene_set,\n                                   x1 = \"A\",\n                                   y1 = \"C\",\n                                   x2 = \"B\",\n                                   y2 = \"D\")\np\np <- SCpubr::do_CellularStatesPlot(sample = sample,\n                                   gene_list = gene_set,\n                                   x1 = \"A\",\n                                   y1 = \"C\",\n                                   x2 = \"B\",\n                                   y2 = \"D\",\n                                   enforce_simmetry = TRUE)\np"},{"path":"common-features-across-plots.html","id":"common-features-across-plots","chapter":"Common features across plots","heading":"Common features across plots","text":"page aims assess common functionalities present across different functions package.","code":""},{"path":"common-features-across-plots.html","id":"summary-of-the-features","chapter":"Common features across plots","heading":"Summary of the features","text":"Since going long plot-rich section, summary features access :Changing font size: Use font.size parameter provide number.Changing font type: Use font.type parameter provide either sans, mono serif.Add plot titles, subtitles captions: Use plot.title, plot.subtitle plot.caption parameters alongside text display.Changing legend types continuous variables: Use legend.type parameter provide either normal, colorbar colorsteps.Relocate legend: Use legend.position parameter alongside top, bottom, left right.Changing font size: Use font.size parameter provide number.Modify default colors: Use colors.use categorical variables viridis_color_map continuous (exceptions apply, see corresponding subsection) provide valid color representations valid viridis color map.","code":""},{"path":"common-features-across-plots.html","id":"changing-the-font-size.","chapter":"Common features across plots","heading":"Changing the font size.","text":"can achieved using font.size parameter works ggplot2-based plots.\nFigure 1.1: SCpubr do_DimPlot increasing font.size.\n\nFigure 1.2: SCpubr do_FeaturePlot increasing font.size.\n\nFigure 1.3: SCpubr do_NebulosaPlot increasing font.size.\n\nFigure 1.4: SCpubr do_BeeSwarmPlot increasing font.size.\n\nFigure 1.5: SCpubr do_VlnPlot increasing font.size.\n\nFigure 1.6: SCpubr do_DotPlot increasing font.size.\n\nFigure 1.7: SCpubr do_BarPlot increasing font.size.\n\nFigure 1.8: SCpubr do_TermEnrichmentPlot increasing font.size.\n\nFigure 1.9: SCpubr do_CellularStatesPlot increasing font.size.\n","code":"\np <- SCpubr::do_DimPlot(sample) | \n     SCpubr::do_DimPlot(sample, \n                        font.size = 18)\np\np <- SCpubr::do_FeaturePlot(sample = sample,\n                            features = \"CD14\") | \n     SCpubr::do_FeaturePlot(sample = sample, \n                            features = \"CD14\",\n                            font.size = 18)\np\np <- SCpubr::do_NebulosaPlot(sample = sample,\n                             features = \"CD14\") |\n     SCpubr::do_NebulosaPlot(sample = sample,\n                             features = \"CD14\",\n                             font.size = 18)\np\np <- SCpubr::do_BeeSwarmPlot(sample = sample,\n                             feature_to_rank = \"PC_1\",\n                             group.by = \"seurat_clusters\") | \n     SCpubr::do_BeeSwarmPlot(sample = sample,\n                             feature_to_rank = \"PC_1\",\n                             group.by = \"seurat_clusters\",\n                             font.size = 18)\np\np <- SCpubr::do_VlnPlot(sample = sample,\n                        features = \"CD14\") /\n     SCpubr::do_VlnPlot(sample = sample,\n                        features = \"CD14\",\n                        font.size = 18)\np\ngenes <- c(\"IL7R\", \"CCR7\", \"CD14\", \"LYZ\", \n           \"S100A4\", \"MS4A1\", \"CD8A\", \"FCGR3A\", \n           \"MS4A7\", \"GNLY\", \"NKG7\", \"FCER1A\", \n           \"CST3\", \"PPBP\")\np <- SCpubr::do_DotPlot(sample = sample,\n                        features = genes) | \n     SCpubr::do_DotPlot(sample = sample,\n                        features = genes,\n                        font.size = 18)\np\np <- SCpubr::do_BarPlot(sample = sample,\n                        features = \"seurat_clusters\",\n                        horizontal = T) | \n     SCpubr::do_BarPlot(sample = sample,\n                        features = \"seurat_clusters\",\n                        horizontal = T,\n                        font.size = 18)\np\np <- SCpubr::do_TermEnrichmentPlot(genes = c(\"CD14\", \"LYN\"),\n                                   dbs_use = \"GO_Biological_Process_2021\",\n                                   nterms = 2) |\n     SCpubr::do_TermEnrichmentPlot(genes = c(\"CD14\", \"LYN\"),\n                                   dbs_use = \"GO_Biological_Process_2021\",\n                                   nterms = 2,\n                                   font.size = 18)\np\ngenes <- list(\"A\" = Seurat::VariableFeatures(sample)[1:5],\n              \"B\" = Seurat::VariableFeatures(sample)[6:10],\n              \"C\" = Seurat::VariableFeatures(sample)[11:15],\n              \"D\" = Seurat::VariableFeatures(sample)[16:20])\n\np <- SCpubr::do_CellularStatesPlot(sample = sample,\n                                   gene_list = genes,\n                                   x1 = \"A\",\n                                   y1 = \"B\",\n                                   x2 = \"C\",\n                                   y2 = \"D\",\n                                   enforce_simmetry = T) |\n     SCpubr::do_CellularStatesPlot(sample = sample,\n                                   gene_list = genes,\n                                   x1 = \"A\",\n                                   y1 = \"B\",\n                                   x2 = \"C\",\n                                   y2 = \"D\",\n                                   enforce_simmetry = T,\n                                   font.size = 18)\np"},{"path":"common-features-across-plots.html","id":"change-font-type-of-the-plots.","chapter":"Common features across plots","heading":"Change font type of the plots.","text":"Despite limited, possible change font type plots either sans, serif mono. fonts installed default every system. font types need pre-installed user systems , therefore, considered package. can achieved providing font.type = \"mono\", font.type = \"sans\" font.type = \"serif\" ggplot2-based plot.\nFigure 1.10: SCpubr do_DimPlot changing font type.\n\nFigure 1.11: SCpubr do_FeaturePlot changing font type.\n\nFigure 1.12: SCpubr do_NebulosaPlot changing font type.\n\nFigure 1.13: SCpubr do_BeeSwarmPlot changing font type.\n\nFigure 1.14: SCpubr do_VlnPlot changing font type.\n\nFigure 1.15: SCpubr do_DotPlot changing font type.\n\nFigure 1.16: SCpubr do_BarPlot changing font type.\n\nFigure 1.17: SCpubr do_TermEnrichmentPlot changing font type.\n\nFigure 11.1: SCpubr do_CellularStatesPlot changing font type.\n","code":"\np <- SCpubr::do_DimPlot(sample, font.type = \"mono\") | \n     SCpubr::do_DimPlot(sample, font.type = \"sans\") | \n     SCpubr::do_DimPlot(sample, font.type = \"serif\")\np\np <- SCpubr::do_FeaturePlot(sample = sample,\n                            features = \"CD14\",\n                            font.type = \"mono\") | \n     SCpubr::do_FeaturePlot(sample = sample, \n                            features = \"CD14\",\n                            font.type = \"sans\") | \n     SCpubr::do_FeaturePlot(sample = sample, \n                            features = \"CD14\",\n                            font.type = \"serif\")\np\np <- SCpubr::do_NebulosaPlot(sample = sample,\n                             features = \"CD14\",\n                             font.type = \"mono\") |\n     SCpubr::do_NebulosaPlot(sample = sample,\n                             features = \"CD14\",\n                             font.type = \"sans\") | \n     SCpubr::do_NebulosaPlot(sample = sample,\n                             features = \"CD14\",\n                             font.type = \"serif\")\np\np <- SCpubr::do_BeeSwarmPlot(sample = sample,\n                             feature_to_rank = \"PC_1\",\n                             group.by = \"seurat_clusters\",\n                             font.type = \"mono\") | \n     SCpubr::do_BeeSwarmPlot(sample = sample,\n                             feature_to_rank = \"PC_1\",\n                             group.by = \"seurat_clusters\",\n                             font.type = \"sans\") |\n     SCpubr::do_BeeSwarmPlot(sample = sample,\n                             feature_to_rank = \"PC_1\",\n                             group.by = \"seurat_clusters\",\n                             font.type = \"serif\")\np\np <- SCpubr::do_VlnPlot(sample = sample,\n                        features = \"CD14\",\n                        font.type = \"mono\") /\n     SCpubr::do_VlnPlot(sample = sample,\n                        features = \"CD14\",\n                        font.type = \"sans\") /\n     SCpubr::do_VlnPlot(sample = sample,\n                        features = \"CD14\",\n                        font.type = \"serif\")\np\ngenes <- c(\"IL7R\", \"CCR7\", \"CD14\", \"LYZ\", \n           \"S100A4\", \"MS4A1\", \"CD8A\", \"FCGR3A\", \n           \"MS4A7\", \"GNLY\", \"NKG7\", \"FCER1A\", \n           \"CST3\", \"PPBP\")\n\np <- SCpubr::do_DotPlot(sample = sample,\n                        features = genes,\n                        font.type = \"mono\") | \n     SCpubr::do_DotPlot(sample = sample,\n                        features = genes,\n                        font.type = \"sans\") |\n     SCpubr::do_DotPlot(sample = sample,\n                        features = genes,\n                        font.type = \"serif\")\np\np <- SCpubr::do_BarPlot(sample = sample,\n                        features = \"seurat_clusters\",\n                        horizontal = T,\n                        font.type = \"mono\") | \n     SCpubr::do_BarPlot(sample = sample,\n                        features = \"seurat_clusters\",\n                        horizontal = T,\n                        font.type = \"sans\") |\n     SCpubr::do_BarPlot(sample = sample,\n                        features = \"seurat_clusters\",\n                        horizontal = T,\n                        font.type = \"serif\")\np\np <- SCpubr::do_TermEnrichmentPlot(genes = c(\"CD14\", \"LYN\"),\n                                   dbs_use = \"GO_Biological_Process_2021\",\n                                   nterms = 2,\n                                   font.type = \"mono\") |\n     SCpubr::do_TermEnrichmentPlot(genes = c(\"CD14\", \"LYN\"),\n                                   dbs_use = \"GO_Biological_Process_2021\",\n                                   nterms = 2,\n                                   font.type = \"sans\") | \n     SCpubr::do_TermEnrichmentPlot(genes = c(\"CD14\", \"LYN\"),\n                                   dbs_use = \"GO_Biological_Process_2021\",\n                                   nterms = 2,\n                                   font.type = \"serif\")\np\ngenes <- list(\"A\" = Seurat::VariableFeatures(sample)[1:5],\n              \"B\" = Seurat::VariableFeatures(sample)[6:10],\n              \"C\" = Seurat::VariableFeatures(sample)[11:15],\n              \"D\" = Seurat::VariableFeatures(sample)[16:20])\n\np <- SCpubr::do_CellularStatesPlot(sample = sample,\n                                   gene_list = genes,\n                                   x1 = \"A\",\n                                   y1 = \"B\",\n                                   x2 = \"C\",\n                                   y2 = \"D\",\n                                   enforce_simmetry = T,\n                                   font.type = \"mono\") |\n     SCpubr::do_CellularStatesPlot(sample = sample,\n                                   gene_list = genes,\n                                   x1 = \"A\",\n                                   y1 = \"B\",\n                                   x2 = \"C\",\n                                   y2 = \"D\",\n                                   enforce_simmetry = T,\n                                   font.type = \"sans\") |\n     SCpubr::do_CellularStatesPlot(sample = sample,\n                                   gene_list = genes,\n                                   x1 = \"A\",\n                                   y1 = \"B\",\n                                   x2 = \"C\",\n                                   y2 = \"D\",\n                                   enforce_simmetry = T,\n                                   font.type = \"serif\")\np"},{"path":"common-features-across-plots.html","id":"adding-plot-titles-subtitles-and-captions-to-plots.","chapter":"Common features across plots","heading":"Adding plot titles, subtitles and captions to plots.","text":"ggplot2-based plots, one can add title, subtitle caption using plot.title, plot.subtitle plot.caption parameters.\nFigure 11.2: SCpubr do_DimPlot adding title, subtitle caption.\n\nFigure 11.3: SCpubr do_FeaturePlot adding title, subtitle caption.\n\nFigure 11.4: SCpubr do_NebulosaPlot adding title, subtitle caption.\n\nFigure 11.5: SCpubr do_BeeSwarmPlot adding title, subtitle caption.\n\nFigure 11.6: SCpubr do_VlnPlot adding title, subtitle caption.\n\nFigure 11.7: SCpubr do_DotPlot adding title, subtitle caption.\n\nFigure 11.8: SCpubr do_BarPlot adding title, subtitle caption.\n\nFigure 11.9: SCpubr do_TermEnrichmentPlot adding title, subtitle caption.\n\nFigure 11.10: SCpubr do_CellularStatesPlot adding title, subtitle caption.\n","code":"\np <- SCpubr::do_DimPlot(sample, \n                        plot.title = \"This is a title\",\n                        plot.subtitle = \"This is a subtitle\",\n                        plot.caption = \"This is a caption\")\np\np <- SCpubr::do_FeaturePlot(sample = sample,\n                            features = \"CD14\", \n                            plot.title = \"This is a title\",\n                            plot.subtitle = \"This is a subtitle\",\n                            plot.caption = \"This is a caption\")\np\np <- SCpubr::do_NebulosaPlot(sample = sample,\n                             features = \"CD14\", \n                             plot.title = \"This is a title\",\n                             plot.subtitle = \"This is a subtitle\",\n                             plot.caption = \"This is a caption\")\np\np <- SCpubr::do_BeeSwarmPlot(sample = sample,\n                             feature_to_rank = \"PC_1\",\n                             group.by = \"seurat_clusters\", \n                             plot.title = \"This is a title\",\n                             plot.subtitle = \"This is a subtitle\",\n                             plot.caption = \"This is a caption\")\np\np <- SCpubr::do_VlnPlot(sample = sample,\n                        features = \"CD14\", \n                        plot.title = \"This is a title\",\n                        plot.subtitle = \"This is a subtitle\",\n                        plot.caption = \"This is a caption\")\np\ngenes <- c(\"IL7R\", \"CCR7\", \"CD14\", \"LYZ\", \n           \"S100A4\", \"MS4A1\", \"CD8A\", \"FCGR3A\", \n           \"MS4A7\", \"GNLY\", \"NKG7\", \"FCER1A\", \n           \"CST3\", \"PPBP\")\n\np <- SCpubr::do_DotPlot(sample = sample,\n                        features = genes, \n                        plot.title = \"This is a title\",\n                        plot.subtitle = \"This is a subtitle\",\n                        plot.caption = \"This is a caption\")\np\np <- SCpubr::do_BarPlot(sample = sample,\n                        features = \"seurat_clusters\",\n                        horizontal = T, \n                        plot.title = \"This is a title\",\n                        plot.subtitle = \"This is a subtitle\",\n                        plot.caption = \"This is a caption\")\np\np <- SCpubr::do_TermEnrichmentPlot(genes = c(\"CD14\", \"LYN\"),\n                                   dbs_use = \"GO_Biological_Process_2021\",\n                                   nterms = 2, \n                                   plot.title = \"This is a title\",\n                                   plot.subtitle = \"This is a subtitle\",\n                                   plot.caption = \"This is a caption\")\np\ngenes <- list(\"A\" = Seurat::VariableFeatures(sample)[1:5],\n              \"B\" = Seurat::VariableFeatures(sample)[6:10],\n              \"C\" = Seurat::VariableFeatures(sample)[11:15],\n              \"D\" = Seurat::VariableFeatures(sample)[16:20])\n\np <- SCpubr::do_CellularStatesPlot(sample = sample,\n                                   gene_list = genes,\n                                   x1 = \"A\",\n                                   y1 = \"B\",\n                                   x2 = \"C\",\n                                   y2 = \"D\",\n                                   enforce_simmetry = T,\n                                   plot.title = \"This is a title\",\n                                   plot.subtitle = \"This is a subtitle\",\n                                   plot.caption = \"This is a caption\")\np"},{"path":"common-features-across-plots.html","id":"further-customization","chapter":"Common features across plots","heading":"Further customization","text":"Titles, subtitles captions modified versions ggplot2::element_text(), using ggtext package. allows partial modifications, markdown style, elements. can also change color providing HTML tags follows:\nFigure 11.11: SCpubr do_DimPlot adding title, subtitle caption extra modifications.\n","code":"\np <- SCpubr::do_DimPlot(sample, \n                        plot.title = \"<span style = 'color:#87191c;'>This<\/span><span style = 'color:#243a76;'> is a <\/span><span style = 'color:#096837;'>colored title<\/span>\",\n                        plot.subtitle = \"This is a *subtitle*\",\n                        plot.caption = \"This is a **caption**\")\np"},{"path":"common-features-across-plots.html","id":"change-between-legend-types-in-continuous-variables.","chapter":"Common features across plots","heading":"Change between legend types in continuous variables.","text":"Users can opt change three type legends continuous variables: one comes default ggplot2, colorbar modified version default, wider range marked ticks, colorbar discrete steps (colorsteps), can nice alternative depending situation. can achieved providing legend.type = \"normal\", legend.type = \"colorbar\" legend.type = \"colorsteps\". can applied ggplot2-based plot.\nFigure 11.12: SCpubr do_FeaturePlot changing legend type.\n\nFigure 11.13: SCpubr do_NebulosaPlot changing legend type.\n\nFigure 11.14: SCpubr do_BeeSwarmPlot changing legend type.\n\nFigure 11.15: SCpubr do_DotPlot changing legend type.\n\nFigure 11.16: SCpubr do_TermEnrichmentPlot changing legend type.\n","code":"\np <- SCpubr::do_FeaturePlot(sample = sample,\n                            features = \"PC_1\",\n                            legend.type = \"normal\") | \n     SCpubr::do_FeaturePlot(sample = sample, \n                            features = \"PC_1\",\n                            legend.type = \"colorbar\") | \n     SCpubr::do_FeaturePlot(sample = sample, \n                            features = \"PC_1\",\n                            legend.type = \"colorsteps\")\np\np <- SCpubr::do_NebulosaPlot(sample = sample,\n                             features = \"PC_1\",\n                             legend.type = \"normal\") |\n     SCpubr::do_NebulosaPlot(sample = sample,\n                             features = \"PC_1\",\n                             legend.type = \"colorbar\") | \n     SCpubr::do_NebulosaPlot(sample = sample,\n                             features = \"PC_1\",\n                             legend.type = \"colorsteps\")\np\np <- SCpubr::do_BeeSwarmPlot(sample = sample,\n                             feature_to_rank = \"PC_1\",\n                             group.by = \"seurat_clusters\",\n                             continuous_feature = T,\n                             legend.type = \"normal\") | \n     SCpubr::do_BeeSwarmPlot(sample = sample,\n                             feature_to_rank = \"PC_1\",\n                             group.by = \"seurat_clusters\",\n                             continuous_feature = T,\n                             legend.type = \"colorbar\") |\n     SCpubr::do_BeeSwarmPlot(sample = sample,\n                             feature_to_rank = \"PC_1\",\n                             group.by = \"seurat_clusters\",\n                             continuous_feature = T,\n                             legend.type = \"colorsteps\")\np\ngenes <- c(\"IL7R\", \"CCR7\", \"CD14\", \"LYZ\", \n           \"S100A4\", \"MS4A1\", \"CD8A\", \"FCGR3A\", \n           \"MS4A7\", \"GNLY\", \"NKG7\", \"FCER1A\", \n           \"CST3\", \"PPBP\")\n\np <- SCpubr::do_DotPlot(sample = sample,\n                        features = \"PC_1\",\n                        legend.type = \"normal\") | \n     SCpubr::do_DotPlot(sample = sample,\n                        features = \"PC_1\",\n                        legend.type = \"colorbar\") |\n     SCpubr::do_DotPlot(sample = sample,\n                        features = \"PC_1\",\n                        legend.type = \"colorsteps\")\np\np <- SCpubr::do_TermEnrichmentPlot(genes = c(\"CD14\", \"LYN\"),\n                                   dbs_use = \"GO_Biological_Process_2021\",\n                                   nterms = 2,\n                                   legend.type = \"normal\") |\n     SCpubr::do_TermEnrichmentPlot(genes = c(\"CD14\", \"LYN\"),\n                                   dbs_use = \"GO_Biological_Process_2021\",\n                                   nterms = 2,\n                                   legend.type = \"colorbar\") | \n     SCpubr::do_TermEnrichmentPlot(genes = c(\"CD14\", \"LYN\"),\n                                   dbs_use = \"GO_Biological_Process_2021\",\n                                   nterms = 2,\n                                   legend.type = \"colorsteps\")\np"},{"path":"common-features-across-plots.html","id":"relocating-the-legend","chapter":"Common features across plots","heading":"Relocating the legend","text":"Legends can switched following positions: top, bottom, left right. Depending set ups figure, one location might suitable another. default, SCpubr locates either right bottom, can changed anytime using legend.position = \"top\", legend.position = \"bottom\", legend.position = \"left\" legend.position = \"right\". works ggplot2-based plots.\nFigure 11.17: SCpubr do_DimPlot varying legend positions.\n\nFigure 11.18: SCpubr do_FeaturePlot varying legend positions.\n\nFigure 11.19: SCpubr do_NebulosaPlot varying legend positions.\n\nFigure 11.20: SCpubr do_BeeSwarmPlot varying legend positions.\n\nFigure 11.21: SCpubr do_DotPlot varying legend positions.\n\nFigure 11.22: SCpubr do_BarPlot varying legend positions.\n\nFigure 11.23: SCpubr do_TermEnrichmentPlot varying legend positions.\n\nFigure 11.24: SCpubr do_CellularStatesPlot varying legend positions.\n","code":"\np <- (SCpubr::do_DimPlot(sample, \n                         legend.position = \"top\") | \n      SCpubr::do_DimPlot(sample, \n                         legend.position = \"bottom\")) /\n     (SCpubr::do_DimPlot(sample, \n                         legend.position = \"left\") |\n      SCpubr::do_DimPlot(sample, \n                         legend.position = \"right\"))\np\np <- (SCpubr::do_FeaturePlot(sample, \n                             features = \"PC_1\", \n                             legend.position = \"top\") | \n      SCpubr::do_FeaturePlot(sample, \n                             features = \"PC_1\", \n                             legend.position = \"bottom\")) /\n     (SCpubr::do_FeaturePlot(sample, \n                             features = \"PC_1\", \n                             legend.position = \"left\") |\n      SCpubr::do_FeaturePlot(sample, \n                             features = \"PC_1\", \n                             legend.position = \"right\"))\np\np <- (SCpubr::do_NebulosaPlot(sample, \n                              features = \"PC_1\", \n                              legend.position = \"top\") | \n      SCpubr::do_NebulosaPlot(sample, \n                              features = \"PC_1\", \n                              legend.position = \"bottom\")) /\n     (SCpubr::do_NebulosaPlot(sample, \n                              features = \"PC_1\", \n                              legend.position = \"left\") |\n      SCpubr::do_NebulosaPlot(sample, \n                              features = \"PC_1\", \n                              legend.position = \"right\"))\np\np <- (SCpubr::do_BeeSwarmPlot(sample,\n                              feature_to_rank = \"PC_1\", \n                              group.by = \"seurat_clusters\",\n                              continuous_feature = TRUE,\n                              legend.position = \"top\") | \n      SCpubr::do_BeeSwarmPlot(sample,\n                              feature_to_rank = \"PC_1\", \n                              group.by = \"seurat_clusters\",\n                              continuous_feature = TRUE, \n                              legend.position = \"bottom\")) /\n     (SCpubr::do_BeeSwarmPlot(sample,\n                              feature_to_rank = \"PC_1\", \n                              group.by = \"seurat_clusters\",\n                              continuous_feature = TRUE, \n                              legend.position = \"left\") |\n      SCpubr::do_BeeSwarmPlot(sample,\n                              feature_to_rank = \"PC_1\", \n                              group.by = \"seurat_clusters\",\n                              continuous_feature = TRUE, \n                              legend.position = \"right\"))\np\ngenes <- c(\"IL7R\", \"CCR7\", \"CD14\", \"LYZ\", \n           \"S100A4\", \"MS4A1\", \"CD8A\", \"FCGR3A\", \n           \"MS4A7\", \"GNLY\", \"NKG7\", \"FCER1A\", \n           \"CST3\", \"PPBP\")\n\np <- (SCpubr::do_DotPlot(sample,\n                         features = genes, \n                         legend.position = \"top\") |\n      SCpubr::do_DotPlot(sample,\n                         features = genes, \n                         legend.position = \"bottom\")) /\n     (SCpubr::do_DotPlot(sample,\n                         features = genes, \n                         legend.position = \"left\") |\n      SCpubr::do_DotPlot(sample,\n                         features = genes, \n                         legend.position = \"right\"))\np\np <- (SCpubr::do_BarPlot(sample,\n                         features = \"seurat_clusters\", \n                         legend.position = \"top\") |\n      SCpubr::do_BarPlot(sample,\n                         features = \"seurat_clusters\", \n                         legend.position = \"bottom\")) /\n     (SCpubr::do_BarPlot(sample,\n                         features = \"seurat_clusters\", \n                         legend.position = \"left\") |\n      SCpubr::do_BarPlot(sample,\n                         features = \"seurat_clusters\", \n                         legend.position = \"right\"))\np\np <- (SCpubr::do_TermEnrichmentPlot(genes = c(\"CD14\", \"LYN\"),\n                                    dbs_use = \"GO_Biological_Process_2021\",\n                                    nterms = 2,\n                                    legend.position = \"top\") |\n      SCpubr::do_TermEnrichmentPlot(genes = c(\"CD14\", \"LYN\"),\n                                    dbs_use = \"GO_Biological_Process_2021\",\n                                    nterms = 2,\n                                    legend.position = \"bottom\")) / \n     (SCpubr::do_TermEnrichmentPlot(genes = c(\"CD14\", \"LYN\"),\n                                    dbs_use = \"GO_Biological_Process_2021\",\n                                    nterms = 2,\n                                    legend.position = \"left\") |\n      SCpubr::do_TermEnrichmentPlot(genes = c(\"CD14\", \"LYN\"),\n                                    dbs_use = \"GO_Biological_Process_2021\",\n                                    nterms = 2,\n                                    legend.position = \"right\"))\np\ngenes <- list(\"A\" = Seurat::VariableFeatures(sample)[1:5],\n              \"B\" = Seurat::VariableFeatures(sample)[6:10],\n              \"C\" = Seurat::VariableFeatures(sample)[11:15],\n              \"D\" = Seurat::VariableFeatures(sample)[16:20])\n\np <- (SCpubr::do_CellularStatesPlot(sample = sample,\n                                    gene_list = genes,\n                                    x1 = \"A\",\n                                    y1 = \"B\",\n                                    x2 = \"C\",\n                                    y2 = \"D\",\n                                    enforce_simmetry = T,\n                                    legend.position = \"top\") |\n      SCpubr::do_CellularStatesPlot(sample = sample,\n                                    gene_list = genes,\n                                    x1 = \"A\",\n                                    y1 = \"B\",\n                                    x2 = \"C\",\n                                    y2 = \"D\",\n                                    enforce_simmetry = T,\n                                    legend.position = \"bottom\")) /\n     (SCpubr::do_CellularStatesPlot(sample = sample,\n                                    gene_list = genes,\n                                    x1 = \"A\",\n                                    y1 = \"B\",\n                                    x2 = \"C\",\n                                    y2 = \"D\",\n                                    enforce_simmetry = T,\n                                    legend.position = \"left\") |\n      SCpubr::do_CellularStatesPlot(sample = sample,\n                                    gene_list = genes,\n                                    x1 = \"A\",\n                                    y1 = \"B\",\n                                    x2 = \"C\",\n                                    y2 = \"D\",\n                                    enforce_simmetry = T,\n                                    legend.position = \"right\"))\n   \np"},{"path":"common-features-across-plots.html","id":"modifying-colors","chapter":"Common features across plots","heading":"Modifying colors","text":"Perhaps, one critical parameters, possibility change colors displayed user’s wish. mainly achieved colors.use plot making use categorical variables plots using continuous variables implementing viridis color scale. cases, viridis_color_map used.","code":""},{"path":"common-features-across-plots.html","id":"categorical-variables","chapter":"Common features across plots","heading":"Categorical variables","text":"plots using categorical variables, colors can modified using colors.use vector named colors. names match unique values displayed plot colors need proper color representations HEX codes.\nFigure 11.25: SCpubr do_DimPlot modifying colors.\n\nFigure 11.26: SCpubr do_BeeSwarmPlot modifying colors.\n\nFigure 11.27: SCpubr do_VlnPlot modifying colors.\n\nFigure 11.28: SCpubr do_BarPlot modifying colors.\n\nFigure 11.29: SCpubr::do_CellularStatesPlot modifying colors.\n","code":"\n# Create a color scale for the unique values in seurat clusters.\ncolors <- c(\"0\" = \"#001219\",\n            \"1\" = \"#005f73\",\n            \"2\" = \"#0a9396\",\n            \"3\" = \"#94d2bd\",\n            \"4\" = \"#e9d8a6\",\n            \"5\" = \"#ee9b00\",\n            \"6\" = \"#ca6702\",\n            \"7\" = \"#bb3e03\",\n            \"8\" = \"#ae2012\",\n            \"9\" = \"#9b2226\")\np <- SCpubr::do_DimPlot(sample) | \n     SCpubr::do_DimPlot(sample, \n                        colors.use = colors)\np\np <- SCpubr::do_BeeSwarmPlot(sample,\n                             feature_to_rank = \"PC_1\",\n                             group.by = \"seurat_clusters\") | \n     SCpubr::do_BeeSwarmPlot(sample,\n                             feature_to_rank = \"PC_1\",\n                             group.by = \"seurat_clusters\",\n                             colors.use = colors)\np\np <- SCpubr::do_VlnPlot(sample,\n                        features = \"PC_1\") /\n     SCpubr::do_VlnPlot(sample, \n                        features = \"PC_1\",\n                        colors.use = colors)\np\np <- SCpubr::do_BarPlot(sample,\n                        features = \"seurat_clusters\",\n                        horizontal = T) |\n     SCpubr::do_BarPlot(sample, \n                        features = \"seurat_clusters\",\n                        horizontal = T,\n                        colors.use = colors)\np\ngenes <- list(\"A\" = Seurat::VariableFeatures(sample)[1:5],\n              \"B\" = Seurat::VariableFeatures(sample)[6:10],\n              \"C\" = Seurat::VariableFeatures(sample)[11:15],\n              \"D\" = Seurat::VariableFeatures(sample)[16:20])\n\np <- SCpubr::do_CellularStatesPlot(sample = sample,\n                                   gene_list = genes,\n                                   x1 = \"A\",\n                                   y1 = \"B\",\n                                   x2 = \"C\",\n                                   y2 = \"D\",\n                                   enforce_simmetry = T) |\n     SCpubr::do_CellularStatesPlot(sample = sample,\n                                   gene_list = genes,\n                                   x1 = \"A\",\n                                   y1 = \"B\",\n                                   x2 = \"C\",\n                                   y2 = \"D\",\n                                   enforce_simmetry = T,\n                                   colors.use = colors)\np"},{"path":"common-features-across-plots.html","id":"continuous-variables","chapter":"Common features across plots","heading":"Continuous variables","text":"explained , modifying color scales plots highly depends whether color scale based viridis .","code":""},{"path":"common-features-across-plots.html","id":"viridis-based-plots","chapter":"Common features across plots","heading":"Viridis-based plots","text":"viridis-based plots, scale can changed according different available color maps viridis package. Options :- magma color map.B - inferno color map.C - plasma color map.D - viridis color map.E - cividis color map.F - rocket color map.G - mako color map.H - turbo color map.change color map, just provide either letter name color map viridis_color_map.\nFigure 11.30: SCpubr::do_FeaturePlot modifying viridis color maps.\n\nFigure 11.31: SCpubr Nebulosa plot modifying viridis color maps.\n\nFigure 11.32: SCpubr::do_BeeSwarmPlot modifying viridis color maps.\n","code":"\np1 <- SCpubr::do_FeaturePlot(sample = sample, \n                             features = \"CD14\", \n                             viridis_color_map = \"A\", \n                             plot.title = \"Magma\")\n\np2 <- SCpubr::do_FeaturePlot(sample = sample, \n                             features = \"CD14\", \n                             viridis_color_map = \"B\", \n                             plot.title = \"Inferno\")\n\np3 <- SCpubr::do_FeaturePlot(sample = sample, \n                             features = \"CD14\", \n                             viridis_color_map = \"C\", \n                             plot.title = \"Plasma\")\n\np4 <- SCpubr::do_FeaturePlot(sample = sample, \n                             features = \"CD14\", \n                             viridis_color_map = \"D\", \n                             plot.title = \"Viridis\")\n\np5 <- SCpubr::do_FeaturePlot(sample = sample, \n                             features = \"CD14\", \n                             viridis_color_map = \"E\", \n                             plot.title = \"Cividis\")\n\np6 <- SCpubr::do_FeaturePlot(sample = sample, \n                             features = \"CD14\", \n                             viridis_color_map = \"F\", \n                             plot.title = \"Rocket\")\n\np7 <- SCpubr::do_FeaturePlot(sample = sample, \n                             features = \"CD14\", \n                             viridis_color_map = \"G\", \n                             plot.title = \"Mako\")\n\np8 <- SCpubr::do_FeaturePlot(sample = sample, \n                             features = \"CD14\", \n                             viridis_color_map = \"H\", \n                             plot.title = \"Turbo\")\n\np <- patchwork::wrap_plots(list(p1, p2, p3, p4, p5, p6, p7, p8), ncol = 2, byrow = TRUE)\np\np1 <- SCpubr::do_NebulosaPlot(sample = sample, \n                              features = \"CD14\", \n                              viridis_color_map = \"A\", \n                              plot.title = \"Magma\")\n\np2 <- SCpubr::do_NebulosaPlot(sample = sample, \n                              features = \"CD14\", \n                              viridis_color_map = \"B\", \n                              plot.title = \"Inferno\")\n\np3 <- SCpubr::do_NebulosaPlot(sample = sample, \n                              features = \"CD14\", \n                              viridis_color_map = \"C\", \n                              plot.title = \"Plasma\")\n\np4 <- SCpubr::do_NebulosaPlot(sample = sample, \n                              features = \"CD14\", \n                              viridis_color_map = \"D\", \n                              plot.title = \"Viridis\")\n\np5 <- SCpubr::do_NebulosaPlot(sample = sample, \n                              features = \"CD14\", \n                              viridis_color_map = \"E\", \n                              plot.title = \"Cividis\")\n\np6 <- SCpubr::do_NebulosaPlot(sample = sample, \n                              features = \"CD14\", \n                              viridis_color_map = \"F\", \n                              plot.title = \"Rocket\")\n\np7 <- SCpubr::do_NebulosaPlot(sample = sample, \n                              features = \"CD14\", \n                              viridis_color_map = \"G\", \n                              plot.title = \"Mako\")\n\np8 <- SCpubr::do_NebulosaPlot(sample = sample, \n                              features = \"CD14\", \n                              viridis_color_map = \"H\", \n                              plot.title = \"Turbo\")\n\n\np <- patchwork::wrap_plots(list(p1, p2, p3, p4, p5, p6, p7, p8), ncol = 2, byrow = TRUE)\np\np1 <- SCpubr::do_BeeSwarmPlot(sample = sample, \n                              feature_to_rank = \"PC_1\", \n                              group.by = \"seurat_clusters\", \n                              continuous_feature = TRUE, \n                              viridis_color_map = \"A\", \n                              plot.title = \"Magma\")\n\np2 <- SCpubr::do_BeeSwarmPlot(sample = sample, \n                              feature_to_rank = \"PC_1\", \n                              group.by = \"seurat_clusters\", \n                              continuous_feature = TRUE, \n                              viridis_color_map = \"B\", \n                              plot.title = \"Inferno\")\n\np3 <- SCpubr::do_BeeSwarmPlot(sample = sample, \n                              feature_to_rank = \"PC_1\", \n                              group.by = \"seurat_clusters\", \n                              continuous_feature = TRUE, \n                              viridis_color_map = \"C\", \n                              plot.title = \"Plasma\")\n\np4 <- SCpubr::do_BeeSwarmPlot(sample = sample, \n                              feature_to_rank = \"PC_1\", \n                              group.by = \"seurat_clusters\", \n                              continuous_feature = TRUE, \n                              viridis_color_map = \"D\", \n                              plot.title = \"Viridis\")\n\np5 <- SCpubr::do_BeeSwarmPlot(sample = sample, \n                              feature_to_rank = \"PC_1\", \n                              group.by = \"seurat_clusters\", \n                              continuous_feature = TRUE, \n                              viridis_color_map = \"E\", \n                              plot.title = \"Cividis\")\n\np6 <- SCpubr::do_BeeSwarmPlot(sample = sample, \n                              feature_to_rank = \"PC_1\", \n                              group.by = \"seurat_clusters\", \n                              continuous_feature = TRUE, \n                              viridis_color_map = \"F\", \n                              plot.title = \"Rocket\")\n\np7 <- SCpubr::do_BeeSwarmPlot(sample = sample, \n                              feature_to_rank = \"PC_1\", \n                              group.by = \"seurat_clusters\", \n                              continuous_feature = TRUE, \n                              viridis_color_map = \"G\", \n                              plot.title = \"Mako\")\n\np8 <- SCpubr::do_BeeSwarmPlot(sample = sample, \n                              feature_to_rank = \"PC_1\", \n                              group.by = \"seurat_clusters\", \n                              continuous_feature = TRUE, \n                              viridis_color_map = \"H\", \n                              plot.title = \"Turbo\")\n\np <- patchwork::wrap_plots(list(p1, p2, p3, p4, p5, p6, p7, p8), ncol = 2, byrow = TRUE)\np"},{"path":"common-features-across-plots.html","id":"color-gradient-plots","chapter":"Common features across plots","heading":"2 color gradient plots","text":"rest plots present continuous color scale, normally define gradient based combination pair colors provided user colors.use. pair colors need named, need valid colors HEX codes.\nFigure 11.33: SCpubr do_DotPlot modifying colors.\n\nFigure 11.34: SCpubr do_TermEnrichmentPlot modifying colors.\n\nFigure 11.35: SCpubr::do_EnrichmentHeatmap modified colors\n\nFigure 11.36: SCpubr::do_EnrichmentHeatmap modified colors\n\nFigure 11.37: SCpubr::do_CorrelationPlot normal colors\n\nFigure 11.38: SCpubr::do_CorrelationPlot modified colors\n","code":"\ngenes <- c(\"IL7R\", \"CCR7\", \"CD14\", \"LYZ\", \n           \"S100A4\", \"MS4A1\", \"CD8A\", \"FCGR3A\", \n           \"MS4A7\", \"GNLY\", \"NKG7\", \"FCER1A\", \n           \"CST3\", \"PPBP\")\n\ncolors <- c(\"#006d77\", \"#e29578\")\n\np <- SCpubr::do_DotPlot(sample,\n                        features = genes) | \n     SCpubr::do_DotPlot(sample,\n                        features = genes,\n                        colors.use = colors)\np\ncolors <- c(\"#006d77\", \"#e29578\")\n\np <- SCpubr::do_TermEnrichmentPlot(genes = c(\"CD14\", \"LYN\"),\n                                   dbs_use = \"GO_Biological_Process_2021\",\n                                   nterms = 4) | \n     SCpubr::do_TermEnrichmentPlot(genes = c(\"CD14\", \"LYN\"),\n                                   dbs_use = \"GO_Biological_Process_2021\",\n                                   nterms = 4,\n                                   colors.use = colors)\np\ngenes <- c(\"IL7R\", \"CCR7\", \"CD14\", \"LYZ\", \n           \"S100A4\", \"MS4A1\", \"CD8A\", \"FCGR3A\", \n           \"MS4A7\", \"GNLY\", \"NKG7\", \"FCER1A\", \n           \"CST3\", \"PPBP\")\n\np <- SCpubr::do_EnrichmentHeatmap(sample = sample,\n                                  list_genes = genes,\n                                  transpose = T,\n                                  row_names_rot = 90) \n     \np\ngenes <- c(\"IL7R\", \"CCR7\", \"CD14\", \"LYZ\", \n           \"S100A4\", \"MS4A1\", \"CD8A\", \"FCGR3A\", \n           \"MS4A7\", \"GNLY\", \"NKG7\", \"FCER1A\", \n           \"CST3\", \"PPBP\")\ncolors <- c(\"#006d77\", \"#e29578\")\n\np <- SCpubr::do_EnrichmentHeatmap(sample = sample,\n                                  list_genes = genes,\n                                  transpose = T,\n                                  row_names_rot = 90,\n                                  colors.use = colors) \n     \np\np <- SCpubr::do_CorrelationPlot(sample = sample,\n                                column_names_rot = 0)\n     \np\ncolors <- c(\"#006d77\", \"#e29578\")\np <- SCpubr::do_CorrelationPlot(sample = sample,\n                                column_names_rot = 0,\n                                colors.use = colors)\n     \np"},{"path":"common-features-across-plots.html","id":"plotting-marginal-distributions.","chapter":"Common features across plots","heading":"Plotting marginal distributions.","text":"scatter plot, possible draw marginal distributions top bottom displaying distribution dots alongside X Y axis. achieved thanks ggExtra package. applicable plot categorical values, SCpubr::do_DimPlot() SCpubr::do_CellularStatesPlot().One can trigger behavior using plot_marginal_distributions = TRUE:\nFigure 11.39: Plotting marginal plots\nOne can remove grouping plot overall density dots marginal.group = FALSE:\nFigure 11.40: Plotting marginal plots without grouping\ncan increase relative ratio main plots marginal plots marginal.size. value 1 means equal size main marginal plots. value 5 means half size marginal plot versus main plots.:\nFigure 11.41: Plotting marginal plots modified ratio\nFinally, one can also choose type distribution displayed marginal.type. can one “density”, “boxplot”, “violin”, “histogram” “densigram”.\nFigure 11.42: Plotting marginal plots modified distributions - histogram\nMarginal violin plots might require tweak size ratio marginal plots.\nFigure 11.43: Plotting marginal plots modified distributions - violin\n\nFigure 11.44: Plotting marginal plots modified distributions - boxplot\n\nFigure 11.45: Plotting marginal plots modified distributions - densigram\n","code":"\ngenes <- list(\"A\" = Seurat::VariableFeatures(sample)[1:5],\n              \"B\" = Seurat::VariableFeatures(sample)[6:10],\n              \"C\" = Seurat::VariableFeatures(sample)[11:15],\n              \"D\" = Seurat::VariableFeatures(sample)[16:20])\n\np1 <- SCpubr::do_DimPlot(sample = sample,\n                         plot_marginal_distributions = TRUE,\n                         legend.position = \"bottom\")\n\np2 <- SCpubr:::do_CellularStatesPlot(sample = sample,\n                                     gene_list = genes,\n                                     x1 = \"A\",\n                                     y1 = \"B\",\n                                     x2 = \"C\",\n                                     y2 = \"D\",\n                                     enforce_simmetry = T,\n                                     legend.position = \"bottom\",\n                                     plot_marginal_distributions = TRUE)\n\np <- p1 | p2\np\ngenes <- list(\"A\" = Seurat::VariableFeatures(sample)[1:5],\n              \"B\" = Seurat::VariableFeatures(sample)[6:10],\n              \"C\" = Seurat::VariableFeatures(sample)[11:15],\n              \"D\" = Seurat::VariableFeatures(sample)[16:20])\n\np1 <- SCpubr::do_DimPlot(sample = sample,\n                         plot_marginal_distributions = TRUE,\n                         legend.position = \"bottom\",\n                         marginal.group = FALSE)\n\np2 <- SCpubr:::do_CellularStatesPlot(sample = sample,\n                                     gene_list = genes,\n                                     x1 = \"A\",\n                                     y1 = \"B\",\n                                     x2 = \"C\",\n                                     y2 = \"D\",\n                                     enforce_simmetry = T,\n                                     legend.position = \"bottom\",\n                                     plot_marginal_distributions = TRUE,\n                                     marginal.group = FALSE)\n\np <- p1 | p2\np\ngenes <- list(\"A\" = Seurat::VariableFeatures(sample)[1:5],\n              \"B\" = Seurat::VariableFeatures(sample)[6:10],\n              \"C\" = Seurat::VariableFeatures(sample)[11:15],\n              \"D\" = Seurat::VariableFeatures(sample)[16:20])\n\np1 <- SCpubr::do_DimPlot(sample = sample,\n                         plot_marginal_distributions = TRUE,\n                         legend.position = \"bottom\",\n                         marginal.size = 1)\n\np2 <- SCpubr:::do_CellularStatesPlot(sample = sample,\n                                     gene_list = genes,\n                                     x1 = \"A\",\n                                     y1 = \"B\",\n                                     x2 = \"C\",\n                                     y2 = \"D\",\n                                     enforce_simmetry = T,\n                                     legend.position = \"bottom\",\n                                     plot_marginal_distributions = TRUE,\n                                     marginal.size = 1)\n\np <- p1 | p2\np\ngenes <- list(\"A\" = Seurat::VariableFeatures(sample)[1:5],\n              \"B\" = Seurat::VariableFeatures(sample)[6:10],\n              \"C\" = Seurat::VariableFeatures(sample)[11:15],\n              \"D\" = Seurat::VariableFeatures(sample)[16:20])\n\np1 <- SCpubr::do_DimPlot(sample = sample,\n                         plot_marginal_distributions = TRUE,\n                         legend.position = \"bottom\",\n                         marginal.type = \"histogram\")\n\np2 <- SCpubr:::do_CellularStatesPlot(sample = sample,\n                                     gene_list = genes,\n                                     x1 = \"A\",\n                                     y1 = \"B\",\n                                     x2 = \"C\",\n                                     y2 = \"D\",\n                                     enforce_simmetry = T,\n                                     legend.position = \"bottom\",\n                                     plot_marginal_distributions = TRUE,\n                                     marginal.type = \"histogram\")\n\np <- p1 | p2\np\ngenes <- list(\"A\" = Seurat::VariableFeatures(sample)[1:5],\n              \"B\" = Seurat::VariableFeatures(sample)[6:10],\n              \"C\" = Seurat::VariableFeatures(sample)[11:15],\n              \"D\" = Seurat::VariableFeatures(sample)[16:20])\n\np1 <- SCpubr::do_DimPlot(sample = sample,\n                         plot_marginal_distributions = TRUE,\n                         legend.position = \"bottom\",\n                         marginal.type = \"violin\",\n                         marginal.size = 2)\n\np2 <- SCpubr:::do_CellularStatesPlot(sample = sample,\n                                     gene_list = genes,\n                                     x1 = \"A\",\n                                     y1 = \"B\",\n                                     x2 = \"C\",\n                                     y2 = \"D\",\n                                     enforce_simmetry = T,\n                                     legend.position = \"bottom\",\n                                     plot_marginal_distributions = TRUE,\n                                     marginal.type = \"violin\",\n                                     marginal.size = 2)\n\np <- p1 | p2\np\ngenes <- list(\"A\" = Seurat::VariableFeatures(sample)[1:5],\n              \"B\" = Seurat::VariableFeatures(sample)[6:10],\n              \"C\" = Seurat::VariableFeatures(sample)[11:15],\n              \"D\" = Seurat::VariableFeatures(sample)[16:20])\n\np1 <- SCpubr::do_DimPlot(sample = sample,\n                         plot_marginal_distributions = TRUE,\n                         legend.position = \"bottom\",\n                         marginal.type = \"boxplot\",\n                         marginal.size = 2)\n\np2 <- SCpubr:::do_CellularStatesPlot(sample = sample,\n                                     gene_list = genes,\n                                     x1 = \"A\",\n                                     y1 = \"B\",\n                                     x2 = \"C\",\n                                     y2 = \"D\",\n                                     enforce_simmetry = T,\n                                     legend.position = \"bottom\",\n                                     plot_marginal_distributions = TRUE,\n                                     marginal.type = \"boxplot\",\n                                     marginal.size = 2)\n\np <- p1 | p2\np\ngenes <- list(\"A\" = Seurat::VariableFeatures(sample)[1:5],\n              \"B\" = Seurat::VariableFeatures(sample)[6:10],\n              \"C\" = Seurat::VariableFeatures(sample)[11:15],\n              \"D\" = Seurat::VariableFeatures(sample)[16:20])\n\np1 <- SCpubr::do_DimPlot(sample = sample,\n                         plot_marginal_distributions = TRUE,\n                         legend.position = \"bottom\",\n                         marginal.type = \"densigram\")\n\np2 <- SCpubr:::do_CellularStatesPlot(sample = sample,\n                                     gene_list = genes,\n                                     x1 = \"A\",\n                                     y1 = \"B\",\n                                     x2 = \"C\",\n                                     y2 = \"D\",\n                                     enforce_simmetry = T,\n                                     legend.position = \"bottom\",\n                                     plot_marginal_distributions = TRUE,\n                                     marginal.type = \"densigram\")\n\np <- p1 | p2\np"},{"path":"rasterized-figures.html","id":"rasterized-figures","chapter":"Rasterized figures","heading":"Rasterized figures","text":"Many times want generate figures PDF format can later modify aspects image editors. problem comes work datasets , let’s say, 50.000 cells save plot PDF, cell now becomes item needs tracked PDF file. , SCpubr::do_DimPlot() SCpubr::do_FeaturePlot() present parameter raster, set TRUE turns image rasterized image., two major concepts take account generating rasterized images: pt.size raster.dpi.","code":""},{"path":"rasterized-figures.html","id":"effect-of-point-size-in-the-plots.","chapter":"Rasterized figures","heading":"Effect of point size in the plots.","text":"Depending point size provided, value lower 1, default cells become plus signs.\nFigure 1.1: Effect point size rasterized images.\n","code":"\np.0.5 <- SCpubr::do_DimPlot(sample = sample, \n                            raster = TRUE,\n                            pt.size = 0.5,\n                            plot.title = \"pt.size = 0.5\",\n                            raster.dpi = 512) |\n         SCpubr::do_FeaturePlot(sample = sample,\n                                raster = TRUE,\n                                features = \"CD14\",\n                                pt.size = 0.5,\n                            raster.dpi = 512)\n\np.1.0 <- SCpubr::do_DimPlot(sample = sample, \n                            raster = TRUE,\n                            pt.size = 1,\n                            plot.title = \"pt.size = 1.0\",\n                            raster.dpi = 512) |\n         SCpubr::do_FeaturePlot(sample = sample,\n                                raster = TRUE,\n                                features = \"CD14\",\n                                pt.size = 1,\n                            raster.dpi = 512)\n\np.2.0 <- SCpubr::do_DimPlot(sample = sample, \n                            raster = TRUE,\n                            pt.size = 2,\n                            plot.title = \"pt.size = 2.0\",\n                            raster.dpi = 512) |\n         SCpubr::do_FeaturePlot(sample = sample,\n                                raster = TRUE,\n                                features = \"CD14\",\n                                pt.size = 2,\n                            raster.dpi = 512)\np <- p.0.5 / p.1.0 / p.2.0\np"},{"path":"rasterized-figures.html","id":"effect-of-raster-dpi-in-the-plots.","chapter":"Rasterized figures","heading":"Effect of raster dpi in the plots.","text":"Depending value provided raster.dpi, overall resolution plot vary. Let’s focus setting pt.size = 2 vary raster.dpi:\nFigure 1.2: Effect raster dpi rasterized images.\nTherefore, optimal combination depend dataset size want look like.","code":"\np.0.5 <- SCpubr::do_DimPlot(sample = sample, \n                            raster = TRUE,\n                            pt.size = 2,\n                            plot.title = \"raster.dpi = 512\",\n                            raster.dpi = 512) |\n         SCpubr::do_FeaturePlot(sample = sample,\n                                raster = TRUE,\n                                features = \"CD14\",\n                                pt.size = 2,\n                            raster.dpi = 512)\n\np.1.0 <- SCpubr::do_DimPlot(sample = sample, \n                            raster = TRUE,\n                            pt.size = 2,\n                            plot.title = \"raster.dpi = 1024\",\n                            raster.dpi = 1024) |\n         SCpubr::do_FeaturePlot(sample = sample,\n                                raster = TRUE,\n                                features = \"CD14\",\n                                pt.size = 2,\n                            raster.dpi = 1024)\n\np.2.0 <- SCpubr::do_DimPlot(sample = sample, \n                            raster = TRUE,\n                            pt.size = 2,\n                            plot.title = \"raster.dpi = 2048\",\n                            raster.dpi = 2048) |\n         SCpubr::do_FeaturePlot(sample = sample,\n                                raster = TRUE,\n                                features = \"CD14\",\n                                pt.size = 2,\n                            raster.dpi = 2048)\np <- p.0.5 / p.1.0 / p.2.0\np"},{"path":"save-the-figures.html","id":"save-the-figures","chapter":"Save the figures","heading":"Save the figures","text":"Creating good plots just half process. equally important properly save . purpose SCpubr::save_Plot. function handy tool save plots easily different formats, .pdf, .png, .jpeg, .tiff .svg. can achieved providing following output_format parameter:\"\": store provided plot 5 formats.\"publication\": store plot .pdf, .png .svg.Individual format: Provide desired format saved one.Width Height set default 8 inches , plot squared. However, really important parameters modified user’s need. name file can provided file_name parameter path store files can specified figure_path. provided, figure_path default current working environment file_name default combination current date time. examples.","code":"\n# Generate a plot.\np <- SCpubr::do_DimPlot(sample = sample)\n\n# Default parameters.\nSCpubr::save_Plot(plot = p)\n\n# Specifying the name and folder.\nSCpubr::save_Plot(plot = p,\n                 figure_path = \"/path/to/my/figures/\",\n                 file_name = \"my_figure\")\n\n# Specify to also create a new folder.\nSCpubr::save_Plot(plot = p,\n                 figure_path = \"/path/to/my/figures/\",\n                 file_name = \"my_figure\",\n                 create_path = TRUE)\n\n# Set dimensions for the figure.\nSCpubr::save_Plot(plot = p,\n                 figure_path = \"/path/to/my/figures/\",\n                 file_name = \"my_figure\",\n                 create_path = TRUE,\n                 width = 8,\n                 height = 8)\n\n# Set quality (dpi).\nSCpubr::save_Plot(plot = p,\n                 figure_path = \"/path/to/my/figures/\",\n                 file_name = \"my_figure\",\n                 create_path = TRUE,\n                 width = 8,\n                 height = 8,\n                 dpi = 300)"},{"path":"troubleshooting.html","id":"troubleshooting","chapter":"Troubleshooting","heading":"Troubleshooting","text":"section aims clarify provide fixes common errors might appear due external factors.","code":""},{"path":"troubleshooting.html","id":"correcly-defining-the-number-of-columns-and-rows-in-the-legend","chapter":"Troubleshooting","heading":"Correcly defining the number of columns and rows in the legend","text":"Sometimes, using legend.ncol legend.nrow parameter across functions SCpubr implemented, output number columns rows reflect number provided. stands particularly true using legend.ncol. happens, apparently, due internal checks ggplot2 , today, solution found. However, due reason, legend.nrow introduced, attempt cases defining total number rows instead. However, normally cases normally arise legend forced uneven number items per row/column. Therefore, suggested always generated evenly distributed legends. representative example:","code":"\np1 <- SCpubr::do_DimPlot(sample, legend.ncol = 5)\np2 <- SCpubr::do_DimPlot(sample, legend.ncol = 8)\np3 <- SCpubr::do_DimPlot(sample, legend.ncol = 10)\np4 <- SCpubr::do_DimPlot(sample, legend.ncol = 8, legend.nrow = 2)\np5 <- SCpubr::do_DimPlot(sample, legend.nrow = 3)\np6 <- SCpubr::do_DimPlot(sample, legend.nrow = 7)\np1 / p2 / p3 / p4 / p5 / p6"},{"path":"citation.html","id":"citation","chapter":"Citation","heading":"Citation","text":"cite SCpubr publications, please use:can also use following BibLaTeX entry:","code":"Blanco-Carmona, E. Generating publication ready visualizations \nfor Single Cell transcriptomics using SCpubr. bioRxiv (2022) \ndoi:10.1101/2022.02.28.482303.@article{blanco-carmona_generating_2022,\n    title = {Generating publication ready visualizations for Single Cell transcriptomics using {SCpubr}},\n    url = {https://www.biorxiv.org/content/early/2022/03/01/2022.02.28.482303},\n    doi = {10.1101/2022.02.28.482303},\n    abstract = {Single Cell transcriptomic analysis has become a widespread technology of choice when it comes to understanding the differences at a transcriptomic level in heterogeneous samples. As a consequence, a plethora of analysis tools have been published to tackle the different analysis steps from count matrix generation to downstream analysis. Many of them provide ways to generate visualizations of the data. While some design choices are made, it is a common practice to provide the user with visualizations as raw as possible so that they can be customized to the user needs. However, in many cases these final customization steps are either time consuming or demand a very specific set of skills. This problem is addressed by {SCpubr}, which sacrifices some of this initial freedom of choice in aesthetics to provide the user a more streamlined way of generating high quality Single Cell transcriptomic visualizations.Competing Interest {StatementThe} authors have declared no competing interest.},\n    journaltitle = {{bioRxiv}},\n    author = {Blanco-Carmona, Enrique},\n    date = {2022},\n    note = {Publisher: Cold Spring Harbor Laboratory\n\\_eprint: https://www.biorxiv.org/content/early/2022/03/01/2022.02.28.482303.full.pdf},\n}"}]
