[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "SCpubr",
    "section": "",
    "text": "About this package\n\n\n\n\n\n\nWoops! You stumbled upon the in-development website for SCpubr v2.0.0! There is still a bit of time before the release, but stay tuned for the update!\nYou can have a peek to the changes here and in this website as it is being rebuilt!\n\n\n\n\n\n\nPrevious documentation:\n\n\n\nTo consult the previous documentation, go here instead.\n\n\nThanks!!"
  },
  {
    "objectID": "preface/Installation-guide.html",
    "href": "preface/Installation-guide.html",
    "title": "Installation guide",
    "section": "",
    "text": "To install this package, use the following commands:\n\n# From CRAN - Official release:\ninstall.packages(\"SCpubr\")\n\n# From GitHub - Latest stable development version:\nif(!requireNamespace(\"devtools\", quietly = TRUE)){\n  install.packages(\"devtools\") # If not installed.\n}\n\ndevtools::install_github(\"enblacar/SCpubr\", ref = \"v2.0.0-dev-stable\")\n\nNote that additional packages may be required to run certain functions. This information is usually displayed when you load the package for the first time in the session.\n\nlibrary(\"SCpubr\")\n\n\nThis summary will provide you with the information you need to run the package:\n\nThe version of SCpubr you have installed and the latest version available.\nThe status of your dependencies (installed or missing), including the current and latest version of each installed dependency.\nThe functions that can be run based on your currently installed dependencies.\n\nNote that some packages, such as Seurat, ggplot2, or dplyr, require a minimum version. If your installed version is not high enough, these packages will be marked with an exclamation mark.\nIf you do not see this message, you can always generate it by using SCpubr::package_report().\nYou can also check the required packages for a specific function by using SCpubr::check_dependencies() and specifying the function name."
  },
  {
    "objectID": "preface/Dataset.html",
    "href": "preface/Dataset.html",
    "title": "Dataset used",
    "section": "",
    "text": "Through this manual we are going to use a publicly available dataset containing 10K raw cells. The following code is used to generate a Seurat object ready for plotting.\n\ncounts_path &lt;- \"path_to_count_matrix\"\n\n# Path count matrix.\ncounts &lt;- Seurat::Read10X(counts_path)\n\n# Create Seurat object.\nsample &lt;- Seurat::CreateSeuratObject(counts = counts, project = \"10K_pbmc\")\n\n# Compute percentage of mithochondrial RNA.\nsample &lt;- Seurat::PercentageFeatureSet(sample, pattern = \"^MT-\", col.name = \"percent.mt\")\n\n# Compute QC.\nmask1 &lt;- sample$nCount_RNA &gt;= 1000\nmask2 &lt;- sample$nFeature_RNA &gt;= 500\nmask3 &lt;- sample$percent.mt &lt;= 20\nmask &lt;- mask1 & mask2 & mask3\nsample &lt;- sample[, mask]\n\n# Normalize.\nsample &lt;- Seurat::SCTransform(sample)\n\n# Dimensional reduction.\nsample &lt;- Seurat::RunPCA(sample)\nsample &lt;- Seurat::RunUMAP(sample, dims = 1:30)\n\n# Find clusters.\nsample &lt;- Seurat::FindNeighbors(sample, dims = 1:30)\nsample &lt;- Seurat::FindClusters(sample, resolution = 0.2)"
  },
  {
    "objectID": "basic_functions/DimPlots.html#basic-usage",
    "href": "basic_functions/DimPlots.html#basic-usage",
    "title": "Dim plots",
    "section": "Basic usage",
    "text": "Basic usage\nDimPlots can be generated in SCpubr using the function SCpubr::do_DimPlot():\n\np &lt;- SCpubr::do_DimPlot(sample = sample)\n\np\n\n\n\nSCpubr DimPlot"
  },
  {
    "objectID": "basic_functions/DimPlots.html#modifying-axes-behavior",
    "href": "basic_functions/DimPlots.html#modifying-axes-behavior",
    "title": "Dim plots",
    "section": "Modifying axes behavior",
    "text": "Modifying axes behavior\nAxes are removed by default from the plot, together with the axes titles if they match any of the following combinations:\n\nTSNE_1 / TSNE_2\nUMAP_1 / UMAP_2\n\nIn any other combination, the titles will come back:\n\n# Example using PCA reduction.\np1 &lt;- SCpubr::do_DimPlot(sample = sample, \n                         reduction = \"pca\")\n\n# Example using a non-canonical set of dimensions.\np2 &lt;- SCpubr::do_DimPlot(sample = sample, \n                         dims = c(2, 1))\n\np &lt;- p1 | p2\np\n\n\n\nAxes titles come back whenever it is not UMAP_1 vs UMAP_2.\n\n\n\n\nThis behaviour can be overridden with plot.axes = TRUE:\n\n# Bring back the Axes.\np &lt;- SCpubr::do_DimPlot(sample = sample,\n                        plot.axes = TRUE)\np\n\n\n\nBring back the axes."
  },
  {
    "objectID": "basic_functions/DimPlots.html#label-the-clusters",
    "href": "basic_functions/DimPlots.html#label-the-clusters",
    "title": "Dim plots",
    "section": "Label the clusters",
    "text": "Label the clusters\nIn some cases, we might want to remove the legend entirely, and instead plot labels on top of each cluster. This can be achieved by using label = TRUE.\n\n# Put labels on top of the clusters.\np &lt;- SCpubr::do_DimPlot(sample, \n                     label = TRUE)\np\n\n\n\nLabels on top of the clusters.\n\n\n\n\nThese labels are, in essence the result of applying ggplot2::geom_label() on the plot. However, we might also want to have them as pure text instead of the labels. We can achieve that by providing label.box = FALSE.\n\n# Labels as text\np &lt;- SCpubr::do_DimPlot(sample = sample, \n                        label = TRUE,\n                        label.box = FALSE)\np\n\n\n\nLabels as text.\n\n\n\n\nHowever, we can play further with other parameters of the function such as label.color which will provide a different color for the text inside the labels:\n\n# Change the color of the label text.\np1 &lt;- SCpubr::do_DimPlot(sample = sample, \n                         label = TRUE, \n                         label.color = \"black\")\n\n# Change the color of the text.\np2 &lt;- SCpubr::do_DimPlot(sample = sample, \n                         label = TRUE, \n                         label.color = \"black\",\n                         label.box = FALSE)\np &lt;- p1 | p2\np\n\n\n\nChange label/text color.\n\n\n\n\nAlso, we can modify the size of the labels/text by using label.size paramter:\n\n# Change the size of the label text.\np1 &lt;- SCpubr::do_DimPlot(sample = sample, \n                         label = TRUE, \n                         label.size = 6)\n\n# Change the size of the text.\np2 &lt;- SCpubr::do_DimPlot(sample = sample, \n                         label = TRUE, \n                         label.box = FALSE,\n                         label.size = 6)\np &lt;- p1 | p2\np\n\n\n\nChange label/text size\n\n\n\n\nFinally, if the labels/text are overlapping one to another, we can try to fix that by repelling the labels from one to another. We can achieve this by using repel = TRUE:\n\n# Repel the labels.\np1 &lt;- SCpubr::do_DimPlot(sample = sample, \n                         label = TRUE, \n                         label.color = \"black\",\n                         repel = TRUE)\n\n# Repel the text.\np2 &lt;- SCpubr::do_DimPlot(sample = sample, \n                         label = TRUE, \n                         label.color = \"black\",\n                         label.box = FALSE,\n                         repel = TRUE)\np &lt;- p1 | p2\np\n\n\n\nRepel the labels/text."
  },
  {
    "objectID": "basic_functions/DimPlots.html#modify-legend-appearance",
    "href": "basic_functions/DimPlots.html#modify-legend-appearance",
    "title": "Dim plots",
    "section": "Modify legend appearance",
    "text": "Modify legend appearance\nThere are several ways we can interact with how the legend is displayed.\nFor instance, we can change the number of columns or rows with legend.ncol and legend.nrow.\n\n# Modify the number of columns in the legend.\np1 &lt;- SCpubr::do_DimPlot(sample = sample, \n                         legend.ncol = 4)\n\n# Modify the number of rows in the legend.\np2 &lt;- SCpubr::do_DimPlot(sample = sample, \n                         legend.nrow = 3)\n\np &lt;- p1 | p2 \np\n\n\n\nModify legend rows and colums.\n\n\n\n\nYou can also alter how the legend is being “filled” with legend.byrow = TRUE/FALSE. This is, by default the legend items are being placed column-wise. If we set legend.byrow = FALSE, the legend items are placed row-wise.\n\n# Fill the legend by column.\np1 &lt;- SCpubr::do_DimPlot(sample = sample,\n                         legend.byrow = FALSE)\n\n# Fill the legend by rows.\np2 &lt;- SCpubr::do_DimPlot(sample = sample,\n                         legend.byrow = TRUE)\n\np &lt;- p1 | p2 \np\n\n\n\nModify legend item placement behavior.\n\n\n\n\nFinally, we can add a custom legend title to the plot by using legend.title parameter:\n\n# Add a legend title.\np &lt;- SCpubr::do_DimPlot(sample = sample, \n                        legend.title = \"My clusters\")\np\n\n\n\nAdd a legend.title.\n\n\n\n\nWe can also control the position of the legend title by using legend.title.position = top/bottom/left/right:\n\np &lt;- SCpubr::do_DimPlot(sample = sample, \n                        legend.title = \"My clusters\",\n                        legend.title.position = \"bottom\")\n\np\n\n\n\nModify legend title placement."
  },
  {
    "objectID": "basic_functions/DimPlots.html#legend-placement",
    "href": "basic_functions/DimPlots.html#legend-placement",
    "title": "Dim plots",
    "section": "Legend placement",
    "text": "Legend placement\nSometimes, the legend is completely redundant, as we are already displaying the same information as labels in the text. Other times, we just want to remove it. In any case, this can be achieved by using legend.position = \"none\".\n\n# Remove the legend from the plot.\np &lt;- SCpubr::do_DimPlot(sample = sample, \n                        legend.position = \"none\")\np\n\n\n\nRemove the legend.\n\n\n\n\nIn other cases, we might just be interested in modifying the placement of the legend. This can also be achieved by using legend.position = \"bottom/top/right/left\":\n\np &lt;- SCpubr::do_DimPlot(sample = sample, \n                        legend.position = \"right\")\n\np\n\n\n\nModify legend placement."
  },
  {
    "objectID": "basic_functions/DimPlots.html#changing-the-order-of-plotting",
    "href": "basic_functions/DimPlots.html#changing-the-order-of-plotting",
    "title": "Dim plots",
    "section": "Changing the order of plotting",
    "text": "Changing the order of plotting\nBe default SCpubr::do_DimPlot() plots cells randomly using shuffle = TRUE. This is different from the default behavior of Seurat::DimPlot(), which plots cells based on their identity factor levels.\n\np1 &lt;- SCpubr::do_DimPlot(sample = sample,\n                         reduction = \"pca\",\n                         shuffle = TRUE)\n\np2 &lt;- SCpubr::do_DimPlot(sample = sample,\n                         reduction = \"pca\",\n                         shuffle = FALSE)\n\np &lt;- p1 | p2\np\n\n\n\nShuffling cells"
  },
  {
    "objectID": "basic_functions/DimPlots.html#highlighting-cells",
    "href": "basic_functions/DimPlots.html#highlighting-cells",
    "title": "Dim plots",
    "section": "Highlighting cells",
    "text": "Highlighting cells\nWe can highlight a certain group of cells in the plot. This is achieved by using the cells.highlight parameter.\n\ncells.use &lt;- sample(x = colnames(sample), \n                    size = 1500)\n\np &lt;- SCpubr::do_DimPlot(sample = sample,\n                        cells.highlight = cells.use)\n\np\n\n\n\nHighlighting cells.\n\n\n\n\nOne can also change the color of the highligted cells by providing single color to colors.use and the color of the not selected cells with na.value:\n\n# Change color of highlighted and non-highlighted cells.\np &lt;- SCpubr::do_DimPlot(sample = sample, \n                        cells.highlight = cells.use,\n                        colors.use = \"dodgerblue\",\n                        na.value = \"grey90\")\np\n\n\n\nChange default color of highlighted and non-highlighted cells.\n\n\n\n\nThe size of the highlighted dots can be modified with the parameter sizes.highlight.\n\n# Increase the size of the highlighted cells.\np &lt;- SCpubr::do_DimPlot(sample = sample, \n                        cells.highlight = cells.use, \n                        sizes.highlight = 2)\np\n\n\n\nIncrease dot size of highlighted cells.\n\n\n\n\nWe can also highlight whole identities with idents.highlight parameter. For this, just provide the desired identities to be selected. It can also work in combination with cells.highlight.\n\n# Using cells.highlight.\np1 &lt;- SCpubr::do_DimPlot(sample = sample, \n                         cells.highlight = cells.use)\n\n# Using idents.highlight.\np2 &lt;- SCpubr::do_DimPlot(sample = sample, \n                         idents.highlight = c(\"6\"))\n\n# Using both.\np3 &lt;- SCpubr::do_DimPlot(sample = sample, \n                         cells.highlight = cells.use, \n                         idents.highlight = c(\"6\"))\n\np &lt;- p1 | p2 | p3\np\n\n\n\nUsing a combination of cells.highlight and idents.highlight."
  },
  {
    "objectID": "basic_functions/DimPlots.html#restrict-the-identitites-displayed",
    "href": "basic_functions/DimPlots.html#restrict-the-identitites-displayed",
    "title": "Dim plots",
    "section": "Restrict the identitites displayed",
    "text": "Restrict the identitites displayed\nSometimes, we are interested in showing only some of the identities or groups in our sample. Instead of highlighting cells, we still want to keep the original colors and legend. For this use case, one might be tempted to just subset the sample as follows:\n\n# Subset desired identities in a DimPlot.\np &lt;- SCpubr::do_DimPlot(sample = sample[, sample$seurat_clusters %in% c(\"0\", \"5\", \"2\", \"4\")])\n\np\n\n\n\nSubsetting the Seurat object to restrict the identities shown.\n\n\n\n\nHowever, we end up losing the UMAP silhouette. For this use case, SCpubr::do_DimPlot() introduces idents.keep parameter, for which you can provide a vector with the identities you want to keep. This will assign to the rest of the cells a value of NA and they will be colored according to na.value parameter:\n\n# Select identities with idents.keep.\np1 &lt;- SCpubr::do_DimPlot(sample = sample,\n                         idents.keep = c(\"0\", \"5\", \"2\",  \"4\"))\n\n# Also, non-selected cells's color can be modified.\np2 &lt;- SCpubr::do_DimPlot(sample = sample,\n                         idents.keep = c(\"0\", \"5\", \"2\",  \"4\"),\n                         na.value = \"grey50\")\np &lt;- p1 | p2\np\n\n\n\nSelect the identities to display."
  },
  {
    "objectID": "basic_functions/DimPlots.html#group-by-another-metadata-variable",
    "href": "basic_functions/DimPlots.html#group-by-another-metadata-variable",
    "title": "Dim plots",
    "section": "Group by another metadata variable",
    "text": "Group by another metadata variable\nSo far, all the DimPlots displayed have shown the identities as the ones that are currently set in the object. This can be consulted by using Seurat::Idents(sample). However, naturally, we might want to display different metadata variables. This can be easily achieved by using group.by parameter:\n\n# Generate another metadata variable to group the cells by.\nsample$annotation &lt;- sample(c(\"A\", \"B\", \"C\"), ncol(sample), replace = TRUE)\n\n# Group by another metadata variable.\np1 &lt;- SCpubr::do_DimPlot(sample, \n                         group.by = \"seurat_clusters\")\n\np2 &lt;- SCpubr::do_DimPlot(sample, \n                         group.by = \"annotation\")\n\np &lt;- p1 | p2\np\n\n\n\nGroup by another metadata variable."
  },
  {
    "objectID": "basic_functions/DimPlots.html#splitting-by-a-category",
    "href": "basic_functions/DimPlots.html#splitting-by-a-category",
    "title": "Dim plots",
    "section": "Splitting by a category",
    "text": "Splitting by a category\nAnother useful parameter is split.by, which allows you to split your DimPlot into multiple panels, each one containing a different unique value of the metadata variable you have provided to the argument. One can understand this as using the group.by parameter and then splitting the resulting DimPlot into different panels. In this example, we are going to use the different clusters as an example. This is how it looks by default:\n\n# SCpubr's DimPlot using split.by\np &lt;- SCpubr::do_DimPlot(sample, \n                        split.by = \"seurat_clusters\", \n                        ncol = 5, \n                        legend.position = \"none\",\n                        font.size = 24)\n\np\n\n\n\nUsing split.by in SCpubr.\n\n\n\n\nIf we are interested only in a subset of the possible values, we can use idents.keep alongside a vector containing the values to keep from the unique values in split.by:\n\n# Using split.by and restricting the number of output plots with idents.keep.\np &lt;- SCpubr::do_DimPlot(sample, \n                        split.by = \"seurat_clusters\", \n                        ncol = 3, \n                        idents.keep = c(\"0\", \"1\", \"7\"),\n                        legend.position = \"none\",\n                        font.size = 24)\n\np\n\n\n\nSelect only some identities in split.by"
  },
  {
    "objectID": "basic_functions/DimPlots.html#group-by-a-variable-but-split-by-another",
    "href": "basic_functions/DimPlots.html#group-by-a-variable-but-split-by-another",
    "title": "Dim plots",
    "section": "Group by a variable but split by another",
    "text": "Group by a variable but split by another\nFinally, but also importantly, users might want to split the UMAP using split.by, while also grouping (coloring) the values by another variable using group.by. Using these two parameters in combination yields the following:\n\n# Using split.by and group.by in combination.\nsample$orig.ident &lt;- sample(c(\"A\", \"B\", \"C\"), \n                            ncol(sample), \n                            replace = TRUE, \n                            prob = c(0.05, 0.1, 0.85))\n\np &lt;- SCpubr::do_DimPlot(sample, \n                        group.by = \"seurat_clusters\",\n                        split.by = \"orig.ident\", \n                        font.size = 24)\n\np\n\n\n\nSplit by a variable but color by another one."
  },
  {
    "objectID": "basic_functions/DimPlots.html#change-default-colors",
    "href": "basic_functions/DimPlots.html#change-default-colors",
    "title": "Dim plots",
    "section": "Change default colors",
    "text": "Change default colors\nActually, the user might want to change the color of the highlighted cells in this split DimPlot. This is achieved by using colors.use parameter and providing either a vector of valid color representations of equal length to unique values in split.by or just a single color to use in all panels.\n\n# Create a color scale for the unique values in seurat clusters.\ncolors &lt;- c(\"0\" = \"#001219\",\n            \"1\" = \"#005f73\",\n            \"2\" = \"#0a9396\",\n            \"3\" = \"#94d2bd\",\n            \"4\" = \"#e9d8a6\",\n            \"5\" = \"#ee9b00\",\n            \"6\" = \"#ca6702\",\n            \"7\" = \"#bb3e03\",\n            \"8\" = \"#ae2012\",\n            \"9\" = \"#9b2226\")\n\np &lt;- SCpubr::do_DimPlot(sample, \n                        colors.use = colors,\n                        font.size = 24)\n\np\n\n\n\nChange default colors."
  }
]