[{"path":"index.html","id":"about-this-package","chapter":"About this package","heading":"About this package","text":"package aims provide streamlined way generating publication ready figures known single-cell visualizations. subjective term “aesthetically pleasant” can , set theme modifications implemented across different plot types. package also serves personal project, future prospects growth.","code":""},{"path":"installation-guide.html","id":"installation-guide","chapter":"Installation guide","heading":"Installation guide","text":"package can installed using following commands:packages needed order run different functions:colortoolsdplyrggbeeswarmggplot2ggpubrggrepelMatrixNebulosapatchworkpbapplypurrrrlangscalesSeuratstringrtidyrviridisAll packages can installed using following commands:interested running subset functions, SCpubr::state_dependencies() outputs different packages sources needed functions.","code":"\n# From CRAN:\n# Future sumission to CRAN.\n\n# From GitHub.\nif(!requireNamespace(\"devtools\", quietly = T)){\n  install.packages(\"devtools\") # If not installed.\n}\ndevtools::install_github(\"enblacar/SCpubr\")\n# Install CRAN packages.\ncran_packages <- c(\"colortools\",\n                   \"dplyr\",\n                   \"ggbeeswarm\",\n                   \"ggplot2\",\n                   \"ggpubr\",\n                   \"ggrepel\",\n                   \"Matrix\",\n                   \"patchwork\",\n                   \"purrr\",\n                   \"rlang\",\n                   \"scales\",\n                   \"Seurat\",\n                   \"stringr\",\n                   \"tidyr\",\n                   \"viridis\")\ninstall.packages(cran_packages)\n\n# Install bioconductor packages.\nbioconductor_packages <- c(\"Nebulosa\")\nif (!require(\"BiocManager\", quietly = TRUE))\n    install.packages(\"BiocManager\")\n\nBiocManager::install(bioconductor_packages)\n# Will return the package dependencies for all functions.\nSCpubr::state_dependencies()\n\n# Will return the package dependencies for selected functions.\nSCpubr::state_dependencies(func_name = c(\"do_DimPlot\", \"do_Feature_Plot\"))\n\n# Will return the package dependencies of a single function.\nSCpubr::state_dependencies(func_name = \"do_DimPlot\")"},{"path":"dataset-used.html","id":"dataset-used","chapter":"Dataset used","heading":"Dataset used","text":"manual going use publicly available dataset containing 10K raw cells. following code used generate Seurat object ready plotting.","code":"\ncounts_path <- \"path_to_count_matrix\"\n\n# Path count matrix.\ncounts <- Seurat::Read10X(counts_path)\n# Create Seurat object.\nsample <- Seurat::CreateSeuratObject(counts = counts, project = \"10K_pbmc\")\n# Compute percentage of mithochondrial RNA.\nsample <- Seurat::PercentageFeatureSet(sample, pattern = \"^MT-\", col.name = \"percent.mt\")\n# Compute QC.\nmask1 <- sample$nCount_RNA >= 1000\nmask2 <- sample$nFeature_RNA >= 500\nmask3 <- sample$percent.mt <= 20\nmask <- mask1 & mask2 & mask3\nsample <- sample[, mask]\n# Normalize.\nsample <- Seurat::SCTransform(sample)\n\n# Dimensional reduction.\nsample <- Seurat::RunPCA(sample)\nsample <- Seurat::RunUMAP(sample, dims = 1:30)\n# Find clusters.\nsample <- Seurat::FindNeighbors(sample, dims = 1:30)\nsample <- Seurat::FindClusters(sample, resolution = 0.2)"},{"path":"dim-plots.html","id":"dim-plots","chapter":"1 Dim plots","heading":"1 Dim plots","text":"DimPlots , probably, one iconic visualizations Seurat. allows user visualize cells dimensional reduction embedding PCA UMAP. cells can , , colored desired groups. short, visualization allows user plot kind categorical data onto cells dimensional reduction embedding.","code":""},{"path":"dim-plots.html","id":"figure-build-up","chapter":"1 Dim plots","heading":"1.1 Figure build-up","text":"subsection, break several modifications applied figures SCpubr. First, let’s plot DimPlot. achieved using Seurat::DimPlot() function:\nFigure 1.1: Default DimPlot.\nOverall, pretty neat visualization, quite changes one like implement. instance, shuffling cells overlap cells just due cluster names.\nFigure 1.2: DimPlot cells shuffled.\nFurthermore, one think need axes. , consensus, UMAPs shown plotting first UMAP component X axis second Y axis, showing becomes redundant, specially one can truly rely numbers shown scales.\nFigure 1.3: DimPlot without axes.\nRight now, can observe couple things. First, dot size rather small. Let’s set 0.5.\nFigure 1.4: DimPlot increased dot size.\nStill, legend seems rather small. Let’s increase ’s font size set bold can better read.\nFigure 1.5: DimPlot increased font size.\nalso like add title plot, best describe .\nFigure 1.6: DimPlot title.\n, naturally, like increase font size title put bold centered.\nFigure 1.7: DimPlot bigger bold title.\nNow, like modify color palette. palette bright colors, want something toned .\nFigure 1.8: DimPlot custom color scale.\nnow, plot looks much better polished default counterpart. , setting ground SCpubr::do_DimPlot().","code":"\np <- Seurat::DimPlot(sample)\np\np <- Seurat::DimPlot(sample, \n                     shuffle = T)\np\np <- Seurat::DimPlot(sample, \n                     shuffle = T) + \n     Seurat::NoAxes()\np\np <- Seurat::DimPlot(sample, \n                     shuffle = T, \n                     pt.size = 0.5) + \n     Seurat::NoAxes()\np\np <- Seurat::DimPlot(sample, \n                     shuffle = T, \n                     pt.size = 0.5) + \n    Seurat::NoAxes() +\n    ggplot2::theme(legend.text = ggplot2::element_text(size = 12, \n                                                       face = \"bold\"),\n                   legend.title = ggplot2::element_text(size = 12, \n                                                        face = \"bold\"))\np\np <- Seurat::DimPlot(sample, \n                     shuffle = T, \n                     pt.size = 0.5) + \n     Seurat::NoAxes() +\n     ggplot2::ggtitle(\"My awesome SC dataset\") +\n     ggplot2::theme(legend.text = ggplot2::element_text(size = 12, \n                                                        face = \"bold\"),\n                    legend.title = ggplot2::element_text(size = 12, \n                                                         face = \"bold\"))\np\np <- Seurat::DimPlot(sample, \n                     shuffle = T, \n                     pt.size = 0.5) + \n     Seurat::NoAxes() +\n     ggplot2::ggtitle(\"My awesome SC dataset\") +\n     ggplot2::theme(plot.title = ggplot2::element_text(size = 16, \n                                                       face = \"bold\", \n                                                       hjust = 0.5),\n                    legend.text = ggplot2::element_text(size = 12, \n                                                        face = \"bold\"),\n                    legend.title = ggplot2::element_text(size = 12, \n                                                         face = \"bold\"))\np\nnum_clusters <- length(unique(sample$seurat_clusters))\ncolor_scale <- colortools::setColors(\"#457b9d\", num_clusters)\nnames(color_scale) <- sort(unique(sample$seurat_clusters))\n\np <- Seurat::DimPlot(sample, \n                     shuffle = T, \n                     pt.size = 0.5, \n                     cols = color_scale) + \n     Seurat::NoAxes() +\n     ggplot2::ggtitle(\"My awesome SC dataset\") +\n     ggplot2::theme(plot.title = ggplot2::element_text(size = 16, \n                                                       face = \"bold\", \n                                                       hjust = 0.5),\n                    legend.text = ggplot2::element_text(size = 12, \n                                                        face = \"bold\"),\n                    legend.title = ggplot2::element_text(size = 12, \n                                                         face = \"bold\"))\np"},{"path":"dim-plots.html","id":"basic-usage","chapter":"1 Dim plots","heading":"1.2 Basic usage","text":"default output SCpubr::do_DimPlot().\nFigure 1.9: SCpubr DimPlot.\nEven though axes removed UMAP reductions, title axes kept reduction used. applied UMAP default dimension order altered.\nFigure 1.10: SCpubr DimPlot PCA embedding showing axes titles UMAP changing default dimension component order.\ncan add title plot.title parameter.\nFigure 1.11: SCpubr DimPlot title.\ncan change legend location number columns legend.position legend.ncol.\nFigure 1.12: SCpubr DimPlot legend left.\n","code":"\np <- SCpubr::do_DimPlot(sample = sample)\np\np1 <- SCpubr::do_DimPlot(sample = sample, \n                         plot.title = \"My awesome SC data set\",\n                         reduction = \"pca\")\np2 <- SCpubr::do_DimPlot(sample = sample, \n                         plot.title = \"My awesome SC data set\",\n                         dims = c(2, 1))\np1 | p2\np <- SCpubr::do_DimPlot(sample = sample, \n                        plot.title = \"My awesome SC data set\")\np\np <- SCpubr::do_DimPlot(sample = sample, \n                        plot.title = \"My awesome SC data set\", \n                        legend.position = \"left\", \n                        legend.ncol = 2)\np"},{"path":"dim-plots.html","id":"using-labels-instead-of-a-legend","chapter":"1 Dim plots","heading":"1.3 Using labels instead of a legend","text":"cases, especially early analysis numbers cluster names, might want remove legend entirely, instead plot labels top cluster. achieved using label = TRUE. looks Seurat:\nFigure 1.13: Seurat DimPlot labels top clusters.\nHowever, can play parameters function label.color label.box. integrated default SCpubr::do_DimPlot. looks:\nFigure 1.14: Seurat DimPlot labels top clusters.\nlabels present now bold text readability.","code":"\np <- Seurat::DimPlot(sample, \n                     label = T)\np\np <- SCpubr::do_DimPlot(sample = sample, \n                        label = TRUE, \n                        legend = FALSE)\np"},{"path":"dim-plots.html","id":"modifying-default-colors","chapter":"1 Dim plots","heading":"1.4 Modifying default colors","text":"wanted, can also change colors identities DimPlot based custom color scheme. , named vector containing names identities names HEX codes values provided colors.use:\nFigure 1.15: SCpubr, modifying default colors DimPlot\n","code":"\n# Create a color scale for the unique values in seurat clusters.\ncolors <- c(\"0\" = \"#001219\",\n            \"1\" = \"#005f73\",\n            \"2\" = \"#0a9396\",\n            \"3\" = \"#94d2bd\",\n            \"4\" = \"#e9d8a6\",\n            \"5\" = \"#ee9b00\",\n            \"6\" = \"#ca6702\",\n            \"7\" = \"#bb3e03\",\n            \"8\" = \"#ae2012\",\n            \"9\" = \"#9b2226\")\n\np <- SCpubr::do_DimPlot(sample = sample, \n                        colors.use = colors)\np"},{"path":"dim-plots.html","id":"highlighting-cells","chapter":"1 Dim plots","heading":"1.5 Highlighting cells","text":"One nice features Seurat::DimPlot() possibility highlighting certain group cells DimPlot. achieved using cells.highligh parameter. default plot looks like.\nFigure 1.16: Seurat DimPlot highlighting cells.\nachieve similar effect SCpubr::do_DimPlot(), can use parameter cells.highlight. Also, can change color highligted cells providing single color colors.use:\nFigure 1.17: SCpubr DimPlot highlighting cells.\ndefault, size cells SCpubr::do_DimPlot() . However, size highlighted dots can modified parameter sizes.highlight Seurat.\nFigure 1.18: SCpubr DimPlot highlighting cells bigger dot size.\n","code":"\n# Select 1000 random cells out of clusters 1, 5 and 7.\ncells.use <- sample(colnames(sample[, sample$seurat_clusters %in% c(\"1\", \"5\", \"7\")]), 1000)\np <- Seurat::DimPlot(sample, \n                     cells.highlight = cells.use)\np\n# Select 1000 random cells out of clusters 1, 5 and 7.\ncells.use <- sample(colnames(sample[, sample$seurat_clusters %in% c(\"1\", \"5\", \"7\")]), 1000)\np1 <- SCpubr::do_DimPlot(sample = sample, \n                         cells.highlight = cells.use)\np2 <- SCpubr::do_DimPlot(sample = sample, \n                         cells.highlight = cells.use,\n                         colors.use = \"steelblue\")\np1 | p2\n# Select 1000 random cells out of clusters 1, 5 and 7.\ncells.use <- sample(colnames(sample[, sample$seurat_clusters %in% c(\"1\", \"5\", \"7\")]), 1000)\np <- SCpubr::do_DimPlot(sample = sample, \n                        cells.highlight = cells.use, \n                        sizes.highlight = 1)\np"},{"path":"dim-plots.html","id":"splitting-by-a-category","chapter":"1 Dim plots","heading":"1.6 Splitting by a category","text":"Another useful parameter Seurat::DimPlot split., allows split DimPlot multiple panels, one containing different unique value metadata variable provided argument. One can understand using group.parameter splitting resulting DimPlot different panels. example, going use different clusters example looks default:\nFigure 1.19: Seurat DimPlot using split..\ncan observed, plots accomplish task separating cells panel, approach followed actually makes interpretation difficult. Clusters Cluster 9, fewer cells, tell pretty much nothing. knowing original UMAP looked like major downside approach. SCpubr focus. Instead using Seurat’s split.parameter, generates many plots unique values metadata split plot , uses cells.highlight instead, keeps rest cells greyed . looks:\nFigure 1.20: SCpubr DimPlot using split..\nway, can see clusters Cluster 7 way disperse rest, accounting standalone groups cells also blending bigger clusters. Actually, user might want change color highlighted cells split DimPlot. achieved using colors.use parameter providing either vector valid color representations equal length unique values split.just single color color panels .\nFigure 1.21: SCpubr DimPlot using split.changed color\n","code":"\n# Using ncol = 5 to maintain some of the proportions. \np <- Seurat::DimPlot(sample, \n                     split.by = \"seurat_clusters\", \n                     ncol = 5)\np\n# Using ncol = 5 to maintain some of the proportions.\n# Using legend = F to remove unwanted repeated legends.\np <- SCpubr::do_DimPlot(sample, \n                        split.by = \"seurat_clusters\", \n                        ncol = 5, \n                        legend = F,\n                        fontsize = 24)\np\n# Create a color scale for the unique values in seurat clusters.\ncolors <- c(\"0\" = \"#001219\",\n            \"1\" = \"#005f73\",\n            \"2\" = \"#0a9396\",\n            \"3\" = \"#94d2bd\",\n            \"4\" = \"#e9d8a6\",\n            \"5\" = \"#ee9b00\",\n            \"6\" = \"#ca6702\",\n            \"7\" = \"#bb3e03\",\n            \"8\" = \"#ae2012\",\n            \"9\" = \"#9b2226\")\n\np1 <- SCpubr::do_DimPlot(sample, \n                         split.by = \"seurat_clusters\", \n                         ncol = 5, \n                         legend = F, \n                         colors.use = colors,\n                         fontsize = 24)\n\np2 <- SCpubr::do_DimPlot(sample, \n                         split.by = \"seurat_clusters\", \n                         ncol = 5, \n                         legend = F, \n                         colors.use = \"#008080\",\n                         fontsize = 24)\np1 / p2"},{"path":"feature-plots.html","id":"feature-plots","chapter":"2 Feature plots","heading":"2 Feature plots","text":"Another broadly used function Seurat Seurat::FeaturePlot(). basically counterpart Seurat::DimPlot() instead coloring cells based categorical color scale, uses continuous one, according variable provided user. can range gene expression, metadata variables number genes, even values PC_1. looks, plotting number UMIs:","code":""},{"path":"feature-plots.html","id":"basic-usage-1","chapter":"2 Feature plots","heading":"2.1 Basic usage","text":"\nFigure 1.1: Seurat FeaturePlot\nFirst thing stands , color scale changed one two opposite ends, identifying regions low high UMIs become easier task. Apart , want apply treatment SCpubr::do_DimPlot():\nFigure 1.2: Seurat FeaturePlot, new color scale general modifications\nway, can observe clusters really similar number UMIs, despite selected ones 4 times . well doublets. SCpubr::do_FeaturePlot() variation:\nFigure 1.3: SCpubr FeaturePlot, minor modifications\ndefault, SCpubr enlarges dots bit makes legend bold, better stand . Even though axes removed UMAP reductions, title axes kept reduction used. applied UMAP default dimension order altered.\nFigure 1.4: SCpubr Feature PCA embedding showing axes titles.\n","code":"\np <- Seurat::FeaturePlot(sample, \n                         features = \"nCount_RNA\")\np\np <- Seurat::FeaturePlot(sample, \n                         features = \"nCount_RNA\") + \n     Seurat::NoAxes() + \n     viridis::scale_color_viridis()\np\np <- SCpubr::do_FeaturePlot(sample = sample, \n                            features = \"nCount_RNA\", \n                            plot.title = \"Number of UMIs\")\np\np1 <- SCpubr::do_FeaturePlot(sample = sample, \n                             features = \"CD14\",\n                             plot.title = \"My awesome SC data set\",\n                             reduction = \"pca\")\np2 <- SCpubr::do_FeaturePlot(sample = sample, \n                             features = \"CD14\",\n                             plot.title = \"My awesome SC data set\",\n                             dims = c(2, 1))\np1 | p2"},{"path":"feature-plots.html","id":"multiple-features","chapter":"2 Feature plots","heading":"2.2 Multiple features","text":"SCpubr::do_FeaturePlot() can tackle multiple queries time. Plots can rearranged desired ncol parameter:\nFigure 1.5: SCpubr FeaturePlot, 4 features 2 columns\nmultiple queries, using plot.title parameter actually adds general title plots. one wants modify title plot independently, vector length number features needs provided individual.titles parameter. case title need changed, use NA instead.\nFigure 1.6: SCpubr FeaturePlot, individual modified titles\n","code":"\np <- SCpubr::do_FeaturePlot(sample, features = c(\"nCount_RNA\", \n                                                 \"nFeature_RNA\", \n                                                 \"percent.mt\", \n                                                 \"CD14\"), \n                            plot.title = \"My very important features\", \n                            ncol = 2)\np\np <- SCpubr::do_FeaturePlot(sample = sample,\n                            features = c(\"nCount_RNA\",\n                                         \"nFeature_RNA\",\n                                         \"percent.mt\",\n                                         \"CD14\"),\n                            plot.title = \"My very important features\",\n                            individual.titles = c(\"Plot A\",\n                                                  \"Plot_B\",\n                                                  NA,\n                                                  \"Plot_D\"),\n                            ncol = 2)\np"},{"path":"feature-plots.html","id":"working-with-subsets-of-cells","chapter":"2 Feature plots","heading":"2.3 Working with subsets of cells","text":"One things can misleading, case specific subset cells driving ends color scales. Let’s say identified clusters 2, 5, 8 responsible behavior. like plot values without taking cells consideration. first thing comes mind , indeed, removing cells completely, resulting following:\nFigure 1.7: SCpubr FeaturePlot, removing cells clusters 2, 5 8\nHowever, falls back problem Seurat::DimPlot split.parameter. lose overall context cells . taken care SCpubr::do_FeaturePlot(), using cells.highlight parameter:\nFigure 1.8: SCpubr FeaturePlot, masking cells clusters 2, 5 8\nway, adding cells back modifying legend, accomplish desired effect. Furthermore, SCpubr::do_FeaturePlot() also accepts vector identities plot, long part levels(seurat_object). can achieved using idents.highlight instead.\nFigure 1.9: SCpubr FeaturePlot, masking cells clusters 2, 5 8 using idents.highlight\n","code":"\ncells.plot <- colnames(sample[, !(sample$seurat_clusters %in% c(\"2\", \"5\", \"8\"))])\np <- SCpubr::do_FeaturePlot(sample[, cells.plot], \n                            features = c(\"CD14\"), \n                            plot.title = \"My very important features\")\np\ncells.plot <- colnames(sample[, !(sample$seurat_clusters %in% c(\"0\", \"2\", \"5\", \"8\"))])\np <- SCpubr::do_FeaturePlot(sample = sample, \n                            cells.highlight = cells.plot, \n                            features = c(\"CD14\"), \n                            plot.title = \"My very important features\")\np\n\np <- SCpubr::do_FeaturePlot(sample = sample, \n                            idents.highlight = levels(sample)[!(levels(sample) %in% c(\"0\", \"2\", \"5\", \"8\"))], \n                            features = c(\"CD14\"), \n                            plot.title = \"My very important features\")\np"},{"path":"feature-plots.html","id":"splitting-the-featureplot-by-a-variable","chapter":"2 Feature plots","heading":"2.4 Splitting the FeaturePlot by a variable","text":"cases, want visualize given feature, let’s say, expression LYN across another variable, instance seurat_clusters. can achieved easily Seurat using split.parameter. sake representation, let’s reduce number clusters.\nFigure 1.10: Seurat FeaturePlot split clusters.\nApart general aesthetic discrepancies mentioned , two main aspects missing. First, overall layout UMAP embedding. able correctly locate clusters really important. Secondly, knowing , default, color scale shared across plots (achieved using keep.scale = \"feature\"), like know value color scale reaches. two aspects SCpubr::do_FeaturePlot() delves :\nFigure 1.11: SCpubr FeaturePlot split clusters.\nway, able achieve better understandable plot. Please note implemented keep.scale = \"feature\". Providing options advisable. Furthermore, can query multiple features, stacked different entities split.. number columns predetermined number entities can modified. example, provide three possible examples features:LYN gene located rownames count matrix (`rownames(sample)``).nCount_RNA metadata variable located colnames(sample@meta.data).PC_1 column dimensional reduction embedding, located colnames(sample@reductions[[\"pca\"]][[]])\nFigure 1.12: SCpubr FeaturePlot split clusters using multiple features.\nSCpubr::do_FeaturePlot() can even subset previous plot identities split.particularly interested . color scale also limits contain values selected identities. can achieved provided vector identities split..idents parameter.\nFigure 1.13: SCpubr FeaturePlot split clusters using multiple features selected identities.\n","code":"\n# Group clusters.\nsample$new_clusters <- as.character(sample$seurat_clusters)\nsample$new_clusters[sample$new_clusters %in% c(\"0\", \"1\", \"2\", \"3\")] <- \"Cluster 1\"\nsample$new_clusters[sample$new_clusters %in% c(\"4\", \"5\", \"6\")] <- \"Cluster 2\"\nsample$new_clusters[sample$new_clusters %in% c(\"7\", \"8\", \"9\")] <- \"Cluster 3\"\n\np <- Seurat::FeaturePlot(sample, \n                         features = \"LYN\", \n                         split.by = \"new_clusters\")\np\np <- SCpubr::do_FeaturePlot(sample = sample, \n                            features = \"LYN\", \n                            split.by = \"new_clusters\")\np\np <- SCpubr::do_FeaturePlot(sample, \n                            features = c(\"LYN\", \"nCount_RNA\", \"PC_1\"), \n                            split.by = \"new_clusters\")\np\np <- SCpubr::do_FeaturePlot(sample, \n                            features = c(\"LYN\", \"nCount_RNA\", \"PC_1\"), \n                            split.by = \"seurat_clusters\", \n                            split.by.idents = c(\"2\", \"5\"))\np"},{"path":"feature-plots.html","id":"modify-color-maps","chapter":"2 Feature plots","heading":"2.5 Modify color maps","text":"possible SCpubr::do_FeaturePlot() also change color map plot one eight possible ones defined viridis. achieved using viridis_color_map parameter color map name code (capital letter). Options :- magma color map.B - inferno color map.C - plasma color map.D - viridis color map.E - cividis color map.F - rocket color map.G - mako color map.H - turbo color map.\nFigure 1.14: SCpubr FeaturePlot modifying viridis color maps.\n, recommend use turbo Feature plots, continuous scale goes many different colors , therefore, makes harder interpretation.","code":"\np1 <- SCpubr::do_FeaturePlot(sample = sample, features = \"CD14\", viridis_color_map = \"A\", plot.title = \"Magma\")\np2 <- SCpubr::do_FeaturePlot(sample = sample, features = \"CD14\", viridis_color_map = \"B\", plot.title = \"Inferno\")\np3 <- SCpubr::do_FeaturePlot(sample = sample, features = \"CD14\", viridis_color_map = \"C\", plot.title = \"Plasma\")\np4 <- SCpubr::do_FeaturePlot(sample = sample, features = \"CD14\", viridis_color_map = \"D\", plot.title = \"Viridis\")\np5 <- SCpubr::do_FeaturePlot(sample = sample, features = \"CD14\", viridis_color_map = \"E\", plot.title = \"Cividis\")\np6 <- SCpubr::do_FeaturePlot(sample = sample, features = \"CD14\", viridis_color_map = \"F\", plot.title = \"Rocket\")\np7 <- SCpubr::do_FeaturePlot(sample = sample, features = \"CD14\", viridis_color_map = \"G\", plot.title = \"Mako\")\np8 <- SCpubr::do_FeaturePlot(sample = sample, features = \"CD14\", viridis_color_map = \"H\", plot.title = \"Turbo\")\n\np <- patchwork::wrap_plots(list(p1, p2, p3, p4, p5, p6, p7, p8), ncol = 2, byrow = TRUE)\np"},{"path":"nebulosa-plots.html","id":"nebulosa-plots","chapter":"3 Nebulosa plots","heading":"3 Nebulosa plots","text":"plot comes straight Nebulosa package. information, vignette. short, computes “density” whether surrounding cells (UMAP embedding) also express variable provide function, variables one feed Seurat::FeaturePlot(). default plot looks like:","code":""},{"path":"nebulosa-plots.html","id":"basic-usage-2","chapter":"3 Nebulosa plots","heading":"3.1 Basic usage","text":"\nFigure 1.1: Nebulosa plot\nway, know clusters enriched CD14, also know regions highest density cells expressing . Minor modifications, line rest plots, applied SCpubr:\nFigure 1.2: SCpubr Nebulosa plot.\n, type visualization becomes natural partner `Seurat::FeaturePlot()’ able visualize expression variable, also query density surrounding cells. example:\nFigure 1.3: SCpubr FeaturePlot NebulosaPlot.\nNebulosa package also offers option query multiple features time:\nFigure 1.4: SCpubr Nebulosa plot multiple features.\n, intriguingly, can also compute joint density features. achieved parsing joint = TRUE.\nFigure 1.5: SCpubr Nebulosa plot joint density\ninterested retrieving joint density plot, can accomplish return_only_joint parameter. Please note , since return one plot, wanted modify plot title, use plot.title instead:\nFigure 1.6: SCpubr Nebulosa plot joint density, selecting last plot\nquery multiple features use joint = TRUE, using plot.title add general title different panels generated. modify plot title individual panel, vector length number features needs provided individual.titles parameter. case title need changed, use NA instead. Please take note joint = TRUE generate extra panel needs another plot title.\nFigure 1.7: SCpubr Nebulosa plot joint density, modifying individual plot’s name\n","code":"\np <- Nebulosa::plot_density(sample,\n                            features = \"CD14\")\np\np <- SCpubr::do_NebulosaPlot(sample = sample, \n                             features = \"CD14\")\np\np1 <- SCpubr::do_FeaturePlot(sample = sample, \n                             features = \"CD14\") \np2 <- SCpubr::do_NebulosaPlot(sample = sample, \n                              features = \"CD14\")\np1 | p2\np <- SCpubr::do_NebulosaPlot(sample, \n                             features = c(\"CD14\", \"CD8A\"))\np\np <- SCpubr::do_NebulosaPlot(sample = sample, \n                             features = c(\"CD14\", \"CD8A\"), \n                             joint = TRUE)\np \nfeatures.use <- c(\"CD14\", \"CD8A\")\n\np <- SCpubr::do_NebulosaPlot(sample = sample, \n                             features = c(\"CD14\", \"CD8A\"), \n                             joint = TRUE, \n                             return_only_joint = TRUE,\n                             plot.title = \"Joint density CD14-CD8A\")\n\np\np <- SCpubr::do_NebulosaPlot(sample = sample, \n                             features = c(\"CD14\", \"CD8A\"), \n                             joint = TRUE, \n                             individual.titles = c(\"Plot A\",\n                                                   NA,\n                                                   \"Combined density\"),\n                             plot.title = \"Density analysis\")\np"},{"path":"nebulosa-plots.html","id":"modify-color-maps-1","chapter":"3 Nebulosa plots","heading":"3.2 Modify color maps","text":"SCpubr::do_FeaturePlot(), also change color map plot one eight possible ones defined viridis. achieved using viridis_color_map parameter color map name code (capital letter). Options :- magma color map.B - inferno color map.C - plasma color map.D - viridis color map.E - cividis color map.F - rocket color map.G - mako color map.H - turbo color map.\nFigure 1.8: SCpubr Nebulosa plot modifying viridis color maps.\n","code":"\np1 <- SCpubr::do_NebulosaPlot(sample = sample, features = \"CD8A\", viridis_color_map = \"A\", plot.title = \"Magma\")\np2 <- SCpubr::do_NebulosaPlot(sample = sample, features = \"CD8A\", viridis_color_map = \"B\", plot.title = \"Inferno\")\np3 <- SCpubr::do_NebulosaPlot(sample = sample, features = \"CD8A\", viridis_color_map = \"C\", plot.title = \"Plasma\")\np4 <- SCpubr::do_NebulosaPlot(sample = sample, features = \"CD8A\", viridis_color_map = \"D\", plot.title = \"Viridis\")\np5 <- SCpubr::do_NebulosaPlot(sample = sample, features = \"CD8A\", viridis_color_map = \"E\", plot.title = \"Cividis\")\np6 <- SCpubr::do_NebulosaPlot(sample = sample, features = \"CD8A\", viridis_color_map = \"F\", plot.title = \"Rocket\")\np7 <- SCpubr::do_NebulosaPlot(sample = sample, features = \"CD8A\", viridis_color_map = \"G\", plot.title = \"Mako\")\np8 <- SCpubr::do_NebulosaPlot(sample = sample, features = \"CD8A\", viridis_color_map = \"H\", plot.title = \"Turbo\")\n\np <- patchwork::wrap_plots(list(p1, p2, p3, p4, p5, p6, p7, p8), ncol = 2, byrow = TRUE)\np"},{"path":"bee-swarm-plots.html","id":"bee-swarm-plots","chapter":"4 Bee Swarm plots","heading":"4 Bee Swarm plots","text":"one interesting plot. stems idea can order (rank) cells given variable. variable continuous variable, better representation. order goes lowest maximum value. , cells grouped variable interest displayed scatter plot fashion. achieved using ggbeeswarm package. idea using ggbeeswarm::geom_quasirandom() geometry provided package implement single-cell analyses came tutorial Broad Institute.","code":""},{"path":"bee-swarm-plots.html","id":"using-categorical-variables","chapter":"4 Bee Swarm plots","heading":"4.1 Using categorical variables","text":"Let’s say want focus much cluster driven PC_1 PC_2. first thought just use SCpubr::do_Dimplot() plot PCA embedding instead UMAP. also query PC_3 PC_4 --clear example.\nFigure 1.1: Plotting PCA embeddings SCpubr::do_DimPlot()\n, get right away decent overview. Clusters 0, 5, 7 8 separate PC_1 rest. However, many cases clear, image right. Bee Swarm plots come handy. implemented SCpubr::do_BeeSwarmPlot(). function needs user provide:\n- variable rank feature_to_rank.\n- groups divide plot group..\n- Whether output colored categorical continuous scale, continuous_feature.\nFigure 1.2: SCpubr Bee Swarm plots categorical variables.\n, selected PC_1 PC_4. can observe X axis Bee Swarm plot displays ordering (rank) cells across selected feature. Focusing PC_1, can see cluster 0 completely shifted right PC_1, nicely displayed Bee Swarm plot cells also ranked high (higher rank, bigger “value” feature rank, case, PC_1 value). case PC_4, Bee Swarm plot nicely shows clusters lay upper, lower middle part PC_4.important thing note kind plots cells rank. , imagine scenario like PC_4, artificially remove clusters 0, 3, 5, 7, 8, 9, leaving forming “straight line” PC_4. nature plot also separate remaining clusters:\nFigure 1.3: SCpubr Bee Swarm plots similar values.\nSee, still clearly see two groups, formed clusters 1 2, clusters 4 6. even remove clusters 1 2 still see similar effect.\nFigure 1.4: SCpubr Bee Swarm plots almost identical values.\ncan seen , clusters now span X axis. cells still ranked, therefore showing cloud dots. , just want , data visualization technique, plot comes set benefits caveats. visualization suffers trying plot highly similar values. Therefore, key understand nature variable want rank beforehand.","code":"\np1 <- SCpubr::do_DimPlot(sample, \n                         reduction = \"pca\", \n                         label = T, \n                         legend = F, \n                         dims = c(1, 2)) \np2 <- SCpubr::do_DimPlot(sample, \n                         reduction = \"pca\", \n                         label = T, \n                         legend = F, \n                         dims = c(3, 4)) \n\np1 | p2\np1 <- SCpubr::do_DimPlot(sample = sample, \n                         reduction = \"pca\", \n                         label = T, \n                         legend = F, \n                         dims = c(1, 2))\n\np2 <- SCpubr::do_DimPlot(sample = sample, \n                         reduction = \"pca\", \n                         label = T, \n                         legend = F, \n                         dims = c(3, 4)) \n\np3 <- SCpubr::do_BeeSwarmPlot(sample = sample, \n                              feature_to_rank = \"PC_1\", \n                              group.by = \"seurat_clusters\", \n                              continuous_feature = F)\n\np4 <- SCpubr::do_BeeSwarmPlot(sample = sample, \n                              feature_to_rank = \"PC_4\", \n                              group.by = \"seurat_clusters\", \n                              continuous_feature = F)\n\n(p1 | p3) / (p2 | p4)\n# Clusters to exclude.\nclusters_exclude <- c(\"0\", \"3\", \"5\", \"7\", \"8\", \"9\")\n\n# Keep the original coloring.\ncols.use <- colortools::setColors(\"steelblue\", \n                                  length(levels(sample)))\nnames(cols.use) <- levels(sample)\n\n# Only provide the needed colors. If more are provided, an error is thrown.\ncols.use <- cols.use[!(names(cols.use) %in% clusters_exclude)]\n\np1 <- SCpubr::do_DimPlot(sample = sample[, !(sample$seurat_clusters %in% clusters_exclude)], \n                         reduction = \"pca\", \n                         label = T, \n                         legend = F, \n                         dims = c(3, 4), \n                         colors.use = cols.use) \np2 <- SCpubr::do_BeeSwarmPlot(sample = sample[, !(sample$seurat_clusters %in% clusters_exclude)], \n                              feature_to_rank = \"PC_4\", \n                              group.by = \"seurat_clusters\", \n                              continuous_feature = F, \n                              colors.use = cols.use)\n\np1 | p2\n# Clusters to exclude.\nclusters_exclude <- c(\"0\", \"1\", \"2\", \"3\", \"5\", \"7\", \"8\", \"9\")\n\n# Keep the original coloring.\ncols.use <- colortools::setColors(\"steelblue\", length(levels(sample)))\nnames(cols.use) <- levels(sample)\n\n# Only provide the needed colors. If more are provided, an error is thrown.\ncols.use <- cols.use[!(names(cols.use) %in% clusters_exclude)]\n\n\np1 <- SCpubr::do_DimPlot(sample = sample[, !(sample$seurat_clusters %in% clusters_exclude)], \n                         reduction = \"pca\", \n                         label = T, \n                         legend = F, \n                         dims = c(3, 4), \n                         colors.use = cols.use) \np2 <- SCpubr::do_BeeSwarmPlot(sample = sample[, !(sample$seurat_clusters %in% clusters_exclude)], \n                              feature_to_rank = \"PC_4\", \n                              group.by = \"seurat_clusters\", \n                              continuous_feature = F, \n                              colors.use = cols.use)\n\np1 | p2"},{"path":"bee-swarm-plots.html","id":"using-continuous-variables","chapter":"4 Bee Swarm plots","heading":"4.2 Using continuous variables","text":"also scenarios want rank cells continuous variable, instead showing colors group (anyway depicted Y axis), want introduce continuous color scale. specially interesting assess enrichment clusters towards given set features.\nFigure 1.5: Using continuous color scale SCpubr::do_BeeSwarmPlot().\nusing combination figures, can also assess monocyte signature seems predominantly enriched clusters 0 7.","code":"\n# Set up list of a genes to compute enrichment. Let's use a monocyte signature.\ngenes.use <- c(\"CD14\", \"LYZ\")\n\n# Compute enrichment and rename the output.\nsample <- Seurat::AddModuleScore(sample, \n                                 features = genes.use, \n                                 name = \"Monocyte_signature\")\nsample$Monocyte_signature <- sample$Monocyte_signature1\nsample$Monocyte_signature1 <- NULL\n\np1 <- SCpubr::do_DimPlot(sample = sample, \n                         label = T, \n                         legend = F)\np2 <- SCpubr::do_FeaturePlot(sample = sample, \n                             features = \"Monocyte_signature\") \np3 <- SCpubr::do_BeeSwarmPlot(sample = sample, \n                              feature_to_rank = \"Monocyte_signature\", \n                              group.by = \"seurat_clusters\", \n                              continuous_feature = T)\np1 | p2 | p3"},{"path":"bee-swarm-plots.html","id":"change-default-colors-in-categorical-variables","chapter":"4 Bee Swarm plots","heading":"4.3 Change default colors in categorical variables","text":"categorical representations, can modify default color palette providing custom one colors.use. named vector HEX values names groups names values:\nFigure 1.6: SCpubr, modifying default colors Bee Swarm plot\n","code":"\n# Create a color scale for the unique values in seurat clusters.\ncolors <- c(\"0\" = \"#001219\",\n            \"1\" = \"#005f73\",\n            \"2\" = \"#0a9396\",\n            \"3\" = \"#94d2bd\",\n            \"4\" = \"#e9d8a6\",\n            \"5\" = \"#ee9b00\",\n            \"6\" = \"#ca6702\",\n            \"7\" = \"#bb3e03\",\n            \"8\" = \"#ae2012\",\n            \"9\" = \"#9b2226\")\n\np <- SCpubr::do_BeeSwarmPlot(sample = sample, \n                             feature_to_rank = \"Monocyte_signature\", \n                             group.by = \"seurat_clusters\",\n                             colors.use = colors)\np"},{"path":"bee-swarm-plots.html","id":"modify-color-maps-for-continuous-variables","chapter":"4 Bee Swarm plots","heading":"4.4 Modify color maps for continuous variables","text":"SCpubr::do_FeaturePlot(), also change color map plot one eight possible ones defined viridis. achieved using viridis_color_map parameter color map name code (capital letter). Options :- magma color map.B - inferno color map.C - plasma color map.D - viridis color map.E - cividis color map.F - rocket color map.G - mako color map.H - turbo color map.\nFigure 1.7: SCpubr Nebulosa plot modifying viridis color maps.\n","code":"\np1 <- SCpubr::do_BeeSwarmPlot(sample = sample, feature_to_rank = \"Monocyte_signature\", group.by = \"seurat_clusters\", continuous_feature = TRUE, fontsize = 10, viridis_color_map = \"A\", plot.title = \"Magma\")\np2 <- SCpubr::do_BeeSwarmPlot(sample = sample, feature_to_rank = \"Monocyte_signature\", group.by = \"seurat_clusters\", continuous_feature = TRUE, fontsize = 10, viridis_color_map = \"B\", plot.title = \"Inferno\")\np3 <- SCpubr::do_BeeSwarmPlot(sample = sample, feature_to_rank = \"Monocyte_signature\", group.by = \"seurat_clusters\", continuous_feature = TRUE, fontsize = 10, viridis_color_map = \"C\", plot.title = \"Plasma\")\np4 <- SCpubr::do_BeeSwarmPlot(sample = sample, feature_to_rank = \"Monocyte_signature\", group.by = \"seurat_clusters\", continuous_feature = TRUE, fontsize = 10, viridis_color_map = \"D\", plot.title = \"Viridis\")\np5 <- SCpubr::do_BeeSwarmPlot(sample = sample, feature_to_rank = \"Monocyte_signature\", group.by = \"seurat_clusters\", continuous_feature = TRUE, fontsize = 10, viridis_color_map = \"E\", plot.title = \"Cividis\")\np6 <- SCpubr::do_BeeSwarmPlot(sample = sample, feature_to_rank = \"Monocyte_signature\", group.by = \"seurat_clusters\", continuous_feature = TRUE, fontsize = 10, viridis_color_map = \"F\", plot.title = \"Rocket\")\np7 <- SCpubr::do_BeeSwarmPlot(sample = sample, feature_to_rank = \"Monocyte_signature\", group.by = \"seurat_clusters\", continuous_feature = TRUE, fontsize = 10, viridis_color_map = \"G\", plot.title = \"Mako\")\np8 <- SCpubr::do_BeeSwarmPlot(sample = sample, feature_to_rank = \"Monocyte_signature\", group.by = \"seurat_clusters\", continuous_feature = TRUE, fontsize = 10, viridis_color_map = \"H\", plot.title = \"Turbo\")\n\np <- patchwork::wrap_plots(list(p1, p2, p3, p4, p5, p6, p7, p8), ncol = 2, byrow = TRUE)\np"},{"path":"violin-plots.html","id":"violin-plots","chapter":"5 Violin plots","heading":"5 Violin plots","text":"Violin plots require little description. depiction distribution variable. makes ideal order show differential enrichment patterns alongside different groups. , also included Seurat Seurat::VlnPlot() function. first time new user encounters function likely going querying different QC paramters, number UMIs, number genes percentage mitochondrial RNA. looks number UMIs:","code":""},{"path":"violin-plots.html","id":"basic-usage-3","chapter":"5 Violin plots","heading":"5.1 Basic usage","text":"\nFigure 1.1: Seurat’s violin plot.\none thing really stands , indeed, extra dots plotted alongside violin plot. Since dot represent cell, quickly becomes dominant feature figure. One can play alpha dots reduce presence:\nFigure 1.2: Seurat’s violin plot transparent dots.\nstill, making dots almost invisible, still observe dominance bigger clusters. Therefore, ’s better remove . , together modifications basis SCpubr::do_VlnPlot(). default plot looks like:\nFigure 1.3: SCpubr’s violin plot.\naddition removing dots, boxplot added violin shape, get better sense quantiles distribution. effect can removed using plot_boxplot = FALSE. Also, legend default removed, groups displayed already X axis.\nFigure 1.4: SCpubr’s violin plot without box plots.\nwant rotate X axis labels, can also providing rotate_x_labels = TRUE/FALSE:\nFigure 1.5: SCpubr’s violin plot rotating x axis.\ncan also specific violin plots one feature queried. , rotate_x_labels vector logical values (TRUE FALSE) length equal number features.\nFigure 1.6: SCpubr’s violin plot rotating x axis.\nHowever, please note names current identities long enough, result overlapping one another.","code":"\np <- Seurat::VlnPlot(sample, \n                     features = \"nCount_RNA\")\np\np <- Seurat::VlnPlot(sample, \n                     features = \"nCount_RNA\")\n# \"Surgically\" add the alpha parameter in the ggplot2 object.\np$layers[[2]]$aes_params$alpha <- 0.05\np\np <- SCpubr::do_VlnPlot(sample = sample, \n                        features = \"nCount_RNA\")\np\np <- SCpubr::do_VlnPlot(sample = sample, \n                        features = \"nCount_RNA\",\n                        plot_boxplot = FALSE)\np\np <- SCpubr::do_VlnPlot(sample = sample, \n                        features = c(\"nCount_RNA\"),\n                        rotate_x_labels = TRUE,)\np\np <- SCpubr::do_VlnPlot(sample = sample, \n                        features = c(\"nCount_RNA\", \"nFeature_RNA\"),\n                        rotate_x_labels = c(FALSE, TRUE),\n                        ncol = 1)\np"},{"path":"violin-plots.html","id":"violin-plots-as-a-means-of-qc","chapter":"5 Violin plots","heading":"5.2 Violin plots as a means of QC","text":"QC analyses, users might want also add features line indicating put cutoff. can achieved using y_cut parameter. Currently, one value per plot y_cut can used.\nFigure 1.7: SCpubr’s violin plot horizontal line.\nmultiple features queried, user can set different horizontal lines parsing vector y_cut. Also, can achieved individual plot titles using individual.titles parameter. restriction, vector length number features. particular plot, want modify anything, use NA instead.\nFigure 1.8: SCpubr’s violin plot multiple features.\n","code":"\np <- SCpubr::do_VlnPlot(sample = sample, \n                        features = \"nCount_RNA\", \n                        y_cut = 30000)\np\np <- SCpubr::do_VlnPlot(sample = sample, \n                        features = c(\"nCount_RNA\", \"nFeature_RNA\"), \n                        y_cut = c(NA, 5000), \n                        individual.titles = c(\"UMIs\", NA),\n                        ncol = 1)\np"},{"path":"violin-plots.html","id":"modifying-default-colors-1","chapter":"5 Violin plots","heading":"5.3 Modifying default colors","text":"categorical representations, can modify default color palette providing custom one colors.use. named vector HEX values names groups names values:\nFigure 1.9: SCpubr, modifying default colors Violin plot\n","code":"\n# Create a color scale for the unique values in seurat clusters.\ncolors <- c(\"0\" = \"#001219\",\n            \"1\" = \"#005f73\",\n            \"2\" = \"#0a9396\",\n            \"3\" = \"#94d2bd\",\n            \"4\" = \"#e9d8a6\",\n            \"5\" = \"#ee9b00\",\n            \"6\" = \"#ca6702\",\n            \"7\" = \"#bb3e03\",\n            \"8\" = \"#ae2012\",\n            \"9\" = \"#9b2226\")\n\np <- SCpubr::do_VlnPlot(sample = sample, \n                        features = \"nCount_RNA\",\n                        colors.use = colors)\np"},{"path":"dot-plots.html","id":"dot-plots","chapter":"6 Dot plots","heading":"6 Dot plots","text":"Dot plots nice data representation technique. involves use two scales. One scale color-based second one size-based. context Seurat::DotPlot(), scales pre-defined contain average expression values color scale percentage cells within group expressing feature size, increasing percentage grows bigger. heavily implied features need genes, otherwise color scale lost. output Seurat:","code":""},{"path":"dot-plots.html","id":"basic-usage-4","chapter":"6 Dot plots","heading":"6.1 Basic usage","text":"\nFigure 1.1: Seurat DotPlot\ncan seen, try plot type variables, resulting plot contain color scale. SCpubr::do_DimPlot() focuses enhancing overall appearance plots. Implementation using types features currently supported. looks using SCpubr::do_DimPlot():\nFigure 1.2: SCpubr DotPlot\n","code":"\np1 <- Seurat::DotPlot(sample, \n                      features = \"CD14\")\np2 <- Seurat::DotPlot(sample, \n                      features = \"nCount_RNA\")\np1 | p2\np1 <- SCpubr::do_DotPlot(sample = sample, \n                         features = \"CD14\")\np2 <- SCpubr::do_DotPlot(sample = sample, \n                         features = \"nFeature_RNA\")\np1 | p2"},{"path":"dot-plots.html","id":"querying-multiple-features-at-once.","chapter":"6 Dot plots","heading":"6.2 Querying multiple features at once.","text":"true power data visualization relies querying multiple genes . Let’s query ones described Seurat vignette:\nFigure 1.3: SCpubr DotPlot using multiple genes\n, can clearly distinguish clusters highly enriched given genes. proves interesting way query cluster identities. highly dependent, though, accuracy selected genes queried dataset. actually provide list genes named list, can facet plot different list genes provided:\nFigure 1.4: SCpubr DotPlot using multiple genes\n","code":"\ngenes <- c(\"IL7R\", \"CCR7\", \"CD14\", \"LYZ\", \n           \"S100A4\", \"MS4A1\", \"CD8A\", \"FCGR3A\", \n           \"MS4A7\", \"GNLY\", \"NKG7\", \"FCER1A\", \n           \"CST3\", \"PPBP\")\np <- SCpubr::do_DotPlot(sample = sample, \n                        features = genes)\np\ngenes <- list(\"Naive CD4+ T\" = c(\"IL7R\", \"CCR7\"),\n              \"CD14+ Mono\" = c(\"CD14\", \"LYZ\"),\n              \"Memory CD4+\" = c(\"S100A4\"),\n              \"B\" = c(\"MS4A1\"),\n              \"CD8+ T\" = c(\"CD8A\"),\n              \"FCGR3A+ Mono\" = c(\"FCGR3A\", \"MS4A7\"),\n              \"NK\" = c(\"GNLY\", \"NKG7\"),\n              \"DC\" = c(\"FCER1A\", \"CST3\"),\n              \"Platelet\" = c(\"PPBP\"))\np <- SCpubr::do_DotPlot(sample = sample, \n                        features = genes)\np"},{"path":"dot-plots.html","id":"clustering-the-identities.","chapter":"6 Dot plots","heading":"6.3 Clustering the identities.","text":"One really cool feature Seurat::DotPlot() lets cluster identities Y axis depending similar across values X axis. achieved using cluster.idents = TRUE, parameter also implemented SCpubr::do_DotPlot():\nFigure 1.5: SCpubr DotPlot using multiple genes clustering identities\n","code":"\ngenes <- list(\"Naive CD4+ T\" = c(\"IL7R\", \"CCR7\"),\n              \"CD14+ Mono\" = c(\"CD14\", \"LYZ\"),\n              \"Memory CD4+\" = c(\"S100A4\"),\n              \"B\" = c(\"MS4A1\"),\n              \"CD8+ T\" = c(\"CD8A\"),\n              \"FCGR3A+ Mono\" = c(\"FCGR3A\", \"MS4A7\"),\n              \"NK\" = c(\"GNLY\", \"NKG7\"),\n              \"DC\" = c(\"FCER1A\", \"CST3\"),\n              \"Platelet\" = c(\"PPBP\"))\np1 <- SCpubr::do_DotPlot(sample = sample, \n                         features = genes,\n                         plot.title = \"Not clustered\")\np2 <- SCpubr::do_DotPlot(sample = sample, \n                         features = genes, \n                         cluster.idents = TRUE, \n                         plot.title = \"Clustered\")\np1 / p2"},{"path":"dot-plots.html","id":"inverting-the-axes.","chapter":"6 Dot plots","heading":"6.4 Inverting the axes.","text":"SCpubr::do_DotPlot(), can also invert axes, groups X axis genes Y axis. achieved using flip = TRUE. Note, however, work using named list genes input, completely distort way facets computed. Given , combination parameters currently blocked SCpubr.\nFigure 1.6: SCpubr DotPlot using multiple genes clustering identities flipping axes\n","code":"\ngenes <- c(\"IL7R\", \"CCR7\", \"CD14\", \"LYZ\", \n           \"S100A4\", \"MS4A1\", \"CD8A\", \"FCGR3A\", \n           \"MS4A7\", \"GNLY\", \"NKG7\", \"FCER1A\", \n           \"CST3\", \"PPBP\")\np1 <- SCpubr::do_DotPlot(sample = sample, \n                         features = genes, \n                         plot.title = \"Not clustered\", \n                         flip = T)\np2 <- SCpubr::do_DotPlot(sample = sample, \n                         features = genes, \n                         cluster.idents = TRUE, \n                         plot.title = \"Clustered\", \n                         flip = T)\np1 | p2"},{"path":"dot-plots.html","id":"modifying-default-colors.","chapter":"6 Dot plots","heading":"6.5 Modifying default colors.","text":"modify default colors, vector two colors provided colors.use. two colors form gradient.\nFigure 1.7: SCpubr, modifying default colors Dot plot\n","code":"\ngenes <- c(\"IL7R\", \"CCR7\", \"CD14\", \"LYZ\", \n           \"S100A4\", \"MS4A1\", \"CD8A\", \"FCGR3A\", \n           \"MS4A7\", \"GNLY\", \"NKG7\", \"FCER1A\", \n           \"CST3\", \"PPBP\")\np <- SCpubr::do_DotPlot(sample = sample, \n                        features = genes,\n                        colors.use = c(\"#001219\", \"#e9d8a6\"))\np"},{"path":"bar-plots.html","id":"bar-plots","chapter":"7 Bar plots","heading":"7 Bar plots","text":"Bar plots another well known data representation. handy resource plot summary statistics QC part single-cell analysis. Consequently, part SCpubr, available SCpubr::do_BarPlot(). Let’s say interested plotting different number cells cluster.","code":""},{"path":"bar-plots.html","id":"basic-usage-5","chapter":"7 Bar plots","heading":"7.1 Basic usage","text":"\nFigure 1.1: SCpubr Bar plots, plotting single variables\nUsing SCpubr::do_BarPlot() features yields simple bar plot ordered descending value. can also set direction bars horizontal = TRUE/FALSE, default set vertical underlying assumptions taken generate plots:values features need metadata variables, stored object@meta.data. design choice, data need grouped using dplyr tidyr. also later apply values provided group..feature provided need clear rather small number groups. good estimate assess querying feature table, table(sample@meta.data[, feature]).Focusing last point, happen choose feature high number unique values:\nFigure 1.2: SCpubr Bar plots, choosing wrong variable\nhappens, precisely, high amount unique values nCount_RNA. type continuous values best suited data visualizations like histogram.","code":"\np1 <- SCpubr::do_BarPlot(sample = sample, \n                         features = \"seurat_clusters\", \n                         legend = F, \n                         plot.title = \"Number of cells per cluster\")\np2 <- SCpubr::do_BarPlot(sample = sample, \n                         features = \"seurat_clusters\", \n                         legend = F, \n                         plot.title = \"Number of cells per cluster\", \n                         horizontal = T)\np1 | p2\n\np <- SCpubr::do_BarPlot(sample = sample, \n                        features = \"nCount_RNA\", \n                        legend = F, \n                        plot.title = \"Number of UMIs?\",\n                        horizontal = F)\np"},{"path":"bar-plots.html","id":"grouping-by-a-second-variable","chapter":"7 Bar plots","heading":"7.2 Grouping by a second variable","text":"Let’s expand previous example number cells per cluster. interested , like profile many cells cluster present unique samples present Seurat object? , need provide SCpubr::do_BarPlot() second parameter, group., tackles want feature grouped:\nFigure 1.3: SCpubr Bar plots, introducing variable group values \ncan see, nicely yields many number bars unique values feature, bars segmented many times unique values group.. first, hard grasp, helps thinking two parameters, used together, :feature: want show different bars.group.: Secondary variable bars generated feature can subdivided.Another interesting parameter introduced last example position. Position can either stack fill. difference position = \"stack\" yield total number cells unique values feature, position = \"fill\" bring bars height split bar proportions within bar different groups (one group.= NULL many groups group.used). Therefore, becomes highly recommended use position = \"stack\" group.used position = \"fill\" otherwise. also warned package. want silence warnings, use verbose = FALSE.\nFigure 1.4: SCpubr Bar plots, difference position\n","code":"\n# We only have one value in orig.ident. Let's modify it so that it resembles a multi-sample Seurat object.\nsample$modified_orig.ident <- sample(x = c(\"Sample_A\", \"Sample_B\", \"Sample_C\"), \n                                     size = ncol(sample), \n                                     replace = T, \n                                     prob = c(0.2, 0.7, 0.1))\n\np1 <- SCpubr::do_BarPlot(sample, \n                         features = \"modified_orig.ident\",\n                         plot.title = \"Number of cells per sample\",\n                         position = \"stack\",\n                         legend = T,\n                         horizontal = F)\n\np2 <- SCpubr::do_BarPlot(sample, \n                         features = \"modified_orig.ident\", \n                         group.by = \"seurat_clusters\",\n                         plot.title = \"Number of cells per cluster and sample\",\n                         position = \"stack\",\n                         legend = T,\n                         horizontal = F)\np1 | p2\n# We are going to use the previously generated sample assignment.\n\np1 <- SCpubr::do_BarPlot(sample, \n                         features = \"modified_orig.ident\",\n                         plot.title = \"Without group.by - position = stack\",\n                         position = \"stack\",\n                         legend = T,\n                         horizontal = F)\n\np2 <- SCpubr::do_BarPlot(sample, \n                         features = \"modified_orig.ident\",\n                         plot.title = \"Without group.by - position = fill\",\n                         position = \"fill\",\n                         legend = T,\n                         horizontal = F)\n\np3 <- SCpubr::do_BarPlot(sample, \n                         features = \"modified_orig.ident\",\n                         group.by = \"seurat_clusters\",\n                         plot.title = \"With group.by - position = stack\",\n                         position = \"stack\",\n                         legend = T,\n                         horizontal = F)\n\np4 <- SCpubr::do_BarPlot(sample, \n                         features = \"modified_orig.ident\",\n                         group.by = \"seurat_clusters\",\n                         plot.title = \"With group.by - position = fill\",\n                         position = \"fill\",\n                         legend = T,\n                         horizontal = F)\np <- (p1 | p2) / (p3 | p4)\np"},{"path":"bar-plots.html","id":"reordering-columns-based-on-a-single-entity","chapter":"7 Bar plots","heading":"7.3 Reordering columns based on a single entity","text":"One advanced use bar plots, useful one reorder columns based single entity descending order. works group.set best position = \"fill\". instance, imagine scenario heavily interested cluster 1, want reorder columns based . achieved providing order.parameter SCpubr::do_BarPlot(). value order.necessary one unique values group.. Therefore, best practice, one want generate bar plots without using order.decide. Let’s also, sake example, modify proportions cluster 1 becomes really evident. looks:\nFigure 1.5: SCpubr Bar plots, reordering colums using order.\n","code":"\n# Modify proportions. \nsample$modified_seurat_clusters <- as.character(sample$seurat_clusters)\nsample$modified_seurat_clusters[sample$modified_orig.ident == \"Sample_A\" & sample$modified_seurat_clusters %in% c(\"0\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\")] <- \"1\"\n\np1 <- SCpubr::do_BarPlot(sample, \n                         features = \"modified_orig.ident\",\n                         group.by = \"modified_seurat_clusters\",\n                         plot.title = \"Number of cells per sample\",\n                         order.by = \"1\",\n                         position = \"stack\",\n                         legend = T,\n                         horizontal = F)\n\np2 <- SCpubr::do_BarPlot(sample, \n                         features = \"modified_orig.ident\", \n                         group.by = \"modified_seurat_clusters\",\n                         plot.title = \"Number of cells per cluster and sample\",\n                         order.by = \"1\",\n                         position = \"fill\",\n                         legend = T,\n                         horizontal = F)\np1 | p2"},{"path":"bar-plots.html","id":"adding-the-exact-values-to-the-bars","chapter":"7 Bar plots","heading":"7.4 Adding the exact values to the bars","text":"Sometimes, interested displaying bars also reporting exact number bar. can achieved using add.summary_labels = TRUE:\nFigure 1.6: SCpubr, Adding labels bars\nsize labels can adjusted using size.labels. default value 3. value changes size quite drastically. Modification low ammounts reccomended.\nFigure 1.7: SCpubr, Modifying size labels bars\nusing combination group., also adds value top bar:\nFigure 1.8: SCpubr, Adding labels bars grouped another variable\nalso interested adding labels bar sugroups, can using add.subgroup_labels = TRUE:\nFigure 1.9: SCpubr, Adding labels bars subgroups grouped another variable\ncan observed, type labelling situational highly depends overall structure bars whether feasible plot many labels. order ease cluttering, one can pass repel.subroup_labels = TRUE avoid overlapping group labels (colored ones inside bars).\nFigure 1.10: SCpubr, Relocating group labels\nalso want summary labels (ones black top bar) relocate, can use repel.summary_labels = TRUE. combination parameters designed grant user freedom keep either two groups labels centered make either group appear disappear (bar plot different scenario sometimes might viable option).\nFigure 1.11: SCpubr, Adding relocating bars\ntime , labelling feature available position = \"stack\".","code":"\n\np1 <- SCpubr::do_BarPlot(sample = sample, \n                         features = \"seurat_clusters\", \n                         legend = FALSE,\n                         add.summary_labels = TRUE)\np2 <- SCpubr::do_BarPlot(sample = sample, \n                         features = \"seurat_clusters\", \n                         legend = FALSE,\n                         horizontal = TRUE,\n                         add.summary_labels = TRUE)\np1 | p2\n\np1 <- SCpubr::do_BarPlot(sample = sample, \n                         features = \"seurat_clusters\", \n                         legend = FALSE,\n                         add.summary_labels = TRUE,\n                         size.labels = 2.5)\np2 <- SCpubr::do_BarPlot(sample = sample, \n                         features = \"seurat_clusters\", \n                         legend = FALSE,\n                         horizontal = TRUE,\n                         add.summary_labels = TRUE,\n                         size.labels = 2.5)\np1 | p2\np1 <- SCpubr::do_BarPlot(sample = sample, \n                         features = \"seurat_clusters\",\n                         group.by = \"modified_orig.ident\",\n                         legend = TRUE,\n                         add.summary_labels = TRUE)\np2 <- SCpubr::do_BarPlot(sample = sample, \n                         features = \"seurat_clusters\",\n                         group.by = \"modified_orig.ident\", \n                         legend = TRUE,\n                         horizontal = TRUE,\n                         add.summary_labels = TRUE)\np1 | p2\np1 <- SCpubr::do_BarPlot(sample = sample, \n                         features = \"seurat_clusters\",\n                         group.by = \"modified_orig.ident\",\n                         legend = TRUE,\n                         add.summary_labels = TRUE,\n                         add.subgroup_labels = TRUE)\np2 <- SCpubr::do_BarPlot(sample = sample, \n                         features = \"seurat_clusters\",\n                         group.by = \"modified_orig.ident\", \n                         legend = TRUE,\n                         horizontal = TRUE,\n                         add.summary_labels = TRUE,\n                         add.subgroup_labels = TRUE)\np1 | p2\np1 <- SCpubr::do_BarPlot(sample = sample, \n                         features = \"seurat_clusters\",\n                         group.by = \"modified_orig.ident\",\n                         legend = TRUE,\n                         add.summary_labels = TRUE,\n                         add.subgroup_labels = TRUE,\n                         repel.subgroup_labels = TRUE)\np2 <- SCpubr::do_BarPlot(sample = sample, \n                         features = \"seurat_clusters\",\n                         group.by = \"modified_orig.ident\", \n                         legend = TRUE,\n                         horizontal = TRUE,\n                         add.summary_labels = TRUE,\n                         add.subgroup_labels = TRUE,\n                         repel.subgroup_labels = TRUE)\np1 | p2\np1 <- SCpubr::do_BarPlot(sample = sample, \n                         features = \"seurat_clusters\",\n                         group.by = \"modified_orig.ident\",\n                         legend = TRUE,\n                         add.summary_labels = TRUE,\n                         add.subgroup_labels = TRUE,\n                         repel.summary_labels = TRUE,\n                         repel.subgroup_labels = TRUE)\np2 <- SCpubr::do_BarPlot(sample = sample, \n                         features = \"seurat_clusters\",\n                         group.by = \"modified_orig.ident\",\n                         legend = TRUE,\n                         horizontal = TRUE,\n                         add.summary_labels = TRUE,\n                         add.subgroup_labels = TRUE,\n                         repel.summary_labels = TRUE,\n                         repel.subgroup_labels = TRUE)\np1 | p2"},{"path":"bar-plots.html","id":"adding-custom-color-scales.","chapter":"7 Bar plots","heading":"7.5 Adding custom color scales.","text":"necessary, colors plots can easily changed using colors.use parameter, requires named vector containing HEX codes colors show names unique values used color groups. one example:\nFigure 1.12: SCpubr, modifying colors\n","code":"\n# Create a color scale for the unique values in seurat clusters.\ncolors <- c(\"0\" = \"#001219\",\n            \"1\" = \"#005f73\",\n            \"2\" = \"#0a9396\",\n            \"3\" = \"#94d2bd\",\n            \"4\" = \"#e9d8a6\",\n            \"5\" = \"#ee9b00\",\n            \"6\" = \"#ca6702\",\n            \"7\" = \"#bb3e03\",\n            \"8\" = \"#ae2012\",\n            \"9\" = \"#9b2226\")\n\np1 <- SCpubr::do_BarPlot(sample = sample, \n                         features = \"seurat_clusters\", \n                         legend = FALSE, \n                         plot.title = \"Number of cells per cluster\", \n                         horizontal = TRUE, \n                         colors.use = colors)\np2 <- SCpubr::do_BarPlot(sample, \n                         features = \"modified_orig.ident\",\n                         group.by = \"seurat_clusters\",\n                         plot.title = \"With group.by - position = fill\",\n                         position = \"fill\",\n                         legend = TRUE,\n                         horizontal = FALSE,\n                         colors.use = colors)\np1 | p2"},{"path":"citation.html","id":"citation","chapter":"Citation","heading":"Citation","text":"cite SCpubr publications, please use:can also use following BibLaTeX entry:","code":"Blanco-Carmona, E. Generating publication ready visualizations \nfor Single Cell transcriptomics using SCpubr. bioRxiv (2022) \ndoi:10.1101/2022.02.28.482303.@article{blanco-carmona_generating_2022,\n    title = {Generating publication ready visualizations for Single Cell transcriptomics using {SCpubr}},\n    url = {https://www.biorxiv.org/content/early/2022/03/01/2022.02.28.482303},\n    doi = {10.1101/2022.02.28.482303},\n    abstract = {Single Cell transcriptomic analysis has become a widespread technology of choice when it comes to understanding the differences at a transcriptomic level in heterogeneous samples. As a consequence, a plethora of analysis tools have been published to tackle the different analysis steps from count matrix generation to downstream analysis. Many of them provide ways to generate visualizations of the data. While some design choices are made, it is a common practice to provide the user with visualizations as raw as possible so that they can be customized to the user needs. However, in many cases these final customization steps are either time consuming or demand a very specific set of skills. This problem is addressed by {SCpubr}, which sacrifices some of this initial freedom of choice in aesthetics to provide the user a more streamlined way of generating high quality Single Cell transcriptomic visualizations.Competing Interest {StatementThe} authors have declared no competing interest.},\n    journaltitle = {{bioRxiv}},\n    author = {Blanco-Carmona, Enrique},\n    date = {2022},\n    note = {Publisher: Cold Spring Harbor Laboratory\n\\_eprint: https://www.biorxiv.org/content/early/2022/03/01/2022.02.28.482303.full.pdf},\n}"}]
