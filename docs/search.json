[{"path":"index.html","id":"about-this-package","chapter":"About this package","heading":"About this package","text":" package aims provide streamlined way generating publication ready figures known single-cell visualizations. subjective term “aesthetically pleasant” can , set theme modifications implemented across different plot types. package also serves personal project, future prospects growth.\nrender example PDF bookdown::pdf_book, ’ll need install XeLaTeX. recommended install TinyTeX (includes XeLaTeX): https://yihui.org/tinytex/.","code":""},{"path":"installation-guide.html","id":"installation-guide","chapter":"Installation guide","heading":"Installation guide","text":"package can installed using following commands:packages needed order run different functions:colortoolsdplyrggbeeswarmggplot2ggpubrMatrixNebulosapatchworkpbapplypurrrrlangscalesSeuratstringrtidyrviridisAll packages can installed using following commands:interested running subset functions, SCpubr::state_dependencies() outputs different packages sources needed functions.","code":"\n# From CRAN:\n# Future sumission to CRAN.\n\n# From GitHub.\nif(!requireNamespace(\"devtools\", quietly = T)){\n  install.packages(\"devtools\") # If not installed.\n}\ndevtools::install_github(\"enblacar/SCpubr\")\n# Install CRAN packages.\ncran_packages <- c(\"colortools\",\n                   \"dplyr\",\n                   \"ggbeeswarm\",\n                   \"ggplot2\",\n                   \"ggpubr\",\n                   \"Matrix\",\n                   \"patchwork\",\n                   \"purrr\",\n                   \"rlang\",\n                   \"scales\",\n                   \"Seurat\",\n                   \"stringr\",\n                   \"tidyr\",\n                   \"viridis\")\ninstall.packages(cran_packages)\n\n# Install bioconductor packages.\nbioconductor_packages <- c(\"Nebulosa\")\nif (!require(\"BiocManager\", quietly = TRUE))\n    install.packages(\"BiocManager\")\n\nBiocManager::install(bioconductor_packages)\n# Will return the package dependencies for all functions.\nSCpubr::state_dependencies()\n\n# Will return the package dependencies for selected functions.\nSCpubr::state_dependencies(func_name = c(\"do_DimPlot\", \"do_Feature_Plot\"))\n\n# Will return the package dependencies of a single function.\nSCpubr::state_dependencies(func_name = \"do_DimPlot\")"},{"path":"dataset.html","id":"dataset","chapter":"Dataset","heading":"Dataset","text":"manual going use publicly available dataset containing 10K raw cells. following code used generate Seurat object ready plotting.","code":"\ncounts_path <- \"path_to_count_matrix\"\n\n# Path count matrix.\ncounts <- Seurat::Read10X(counts_path)\n# Create Seurat object.\nsample <- Seurat::CreateSeuratObject(counts = counts, project = \"10K_pbmc\")\n# Compute percentage of mithochondrial RNA.\nsample <- Seurat::PercentageFeatureSet(sample, pattern = \"^MT-\", col.name = \"percent.mt\")\n# Compute QC.\nmask1 <- sample$nCount_RNA >= 1000\nmask2 <- sample$nFeature_RNA >= 500\nmask3 <- sample$percent.mt <= 20\nmask <- mask1 & mask2 & mask3\nsample <- sample[, mask]\n# Normalize.\nsample <- Seurat::SCTransform(sample)\n\n# Dimensional reduction.\nsample <- Seurat::RunPCA(sample)\nsample <- Seurat::RunUMAP(sample, dims = 1:30)\n# Find clusters.\nsample <- Seurat::FindNeighbors(sample, dims = 1:30)\nsample <- Seurat::FindClusters(sample, resolution = 0.2)"},{"path":"dim-plots.html","id":"dim-plots","chapter":"1 Dim plots","heading":"1 Dim plots","text":"DimPlots , probably, one iconic visualizations Seurat. allows user visualize cells dimensional reduction embedding PCA UMAP. cells can , , colored desired groups. short, visualization allows user plot kind categorical data onto cells dimesional reduction embedding. achieved using Seurat::DimPlot() funtion:Overall, pretty neat visualization, quite changes one like implement. instance, shuffling cells overlap cells just due cluster names.Furthermore, one think need axes. , consensus, UMAPs shown plotting first UMAP component X axis second Y axis, showing becomes redundant, specially one can truly rely numbers shown scales.Right now, can observe couple things. First, dot size rather small. Let’s set 0.5.Still, legend seems rather small. Let’s increase ’s font size set bold can better read.also like add title plot, best describe ., naturally, like increase font size title put bold centered.Now, like modify color palette. palette bright colors, want something toned .legend right side seems , long cluster names? inevitable take lot space actual plot. Let’s better put bottom.Still, many columns legend. Let’s rearrange four columns.now legend icon sizes small! fix .now, plot looks much better polished default counterpart. , setting ground SCpubr::do_DimPlot().","code":"\nSeurat::DimPlot(sample)\nSeurat::DimPlot(sample, shuffle = T)\nSeurat::DimPlot(sample, shuffle = T) + Seurat::NoAxes()\nSeurat::DimPlot(sample, shuffle = T, pt.size = 0.5) + Seurat::NoAxes()\nSeurat::DimPlot(sample, shuffle = T, pt.size = 0.5) + \n  Seurat::NoAxes() +\n  ggplot2::theme(legend.text = ggplot2::element_text(size = 16, face = \"bold\"),\n                 legend.title = ggplot2::element_text(size = 16, face = \"bold\"))\nSeurat::DimPlot(sample, shuffle = T, pt.size = 0.5) + \n  Seurat::NoAxes() +\n  ggplot2::ggtitle(\"My awesome SC dataset\") +\n  ggplot2::theme(legend.text = ggplot2::element_text(size = 16, face = \"bold\"),\n                 legend.title = ggplot2::element_text(size = 16, face = \"bold\"))\nSeurat::DimPlot(sample, shuffle = T, pt.size = 0.5) + \n  Seurat::NoAxes() +\n  ggplot2::ggtitle(\"My awesome SC dataset\") +\n  ggplot2::theme(plot.title = ggplot2::element_text(size = 20, face = \"bold\", hjust = 0.5),\n                 legend.text = ggplot2::element_text(size = 16, face = \"bold\"),\n                 legend.title = ggplot2::element_text(size = 16, face = \"bold\"))\nnum_clusters <- length(unique(sample$seurat_clusters))\ncolor_scale <- colortools::setColors(\"#457b9d\", num_clusters)\nnames(color_scale) <- sort(unique(sample$seurat_clusters))\n\nSeurat::DimPlot(sample, shuffle = T, pt.size = 0.5, cols = color_scale) + \n  Seurat::NoAxes() +\n  ggplot2::ggtitle(\"My awesome SC dataset\") +\n  ggplot2::theme(plot.title = ggplot2::element_text(size = 20, face = \"bold\", hjust = 0.5),\n                 legend.text = ggplot2::element_text(size = 16, face = \"bold\"),\n                 legend.title = ggplot2::element_text(size = 16, face = \"bold\"))\nnum_clusters <- length(unique(sample$seurat_clusters))\ncolor_scale <- colortools::setColors(\"#457b9d\", num_clusters)\nnames(color_scale) <- sort(unique(sample$seurat_clusters))\n\nSeurat::DimPlot(sample, shuffle = T, pt.size = 0.5, cols = color_scale) + \n  ggpubr::theme_pubr(legend = \"bottom\") +\n  Seurat::NoAxes() +\n  ggplot2::ggtitle(\"My awesome SC dataset\") +\n  ggplot2::theme(plot.title = ggplot2::element_text(size = 20, face = \"bold\", hjust = 0.5),\n                 legend.text = ggplot2::element_text(size = 16, face = \"bold\"),\n                 legend.title = ggplot2::element_text(size = 16, face = \"bold\"))\nnum_clusters <- length(unique(sample$seurat_clusters))\ncolor_scale <- colortools::setColors(\"#457b9d\", num_clusters)\nnames(color_scale) <- sort(unique(sample$seurat_clusters))\n\nSeurat::DimPlot(sample, shuffle = T, pt.size = 0.5, cols = color_scale) + \n  ggpubr::theme_pubr(legend = \"bottom\") +\n  Seurat::NoAxes() +\n  ggplot2::ggtitle(\"My awesome SC dataset\") +\n  ggplot2::theme(plot.title = ggplot2::element_text(size = 20, face = \"bold\", hjust = 0.5),\n                 legend.text = ggplot2::element_text(size = 16, face = \"bold\"),\n                 legend.title = ggplot2::element_text(size = 16, face = \"bold\")) + \n  ggplot2::guides(color = ggplot2::guide_legend(ncol = 4,\n                                                byrow = F))\nnum_clusters <- length(unique(sample$seurat_clusters))\ncolor_scale <- colortools::setColors(\"#457b9d\", num_clusters)\nnames(color_scale) <- sort(unique(sample$seurat_clusters))\n\nSeurat::DimPlot(sample, shuffle = T, pt.size = 0.5, cols = color_scale) + \n  ggpubr::theme_pubr(legend = \"bottom\") +\n  Seurat::NoAxes() +\n  ggplot2::ggtitle(\"My awesome SC dataset\") +\n  ggplot2::theme(plot.title = ggplot2::element_text(size = 20, face = \"bold\", hjust = 0.5),\n                 legend.text = ggplot2::element_text(size = 16, face = \"bold\"),\n                 legend.title = ggplot2::element_text(size = 16, face = \"bold\")) + \n  ggplot2::guides(color = ggplot2::guide_legend(ncol = 4,\n                                                byrow = F,\n                                                override.aes = list(size = 4)))"},{"path":"dim-plots.html","id":"regular-dimplots","chapter":"1 Dim plots","heading":"1.1 Regular DimPlots","text":"default output SCpubr::do_DimPlot().can add title plot.title parameter.can change legend location number columns legend.position legend.ncol.","code":"\nSCpubr::do_DimPlot(sample)\nSCpubr::do_DimPlot(sample, plot.title = \"My awesome SC data set\")\nSCpubr::do_DimPlot(sample, \n                   plot.title = \"My awesome SC data set\", \n                   legend.position = \"left\", \n                   legend.ncol = 4)"},{"path":"dim-plots.html","id":"highlighting-cells","chapter":"1 Dim plots","heading":"1.2 Highlighting cells","text":"One nice features Seurat::DimPlot() possibility highlighting certain group cells DimPlot. achieved using cells.highligh parameter. default plot looks like.SCpubr returns plot. , parameter set .default, size cells SCpubr::do_DimPlot() . However, size highlighted dots can modified parameter sizes.highlight Seurat.","code":"\n# Select 1000 random cells out of clusters 1, 5 and 7.\ncells.use <- sample(colnames(sample[, sample$seurat_clusters %in% c(\"1\", \"5\", \"7\")]), 1000)\nSeurat::DimPlot(sample, cells.highlight = cells.use)\n# Select 1000 random cells out of clusters 1, 5 and 7.\ncells.use <- sample(colnames(sample[, sample$seurat_clusters %in% c(\"1\", \"5\", \"7\")]), 1000)\nSCpubr::do_DimPlot(sample, cells.highlight = cells.use)\n# Select 1000 random cells out of clusters 1, 5 and 7.\ncells.use <- sample(colnames(sample[, sample$seurat_clusters %in% c(\"1\", \"5\", \"7\")]), 1000)\nSCpubr::do_DimPlot(sample, cells.highlight = cells.use, sizes.highlight = 2)"},{"path":"dim-plots.html","id":"splitting-by-a-category","chapter":"1 Dim plots","heading":"1.3 Splitting by a category","text":"Another useful paramter Seurat::DimPlot split., allows split DimPlot multiple panels, one containing different unique value metadata variable provided argument. One can understand using group.parameter splitting resulting DimPlot different panels. example, going use different clusters example looks default:can observed, plots accomplish task separating cells panel, approach followed actually makes interpretation difficult. Clusters Cluster 9, fewer cells, tell pretty much nothing. knowing original UMAP looked like major downside approach. SCpubr focus. Instead using Seurat’s split.parameter, generates many plots unique values metadata split plot , uses cells.highlight instead, keeps rest cells greyed . looks:way, can see clusters Cluster 7 way disperse rest, accounting standalone groups cells also blending bigger clusters. Actually, user might want change color highlighted cells split DimPlot. achieved using colors.split parameter providing either color name recognized ggplot2 (recommended) HEX code.Furthermore, one might also want color cluster original color. can achieved using argument colorss.split, either providing named vector cluster (metadata variable unique value) names color hex codes values TRUE, thus resorting default SCpubr categorical coloring.","code":"\n# Using ncol = 5 to maintain some of the proportions. \nSeurat::DimPlot(sample, split.by = \"seurat_clusters\", ncol = 5)\n# Using ncol = 5 to maintain some of the proportions.\n# Using legend = F to remove unwanted repeated legends.\nSCpubr::do_DimPlot(sample, split.by = \"seurat_clusters\", ncol = 5, legend = F)\n# Using ncol = 5 to maintain some of the proportions.\n# Using legend = F to remove unwanted repeated legends.\nSCpubr::do_DimPlot(sample, split.by = \"seurat_clusters\", ncol = 5, legend = F, colors.split = \"black\")\n# Using ncol = 5 to maintain some of the proportions.\n# Using legend = F to remove unwanted repeated legends.\nSCpubr::do_DimPlot(sample, split.by = \"seurat_clusters\", ncol = 5, legend = F, colors.split = TRUE)"},{"path":"feature-plots.html","id":"feature-plots","chapter":"2 Feature plots","heading":"2 Feature plots","text":"Another broadly used function Seurat Seurat::FeaturePlot(). basically counterpart Seurat::DimPlot() instead coloring cells based categorical color scale, uses continuous one, according variable provided user. can range gene expression, metadata variables number genes, even values PC_1. looks, plotting number UMIs:First thing stands , color scale changed one two opposite ends, identifying regions low high UMIs become easier task. Apart , want apply treatment do_DimPlot() section.way, can observe clusters really similar number UMIs, despite selected ones 4 times . well doublets. SCpubr::do_FeaturePlot() variation:default, SCpubr enlarges dots bit makes legend bold, better stand .","code":"\nSeurat::FeaturePlot(sample, features = \"nCount_RNA\")\nSeurat::FeaturePlot(sample, features = \"nCount_RNA\") + \n  Seurat::NoAxes() + \n  viridis::scale_color_viridis()\nSCpubr::do_FeaturePlot(sample, features = \"nCount_RNA\", plot.title = \"Number of UMIs\")"},{"path":"feature-plots.html","id":"multiple-features","chapter":"2 Feature plots","heading":"2.1 Multiple features","text":"SCpubr::do_FeaturePlot() can tackle multiple queries time. Plots can rearranged desired ncol parameter:multiple queries, using plot.title parameter actually adds overall title. one wants modify title plot independently, complex approach needed, requires R expertise, using patchwork package.","code":"\nSCpubr::do_FeaturePlot(sample, features = c(\"nCount_RNA\", \"nFeature_RNA\", \"percent.mt\", \"CD14\"), plot.title = \"My very important features\", ncol = 2)\n((SCpubr::do_FeaturePlot(sample, features = \"nCount_RNA\", plot.title = \"Plot A\") | SCpubr::do_FeaturePlot(sample, features = \"nFeature_RNA\", plot.title = \"Plot B\")) /\n(SCpubr::do_FeaturePlot(sample, features = \"percent.mt\", plot.title = \"Plot C\") | SCpubr::do_FeaturePlot(sample, features = \"CD14\", plot.title = \"Plot D\"))) + \npatchwork::plot_annotation(title = \"My very important features\", theme = ggplot2::theme(plot.title = ggplot2::element_text(size = 18, face = \"bold\", hjust = 0.5)))"},{"path":"feature-plots.html","id":"working-with-subsets-of-cells","chapter":"2 Feature plots","heading":"2.2 Working with subsets of cells","text":"One things can misleading, case specific subset cells driving ends color scales. Let’s say identified clusters 2, 5, 8 responsible behavior. like plot values without taking cells consideration. first thing comes mind , indeed, removing cells completely, resulting following:However, falls back problem Seurat::DimPlot split.parameter. lose overall context cells . taken care SCpubr::do_FeaturePlot(), using cells.highlight parameter:way, adding cells back modifying legend, accomplish desired effect. Furthermore, SCpubr::do_FeaturePlot() also accepts vector identities plot, long part levels(seurat_object). can achieved using idents.highlight instead.","code":"\ncells.plot <- colnames(sample[, !(sample$seurat_clusters %in% c(\"2\", \"5\", \"8\"))])\nSCpubr::do_FeaturePlot(sample[, cells.plot], features = c(\"CD14\"), plot.title = \"My very important features\")\ncells.plot <- colnames(sample[, !(sample$seurat_clusters %in% c(\"2\", \"5\", \"8\"))])\nSCpubr::do_FeaturePlot(sample, cells.highlight = cells.plot, features = c(\"CD14\"), plot.title = \"My very important features\")\n\nSCpubr::do_FeaturePlot(sample, idents.highlight = levels(sample)[!(levels(sample) %in% c(\"2\", \"5\", \"8\"))], features = c(\"CD14\"), plot.title = \"My very important features\")"},{"path":"feature-plots.html","id":"splitting-the-featureplot-by-a-variable","chapter":"2 Feature plots","heading":"2.3 Splitting the FeaturePlot by a variable","text":"cases, want visualize given feature, let’s say, expression LYN across another variable, instance seurat_clusters. can achieved easily Seurat using split.parameter:Apart general aesthetic discrepancies mentioned , two main aspects missing. First, overall layout UMAP embedding. able correctly locate clusters really important. Secondly, knowing , default, color scale shared across plots (achieved using keep.scale = \"feature\"), like know value color scale reaches. two aspects SCpubr::do_FeaturePlot() delves :way, able achieve better understandable plot. Please note implemented keep.scale = \"feature\". Providing options advisable. Furthermore, can query multiple features, stacked different entities split.. number columns predetermined number entities can modified. example, provide three possible examples features:LYN gene located rownames count matrix (`rownames(sample)``).nCount_RNA metadata variable located colnames(sample@meta.data).PC_1 column dimensional reduction embedding, located colnames(sample@reductions[[\"pca\"]][[]])SCpubr::do_FeaturePlot() can even subset previous plot identities split.particularly interested . color scale also limits contain values selected identities. can achieved provided vector identities split..idents parameter.","code":"\nSeurat::FeaturePlot(sample, features = \"LYN\", split.by = \"seurat_clusters\")\nSCpubr::do_FeaturePlot(sample, features = \"LYN\", split.by = \"seurat_clusters\")\nSCpubr::do_FeaturePlot(sample, features = c(\"LYN\", \"nCount_RNA\", \"PC_1\"), split.by = \"seurat_clusters\")\nSCpubr::do_FeaturePlot(sample, features = c(\"LYN\", \"nCount_RNA\", \"PC_1\"), split.by = \"seurat_clusters\", split.by.idents = c(\"2\", \"5\", \"7\"))"},{"path":"feature-plots.html","id":"modify-color-maps","chapter":"2 Feature plots","heading":"2.4 Modify color maps","text":"possible SCpubr::do_FeaturePlot() also change color map plot one eight possible ones defined viridis. achieved using viridis_color_map parameter color map name code (capital letter). Options :- magma color map.B - inferno color map.C - plasma color map.D - viridis color map.E - cividis color map.F - rocket color map.G - mako color map.H - turbo color map., recommend use turbo Feature plots, continuous scale goes many different colors , therefore, makes harder interpretation.","code":"\np1 <- SCpubr::do_FeaturePlot(sample = sample, features = \"CD14\", viridis_color_map = \"A\", plot.title = \"Magma\")\np2 <- SCpubr::do_FeaturePlot(sample = sample, features = \"CD14\", viridis_color_map = \"B\", plot.title = \"Inferno\")\np3 <- SCpubr::do_FeaturePlot(sample = sample, features = \"CD14\", viridis_color_map = \"C\", plot.title = \"Plasma\")\np4 <- SCpubr::do_FeaturePlot(sample = sample, features = \"CD14\", viridis_color_map = \"D\", plot.title = \"Viridis\")\np5 <- SCpubr::do_FeaturePlot(sample = sample, features = \"CD14\", viridis_color_map = \"E\", plot.title = \"Cividis\")\np6 <- SCpubr::do_FeaturePlot(sample = sample, features = \"CD14\", viridis_color_map = \"F\", plot.title = \"Rocket\")\np7 <- SCpubr::do_FeaturePlot(sample = sample, features = \"CD14\", viridis_color_map = \"G\", plot.title = \"Mako\")\np8 <- SCpubr::do_FeaturePlot(sample = sample, features = \"CD14\", viridis_color_map = \"H\", plot.title = \"Turbo\")\n\np <- patchwork::wrap_plots(list(p1, p2, p3, p4, p5, p6, p7, p8), ncol = 2, byrow = TRUE)\np"},{"path":"nebulosa-plots.html","id":"nebulosa-plots","chapter":"3 Nebulosa plots","heading":"3 Nebulosa plots","text":"plot comes straight Nebulosa package. information, vignette. short, computes “density” whether surrounding cells (UMAP embedding) also express variable provide function, variables one feed Seurat::FeaturePlot(). default plot looks like:way, know clusters enriched CD14, also know regions hightest density cells expressing . Minor modifications, line rest plots, applied SCpubr:, type visualization becomes natural partner `Seurat::FeaturePlot()’ able visualize expression variable, also query density surrounding cells. example:Nebulosa package also offers option query multiple features time:, intriguingly, can also compute joint density two features. achieved parsing joint = TRUE.interested retrieving joint density plot, can accomplish :","code":"\nNebulosa::plot_density(sample, \"CD14\")\nSCpubr::do_NebulosaPlot(sample, features = \"CD14\")\nSCpubr::do_FeaturePlot(sample, features = \"CD14\") | SCpubr::do_NebulosaPlot(sample, features = \"CD14\")\nSCpubr::do_NebulosaPlot(sample, features = c(\"CD14\", \"CD8A\"))\nSCpubr::do_NebulosaPlot(sample, features = c(\"CD14\", \"CD8A\"), joint = TRUE)\np <- SCpubr::do_NebulosaPlot(sample, features = c(\"CD14\", \"CD8A\"), joint = TRUE, combine = F)\np[[3]]"},{"path":"nebulosa-plots.html","id":"modify-color-maps-1","chapter":"3 Nebulosa plots","heading":"3.1 Modify color maps","text":"SCpubr::do_FeaturePlot(), also change color map plot one eight possible ones defined viridis. achieved using viridis_color_map parameter color map name code (capital letter). Options :- magma color map.B - inferno color map.C - plasma color map.D - viridis color map.E - cividis color map.F - rocket color map.G - mako color map.H - turbo color map.","code":"\np1 <- SCpubr::do_NebulosaPlot(sample = sample, features = \"CD8A\", viridis_color_map = \"A\", plot.title = \"Magma\")\np2 <- SCpubr::do_NebulosaPlot(sample = sample, features = \"CD8A\", viridis_color_map = \"B\", plot.title = \"Inferno\")\np3 <- SCpubr::do_NebulosaPlot(sample = sample, features = \"CD8A\", viridis_color_map = \"C\", plot.title = \"Plasma\")\np4 <- SCpubr::do_NebulosaPlot(sample = sample, features = \"CD8A\", viridis_color_map = \"D\", plot.title = \"Viridis\")\np5 <- SCpubr::do_NebulosaPlot(sample = sample, features = \"CD8A\", viridis_color_map = \"E\", plot.title = \"Cividis\")\np6 <- SCpubr::do_NebulosaPlot(sample = sample, features = \"CD8A\", viridis_color_map = \"F\", plot.title = \"Rocket\")\np7 <- SCpubr::do_NebulosaPlot(sample = sample, features = \"CD8A\", viridis_color_map = \"G\", plot.title = \"Mako\")\np8 <- SCpubr::do_NebulosaPlot(sample = sample, features = \"CD8A\", viridis_color_map = \"H\", plot.title = \"Turbo\")\n\np <- patchwork::wrap_plots(list(p1, p2, p3, p4, p5, p6, p7, p8), ncol = 2, byrow = TRUE)\np"},{"path":"bee-swarm-plots.html","id":"bee-swarm-plots","chapter":"4 Bee Swarm plots","heading":"4 Bee Swarm plots","text":"one interesting plot. stems idea can order (rank) cells given variable. variable continuous variable, better representation. order goes lowest maximum value. , cells grouped variable interest displayed scatter plot fashion. achieved using ggbeeswarm package. idea using ggbeeswarm::geom_quasirandom() geometry provided package implement single-cell analyses came tutorial Broad Institute.","code":""},{"path":"bee-swarm-plots.html","id":"using-categorical-variables","chapter":"4 Bee Swarm plots","heading":"4.1 Using categorical variables","text":"Let’s say want focus much cluster driven PC_1 PC_2. first thought just use SCpubr::do_Dimplot() plot PCA embedding instead UMAP. also query PC_3 PC_4 --clear example., get right away decent overview. Clusters 0, 5, 7 8 separate PC_1 rest. However, many cases clear, image right. Bee Swarm plots come handy. implemented SCpubr::do_BeeSwarmPlot(). function needs user provide:\n- variable rank feature_to_rank.\n- groups divide plot group..\n- Whether output colored categorical continuous scale, continuous_feature., selected PC_1 PC_4. can observe X axis Bee Swarm plot displays ordering (rank) cells across selected feature. Focusing PC_1, can see cluster 0 completely shifted right PC_1, nicely displayed Bee Swarm plot cells also ranked high (higher rank, bigger “value” feature rank, case, PC_1 value). case PC_4, Bee Swarm plot nicely shows clusters lay upper, lower middle part PC_4.important thing note kind plots cells rank. , imagine scenario like PC_4, artificially remove clusters 0, 3, 5, 7, 8, 9, leaving forming “straight line” PC_4. nature plot also separate remaining clusters:See, still clearly see two groups, formed clusters 1 2, clusters 4 6. even remove clusters 1 2 still see similar effect.can seen , clusters now span X axis. cells still ranked, therefore showing cloud dots. , just want , data visualization technique, plot comes set benefits caveats. visualization suffers trying plot highly similar values. Therefore, key understand nature variable want rank beforehand.","code":"\np1 <- SCpubr::do_DimPlot(sample, reduction = \"pca\", label = T, legend = F, dims = c(1, 2)) \np2 <- SCpubr::do_DimPlot(sample, reduction = \"pca\", label = T, legend = F, dims = c(3, 4)) \n\np1 | p2\np1 <- SCpubr::do_DimPlot(sample, reduction = \"pca\", label = T, legend = F, dims = c(1, 2))\np2 <- SCpubr::do_BeeSwarmPlot(sample = sample, feature_to_rank = \"PC_1\", group.by = \"seurat_clusters\", continuous_feature = F)\np3 <- SCpubr::do_DimPlot(sample, reduction = \"pca\", label = T, legend = F, dims = c(3, 4)) \np4 <- SCpubr::do_BeeSwarmPlot(sample = sample, feature_to_rank = \"PC_4\", group.by = \"seurat_clusters\", continuous_feature = F)\n\n(p1 | p2) / (p3 | p4)\n# Clusters to exclude.\nclusters_exclude <- c(\"0\", \"3\", \"5\", \"7\", \"8\", \"9\")\n\n# Keep the original coloring.\ncols.use <- colortools::setColors(\"steelblue\", length(levels(sample)))\nnames(cols.use) <- levels(sample)\n\np1 <- SCpubr::do_DimPlot(sample[, !(sample$seurat_clusters %in% clusters_exclude)], reduction = \"pca\", label = T, legend = F, dims = c(3, 4), colors.use = cols.use) \np2 <- SCpubr::do_BeeSwarmPlot(sample = sample[, !(sample$seurat_clusters %in% clusters_exclude)], feature_to_rank = \"PC_4\", group.by = \"seurat_clusters\", continuous_feature = F, colors.use = cols.use)\n\np1 | p2\n# Clusters to exclude.\nclusters_exclude <- c(\"0\", \"1\", \"2\", \"3\", \"5\", \"7\", \"8\", \"9\")\n\n# Keep the original coloring.\ncols.use <- colortools::setColors(\"steelblue\", length(levels(sample)))\nnames(cols.use) <- levels(sample)\n\np1 <- SCpubr::do_DimPlot(sample[, !(sample$seurat_clusters %in% clusters_exclude)], reduction = \"pca\", label = T, legend = F, dims = c(3, 4), colors.use = cols.use) \np2 <- SCpubr::do_BeeSwarmPlot(sample = sample[, !(sample$seurat_clusters %in% clusters_exclude)], feature_to_rank = \"PC_4\", group.by = \"seurat_clusters\", continuous_feature = F, colors.use = cols.use)\n\np1 | p2"},{"path":"bee-swarm-plots.html","id":"using-continuous-variables","chapter":"4 Bee Swarm plots","heading":"4.2 Using continuous variables","text":"also scenarios want rank cells continuous variable, instead showing colors group (anyway depicted Y axis), want introduce continuous color scale. specially interesting assess enrichment clusters towards given set features.using combination figures, can also assess monocyte signature seems predominantly enriched clusters 0 7.","code":"\n# Set up list of a genes to compute enrichment. Let's use a monocyte signature.\ngenes.use <- c(\"CD14\", \"LYZ\")\n\n# Compute enrichment and rename the output.\nsample <- Seurat::AddModuleScore(sample, features = genes.use, name = \"Monocyte_signature\")\nsample$Monocyte_signature <- sample$Monocyte_signature1\nsample$Monocyte_signature1 <- NULL\n\np1 <- SCpubr::do_DimPlot(sample, label = T, legend = F)\np2 <- SCpubr::do_FeaturePlot(sample, features = \"Monocyte_signature\") \np3 <- SCpubr::do_BeeSwarmPlot(sample, feature_to_rank = \"Monocyte_signature\", group.by = \"seurat_clusters\", continuous_feature = T)\np1 | p2 | p3"},{"path":"bee-swarm-plots.html","id":"modify-color-maps-for-continuous-variables","chapter":"4 Bee Swarm plots","heading":"4.3 Modify color maps for continuous variables","text":"SCpubr::do_FeaturePlot(), also change color map plot one eight possible ones defined viridis. achieved using viridis_color_map parameter color map name code (capital letter). Options :- magma color map.B - inferno color map.C - plasma color map.D - viridis color map.E - cividis color map.F - rocket color map.G - mako color map.H - turbo color map.","code":"\np1 <- SCpubr::do_BeeSwarmPlot(sample = sample, feature_to_rank = \"Monocyte_signature\", group.by = \"seurat_clusters\", continuous_feature = TRUE, fontsize = 10, viridis_color_map = \"A\", plot.title = \"Magma\")\np2 <- SCpubr::do_BeeSwarmPlot(sample = sample, feature_to_rank = \"Monocyte_signature\", group.by = \"seurat_clusters\", continuous_feature = TRUE, fontsize = 10, viridis_color_map = \"B\", plot.title = \"Inferno\")\np3 <- SCpubr::do_BeeSwarmPlot(sample = sample, feature_to_rank = \"Monocyte_signature\", group.by = \"seurat_clusters\", continuous_feature = TRUE, fontsize = 10, viridis_color_map = \"C\", plot.title = \"Plasma\")\np4 <- SCpubr::do_BeeSwarmPlot(sample = sample, feature_to_rank = \"Monocyte_signature\", group.by = \"seurat_clusters\", continuous_feature = TRUE, fontsize = 10, viridis_color_map = \"D\", plot.title = \"Viridis\")\np5 <- SCpubr::do_BeeSwarmPlot(sample = sample, feature_to_rank = \"Monocyte_signature\", group.by = \"seurat_clusters\", continuous_feature = TRUE, fontsize = 10, viridis_color_map = \"E\", plot.title = \"Cividis\")\np6 <- SCpubr::do_BeeSwarmPlot(sample = sample, feature_to_rank = \"Monocyte_signature\", group.by = \"seurat_clusters\", continuous_feature = TRUE, fontsize = 10, viridis_color_map = \"F\", plot.title = \"Rocket\")\np7 <- SCpubr::do_BeeSwarmPlot(sample = sample, feature_to_rank = \"Monocyte_signature\", group.by = \"seurat_clusters\", continuous_feature = TRUE, fontsize = 10, viridis_color_map = \"G\", plot.title = \"Mako\")\np8 <- SCpubr::do_BeeSwarmPlot(sample = sample, feature_to_rank = \"Monocyte_signature\", group.by = \"seurat_clusters\", continuous_feature = TRUE, fontsize = 10, viridis_color_map = \"H\", plot.title = \"Turbo\")\n\np <- patchwork::wrap_plots(list(p1, p2, p3, p4, p5, p6, p7, p8), ncol = 2, byrow = TRUE)\np"},{"path":"violin-plots.html","id":"violin-plots","chapter":"5 Violin plots","heading":"5 Violin plots","text":"Violin plots require little description. depiction distribution variable. makes ideal order show differential enrichment patterns alongside different groups. , also included Seurat Seurat::VlnPlot() function. first time new user encounters function likely going querying different QC paramters, number UMIs, number genes percentage mitochondrial RNA. looks number UMIs:one thing really stands , indeed, extra dots plotted alongside violin plot. Since dot represent cell, quickly becomes dominant feature figure. One can play alpha dots reduce presence:still, making dots almost invisible, still observe dominance bigger clusters. Therefore, ’s better remove . , together modifications basis SCpubr::do_VlnPlot(). default plot looks like:addition removing dots, boxplot added violin shape, get better sense quantiles distribution. effect can removed using plot_boxplot = FALSE. Also, legend default removed, groups displayed already X axis.","code":"\nSeurat::VlnPlot(sample, features = \"nCount_RNA\")\np <- Seurat::VlnPlot(sample, features = \"nCount_RNA\")\n# \"Surgically\" add the alpha parameter in the ggplot2 object.\np$layers[[2]]$aes_params$alpha <- 0.05\np\nSCpubr::do_VlnPlot(sample = sample, features = \"nCount_RNA\")"},{"path":"violin-plots.html","id":"violin-plots-as-a-means-of-qc","chapter":"5 Violin plots","heading":"5.1 Violin plots as a means of QC","text":"QC analyses, users might want also add features line indicating put cutoff. can achieved using y_cut parameter. Currently, one value per plot y_cut can used.multiple features queried, user can set different horizontal lines parsing vector y_cut. Also, can achieved individual plot titles using individual.titles parameter. restriction, vector length number features. particular plot, want modify anything, use NA instead.","code":"\nSCpubr::do_VlnPlot(sample = sample, features = \"nCount_RNA\", y_cut = 30000)\nSCpubr::do_VlnPlot(sample = sample, features = c(\"nCount_RNA\", \"nFeature_RNA\"), y_cut = c(NA, 5000), individual.titles = c(\"UMIs\", NA))"},{"path":"dot-plots.html","id":"dot-plots","chapter":"6 Dot plots","heading":"6 Dot plots","text":"Dot plots nice data representation technique. involves use two scales. One scale color-based second one size-based. context Seurat::DotPlot(), scales pre-defined contain average expression values color scale percentage cells within group expressing feature size, increasing percentage grows bigger. heavily implied features need genes, otherwise color scale lost. output Seurat:can seen, try plot type variables, resulting plot contain color scale. SCpubr::do_DimPlot() focuses enhancing overall appearance plots. Implementation using types features currently supported. looks using SCpubr::do_DimPlot():","code":"\np1 <- Seurat::DotPlot(sample, features = \"CD14\")\np2 <- Seurat::DotPlot(sample, features = \"nCount_RNA\")\np1 | p2\np1 <- SCpubr::do_DotPlot(sample = sample, features = \"CD14\")\np2 <- SCpubr::do_DotPlot(sample = sample, features = \"nFeature_RNA\")\np1 | p2"},{"path":"dot-plots.html","id":"querying-multiple-features-at-once.","chapter":"6 Dot plots","heading":"6.1 Querying multiple features at once.","text":"true power data visualization relies querying multiple genes . Let’s query ones described Seurat vignette:, can clearly distinguish clusters highly enriched given genes. proves interesting way query cluster identities. highly dependent, though, accuracy selected genes queried dataset. actually provide list genes named list, can facet plot different list genes provided:","code":"\ngenes <- c(\"IL7R\", \"CCR7\", \"CD14\", \"LYZ\", \"S100A4\", \"MS4A1\", \"CD8A\", \"FCGR3A\", \"MS4A7\", \"GNLY\", \"NKG7\", \"FCER1A\", \"CST3\", \"PPBP\")\np1 <- SCpubr::do_DotPlot(sample = sample, features = genes)\np1\ngenes <- list(\"Naive CD4+ T\" = c(\"IL7R\", \"CCR7\"),\n              \"CD14+ Mono\" = c(\"CD14\", \"LYZ\"),\n              \"Memory CD4+\" = c(\"S100A4\"),\n              \"B\" = c(\"MS4A1\"),\n              \"CD8+ T\" = c(\"CD8A\"),\n              \"FCGR3A+ Mono\" = c(\"FCGR3A\", \"MS4A7\"),\n              \"NK\" = c(\"GNLY\", \"NKG7\"),\n              \"DC\" = c(\"FCER1A\", \"CST3\"),\n              \"Platelet\" = c(\"PPBP\"))\np1 <- SCpubr::do_DotPlot(sample = sample, features = genes)\np1"},{"path":"dot-plots.html","id":"clustering-the-identities.","chapter":"6 Dot plots","heading":"6.2 Clustering the identities.","text":"One really cool feature Seurat::DotPlot() lets cluster identities Y axis depending similar across values X axis. achieved using cluster.idents = TRUE, parameter also implemented SCpubr::do_DotPlot():","code":"\ngenes <- list(\"Naive CD4+ T\" = c(\"IL7R\", \"CCR7\"),\n              \"CD14+ Mono\" = c(\"CD14\", \"LYZ\"),\n              \"Memory CD4+\" = c(\"S100A4\"),\n              \"B\" = c(\"MS4A1\"),\n              \"CD8+ T\" = c(\"CD8A\"),\n              \"FCGR3A+ Mono\" = c(\"FCGR3A\", \"MS4A7\"),\n              \"NK\" = c(\"GNLY\", \"NKG7\"),\n              \"DC\" = c(\"FCER1A\", \"CST3\"),\n              \"Platelet\" = c(\"PPBP\"))\np1 <- SCpubr::do_DotPlot(sample = sample, features = genes, plot.title = \"Not clustered\")\np2 <- SCpubr::do_DotPlot(sample = sample, features = genes, cluster.idents = TRUE, plot.title = \"Clustered\")\np1 / p2"},{"path":"dot-plots.html","id":"inverting-the-axes.","chapter":"6 Dot plots","heading":"6.3 Inverting the axes.","text":"SCpubr::do_DotPlot(), can also invert axes, groups X axis genes Y axis. achieved using flip = TRUE. Note, however, work using named list genes input, completelyl distort way facets computed. Given , combination parameters currently blocked SCpubr.","code":"\ngenes <- c(\"IL7R\", \"CCR7\", \"CD14\", \"LYZ\", \"S100A4\", \"MS4A1\", \"CD8A\", \"FCGR3A\", \"MS4A7\", \"GNLY\", \"NKG7\", \"FCER1A\", \"CST3\", \"PPBP\")\np1 <- SCpubr::do_DotPlot(sample = sample, features = genes, plot.title = \"Not clustered\", flip = T)\np2 <- SCpubr::do_DotPlot(sample = sample, features = genes, cluster.idents = TRUE, plot.title = \"Clustered\", flip = T)\np1 | p2"},{"path":"bar-plots.html","id":"bar-plots","chapter":"7 Bar plots","heading":"7 Bar plots","text":"Bar plots another well known data representation. handy resource plot summary statistics QC part single-cell analysis. Consequently, part SCpubr, available SCpubr::do_BarPlot(). Let’s say interested plotting different number cells cluster.Using SCpubr::do_BarPlot() features yields simple bar plot ordered descending value. can also set direction bars horizontal = TRUE/FALSE, default set vertical underlying assumptions taken generate plots:values features need metadata variables, stored object@meta.data. design choice, data need grouped using dplyr tidyr. also later apply values provided group..feature provided need clear rather small number groups. good estimate assess querying feature table, :Focusing last point, happen choose feature high number unique values:happens, precisely, high amount unique values nCount_RNA. type continuous values best suited data visualizations like histogram.","code":"\np1 <- SCpubr::do_BarPlot(sample, feature = \"seurat_clusters\", legend = F, plot.title = \"Number of cells per cluster\")\np2 <- SCpubr::do_BarPlot(sample, feature = \"seurat_clusters\", legend = F, plot.title = \"Number of cells per cluster\", horizontal = T)\np1 | p2\ntable(sample@meta.data[, feature])\n\np <- SCpubr::do_BarPlot(sample, feature = \"nCount_RNA\", legend = F, plot.title = \"Number of UMIs?\", horizontal = F)\np"},{"path":"bar-plots.html","id":"introducing-a-second-variable-to-group-the-feature-by","chapter":"7 Bar plots","heading":"7.1 Introducing a second variable to group the feature by","text":"Let’s expand previous example number cells per cluster. interested , like profile many cells cluster present unique samples present Seurat object? , need provide SCpubr::do_BarPlot() second parameter, group., tackles want feature grouped:can see, nicely yields many number bars unique values feature, bars segmented many times unique values group.. first, hard grasp, helps thinking two parameters, used together, :feature: want show different bars.group.: Secondary variable bars generated feature can subdivided.Another interesting parameter introduced last example position. Position can either stack fill. difference position = \"stack\" yield total number cells unique values feature, position = \"fill\" bring bars height split bar proportions within bar different groups (one group.= NULL many groups group.used). Therefore, becomes highly recommended use position = \"stack\" group.used position = \"fill\" otherwise. also warned package. want silence warnings, use verbose = FALSE.","code":"\n# We only have one value in orig.ident. Let's modify it so that it resembles a multi-sample Seurat object.\nsample$modified_orig.ident <- sample(c(\"Sample_A\", \"Sample_B\", \"Sample_C\"), ncol(sample), replace = T, prob = c(0.2, 0.7, 0.1))\n\np1 <- SCpubr::do_BarPlot(sample, \n                        feature = \"modified_orig.ident\",\n                        plot.title = \"Number of cells per sample\",\n                        position = \"stack\",\n                        legend = T,\n                        horizontal = F)\n\np2 <- SCpubr::do_BarPlot(sample, \n                        feature = \"modified_orig.ident\", \n                        group.by = \"seurat_clusters\",\n                        plot.title = \"Number of cells per cluster and sample\",\n                        position = \"stack\",\n                        legend = T,\n                        horizontal = F)\np1 | p2\n# We are going to use the previously generated sample assignment.\n\np1 <- SCpubr::do_BarPlot(sample, \n                        feature = \"modified_orig.ident\",\n                        plot.title = \"Without group.by - position = stack\",\n                        position = \"stack\",\n                        legend = T,\n                        horizontal = F)\n\np2 <- SCpubr::do_BarPlot(sample, \n                        feature = \"modified_orig.ident\",\n                        plot.title = \"Without group.by - position = fill\",\n                        position = \"fill\",\n                        legend = T,\n                        horizontal = F)\n\np3 <- SCpubr::do_BarPlot(sample, \n                        feature = \"modified_orig.ident\",\n                        group.by = \"seurat_clusters\",\n                        plot.title = \"With group.by - position = stack\",\n                        position = \"stack\",\n                        legend = T,\n                        horizontal = F)\n\np4 <- SCpubr::do_BarPlot(sample, \n                        feature = \"modified_orig.ident\",\n                        group.by = \"seurat_clusters\",\n                        plot.title = \"With group.by - position = fill\",\n                        position = \"fill\",\n                        legend = T,\n                        horizontal = F)\np <- (p1 | p2) / (p3 | p4)\np"},{"path":"bar-plots.html","id":"reordering-columns-based-on-a-single-entity","chapter":"7 Bar plots","heading":"7.2 Reordering columns based on a single entity","text":"One advanced use bar plots, useful one reorder columns based single entity descending order. works group.set best position = \"fill\". instance, imagine scenario heavily interested cluster 1, want reorder columns based . achieved providing order.parameter SCpubr::do_BarPlot(). value order.necessary one unique values group.. Therefore, best practice, one want generate bar plots without using order.decide. Let’s also, sake example, modify proportions cluster 1 becomes really evident. looks:","code":"\n# Modify proportions. \nsample$modified_seurat_clusters <- as.character(sample$seurat_clusters)\nsample$modified_seurat_clusters[sample$modified_orig.ident == \"Sample_A\" & sample$modified_seurat_clusters %in% c(\"0\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\")] <- \"1\"\n\np1 <- SCpubr::do_BarPlot(sample, \n                        feature = \"modified_orig.ident\",\n                        group.by = \"modified_seurat_clusters\",\n                        plot.title = \"Number of cells per sample\",\n                        order.by = \"1\",\n                        position = \"stack\",\n                        legend = T,\n                        horizontal = F)\n\np2 <- SCpubr::do_BarPlot(sample, \n                        feature = \"modified_orig.ident\", \n                        group.by = \"modified_seurat_clusters\",\n                        plot.title = \"Number of cells per cluster and sample\",\n                        order.by = \"1\",\n                        position = \"fill\",\n                        legend = T,\n                        horizontal = F)\np1 | p2"},{"path":"bar-plots.html","id":"adding-custom-color-scales.","chapter":"7 Bar plots","heading":"7.3 Adding custom color scales.","text":"necesary, colors plots can easily changed using colors.use parameter, requires named vector containing HEX codes colors show names unique values used color groups. one example:","code":"\n# Create a color scale for the unique values in seurat clusters.\ncolors <- c(\"0\" = \"#001219\",\n            \"1\" = \"#005f73\",\n            \"2\" = \"#0a9396\",\n            \"3\" = \"#94d2bd\",\n            \"4\" = \"#e9d8a6\",\n            \"5\" = \"#ee9b00\",\n            \"6\" = \"#ca6702\",\n            \"7\" = \"#bb3e03\",\n            \"8\" = \"#ae2012\",\n            \"9\" = \"#9b2226\")\n\np1 <- SCpubr::do_BarPlot(sample, feature = \"seurat_clusters\", legend = F, plot.title = \"Number of cells per cluster\", horizontal = T, colors.use = colors)\np2 <- SCpubr::do_BarPlot(sample, \n                        feature = \"modified_orig.ident\",\n                        group.by = \"seurat_clusters\",\n                        plot.title = \"With group.by - position = fill\",\n                        position = \"fill\",\n                        legend = T,\n                        horizontal = F,\n                        colors.use = colors)\np1 | p2"}]
