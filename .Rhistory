#| fig-cap: "Tree plot of reported terms."
# Retrieve the Tree plot.
out$TreePlot
out$TreePlot
#| results: "asis"
#| echo: false
source("_common.R")
suppressMessages(library("org.Hs.eg.db"))
#| results: "asis"
#| echo: false
source("_common.R")
suppressMessages(library("org.Hs.eg.db"))
genes.use <- c("IL7R", "CCR7", "CD14", "LYZ",
"S100A4", "MS4A1", "CD8A", "FCGR3A",
"MS4A7", "GNLY", "NKG7", "FCER1A",
"CST3", "PPBP")
# Compute the grouped GO terms.
out <- SCpubr::do_FunctionalAnnotationPlot(genes = genes.use,
org.db = org.Hs.eg.db)
#| fig-width: 20
#| fig-height: 8
#| fig-cap: "Tree plot of reported terms."
# Retrieve the Tree plot.
out$TreePlot
out$TreePlot
#| results: "asis"
#| echo: false
source("_common.R")
suppressMessages(library("org.Hs.eg.db"))
genes.use <- c("IL7R", "CCR7", "CD14", "LYZ",
"S100A4", "MS4A1", "CD8A", "FCGR3A",
"MS4A7", "GNLY", "NKG7", "FCER1A",
"CST3", "PPBP")
# Compute the grouped GO terms.
out <- SCpubr::do_FunctionalAnnotationPlot(genes = genes.use,
org.db = org.Hs.eg.db)
#| fig-width: 8
#| fig-height: 10
#| fig-cap: "Heatmap of reported terms."
# Retrieve the heatmap.
out$Heatmap
#| fig-width:15
#| fig-height: 10
#| fig-cap: "Bar plot of reported terms."
# Retrieve the Bar plot.
out$BarPlot
#| fig-width:15
#| fig-height: 10
#| fig-cap: "Dot plot of reported terms."
# Retrieve the Dot plot.
out$DotPlot
#| fig-width: 20
#| fig-height: 8
#| fig-cap: "Tree plot of reported terms."
# Retrieve the Tree plot.
out$TreePlot
out$DotPlot
?pheatmap::pheatmap
?enrichplot::treeplot
# Compute the grouped KEGG terms.
out1 <- SCpubr::do_FunctionalAnnotationPlot(genes = genes.use,
org.db = org.Hs.eg.db,
database = "KEGG")
genes.use <- c("IL7R", "CCR7", "CD14", "LYZ",
"S100A4", "MS4A1", "CD8A", "FCGR3A",
"MS4A7", "GNLY", "NKG7", "FCER1A",
"CST3", "PPBP")
# Compute the grouped KEGG terms.
out1 <- SCpubr::do_FunctionalAnnotationPlot(genes = genes.use,
org.db = org.Hs.eg.db,
database = "KEGG")
#| results: "asis"
#| echo: false
source("_common.R")
suppressMessages(library("org.Hs.eg.db"))
# Compute the grouped KEGG terms.
out1 <- SCpubr::do_FunctionalAnnotationPlot(genes = genes.use,
org.db = org.Hs.eg.db,
database = "KEGG")
# Compute the grouped MKEGG terms.
out2 <- SCpubr::do_FunctionalAnnotationPlot(genes = genes.use,
org.db = org.Hs.eg.db,
database = "MKEGG")
#| fig-width: 30
#| fig-height: 10
#| fig-cap: "Bar plot of reported terms."
# Retrieve the Bar and Dot plot.
out1$DotPlot | out2$DotPlot
out2
#| fig-width: 15
#| fig-height: 10
#| fig-cap: "Dot plot of reported KEGG terms."
# Retrieve the Bar and Dot plot.
out1$DotPlot
```{r}
Sys.getenv()
options()
?Sys.setenv
Sys.setenv("SCpubr.v5" = TRUE)
Sys.getenv("SCpubr.v5")
#| echo: false
sample <- readRDS("/b06x-isilon/b06x-g/G703/eblanco/projects/test_SC_datasets/sc_dataset.rds")
#| fig-width: 10
#| fig-height: 11
#| fig-cap: "SCpubr FeaturePlot"
p <- SCpubr::do_FeaturePlot(sample = sample,
features = "PC_1")
p
#| fig-width: 20
#| fig-height: 11
#| fig-cap: "Plot multiple features"
p <- SCpubr::do_FeaturePlot(sample = sample,
features = c("PC_1", "PC_2"))
p
#| fig-width: 25
#| fig-height: 20
#| fig-cap: "Change default colors."
# Create a color scale for the unique values in seurat clusters.
colors <- c("0" = "#001219",
"1" = "#005f73",
"2" = "#0a9396",
"3" = "#94d2bd",
"4" = "#e9d8a6",
"5" = "#ee9b00",
"6" = "#ca6702",
"7" = "#bb3e03",
"8" = "#ae2012",
"9" = "#9b2226")
p <- SCpubr::do_DimPlot(sample,
colors.use = colors,
font.size = 24)
p
?SCpubr::do_DotPlot
SCpubr::do_DotPlot(sample, features = Seurat::VariableFeatures(sample)[1:5])
SCpubr::do_DotPlot(sample, features = Seurat::VariableFeatures(sample)[1:5], colors.use = c("red", "blue"))
#| fig-width: 25
#| fig-height: 20
#| fig-cap: "Using a vector of named values."
# Create a color scale for the unique values in seurat clusters.
colors1 <- c("0" = "#001219",
"1" = "#005f73",
"2" = "#0a9396",
"3" = "#94d2bd",
"4" = "#e9d8a6",
"5" = "#ee9b00",
"6" = "#ca6702",
"7" = "#bb3e03",
"8" = "#ae2012",
"9" = "#9b2226")
colors2 <- c("A" = "#669bbc",
"B" = "#003049")
colors3 <- c("Cell" = "#83c5be")
colors.use <- list("seurat_clusters" = colors1,
"annotation" = colors2,
"orig.ident" = colors3)
p <- SCpubr::do_SCExpressionHeatmap(sample,
features = Seurat::VariableFeatures(sample)[1:20],
metadata = c("seurat_clusters",
"annotation",
"orig.ident"),
metadata.colors = colors.use)
p
p
table(sample$orig.ident)
#| fig-width: 25
#| fig-height: 20
#| fig-cap: "Using a vector of named values."
# Create a color scale for the unique values in seurat clusters.
colors1 <- c("0" = "#001219",
"1" = "#005f73",
"2" = "#0a9396",
"3" = "#94d2bd",
"4" = "#e9d8a6",
"5" = "#ee9b00",
"6" = "#ca6702",
"7" = "#bb3e03",
"8" = "#ae2012",
"9" = "#9b2226")
colors2 <- c("A" = "#669bbc",
"B" = "#003049")
colors3 <- c("10K_pbmc" = "#83c5be")
colors.use <- list("seurat_clusters" = colors1,
"annotation" = colors2,
"orig.ident" = colors3)
p <- SCpubr::do_SCExpressionHeatmap(sample,
features = Seurat::VariableFeatures(sample)[1:20],
metadata = c("seurat_clusters",
"annotation",
"orig.ident"),
metadata.colors = colors.use)
p
p
utils::packageVersion("dplyr")
utils::packageVersion("tidyr")
#| fig-width: 20
#| fig-height: 40
#| fig-cap: "Modify viridis palettes."
p1 <- SCpubr::do_FeaturesPlot(sample,
features = "PC_1",
pt.size = 0.5,
use.viridis = TRUE,
viridis.palette = "A",
viridis.direction = 1)
#| fig-width: 20
#| fig-height: 40
#| fig-cap: "Modify viridis palettes."
p1 <- SCpubr::do_FeaturePlot(sample,
features = "PC_1",
pt.size = 0.5,
use.viridis = TRUE,
viridis.palette = "A",
viridis.direction = 1)
#| fig-width: 20
#| fig-height: 40
#| fig-cap: "Modify viridis palettes."
p1 <- SCpubr::do_FeaturePlot(sample,
features = "PC_1",
pt.size = 0.5,
use_viridis = TRUE,
viridis.palette = "A",
viridis.direction = 1)
p2 <- SCpubr::do_FeaturePlot(sample,
features = "PC_1",
pt.size = 0.5,
use_viridis = TRUE,
viridis.palette = "B",
viridis.direction = 1)
p3 <- SCpubr::do_FeaturePlot(sample,
features = "PC_1",
pt.size = 0.5,
use_viridis = TRUE,
viridis.palette = "C",
viridis.direction = 1)
p4 <- SCpubr::do_FeaturePlot(sample,
features = "PC_1",
pt.size = 0.5,
use_viridis = TRUE,
viridis.palette = "D",
viridis.direction = 1)
p5 <- SCpubr::do_FeaturePlot(sample,
features = "PC_1",
pt.size = 0.5,
use_viridis = TRUE,
viridis.palette = "E",
viridis.direction = 1)
p6 <- SCpubr::do_FeaturePlot(sample,
features = "PC_1",
pt.size = 0.5,
use_viridis = TRUE,
viridis.palette = "F",
viridis.direction = 1)
p7 <- SCpubr::do_FeaturePlot(sample,
features = "PC_1",
pt.size = 0.5,
use_viridis = TRUE,
viridis.palette = "G",
viridis.direction = 1)
p8 <- SCpubr::do_FeaturePlot(sample,
features = "PC_1",
pt.size = 0.5,
use_viridis = TRUE,
viridis.palette = "H",
viridis.direction = 1)
p <- (p1 | p2) / (p3 | p4) | (p5 | p6) | (p7 | p8)
p
p <- (p1 | p2) / (p3 | p4) / (p5 | p6) / (p7 | p8)
p
p
#| fig-width: 20
#| fig-height: 40
#| fig-cap: "Modify viridis palettes, also use different directions."
p1 <- SCpubr::do_FeaturePlot(sample,
features = "PC_1",
pt.size = 0.5,
use_viridis = TRUE,
viridis.palette = "A",
viridis.direction = 1)
p2 <- SCpubr::do_FeaturePlot(sample,
features = "PC_1",
pt.size = 0.5,
use_viridis = TRUE,
viridis.palette = "B",
viridis.direction = -1)
p3 <- SCpubr::do_FeaturePlot(sample,
features = "PC_1",
pt.size = 0.5,
use_viridis = TRUE,
viridis.palette = "C",
viridis.direction = 1)
p4 <- SCpubr::do_FeaturePlot(sample,
features = "PC_1",
pt.size = 0.5,
use_viridis = TRUE,
viridis.palette = "D",
viridis.direction = -1)
p5 <- SCpubr::do_FeaturePlot(sample,
features = "PC_1",
pt.size = 0.5,
use_viridis = TRUE,
viridis.palette = "E",
viridis.direction = 1)
p6 <- SCpubr::do_FeaturePlot(sample,
features = "PC_1",
pt.size = 0.5,
use_viridis = TRUE,
viridis.palette = "F",
viridis.direction = -1)
p7 <- SCpubr::do_FeaturePlot(sample,
features = "PC_1",
pt.size = 0.5,
use_viridis = TRUE,
viridis.palette = "G",
viridis.direction = 1)
p8 <- SCpubr::do_FeaturePlot(sample,
features = "PC_1",
pt.size = 0.5,
use_viridis = TRUE,
viridis.palette = "H",
viridis.direction = -1)
p <- (p1 | p2) / (p3 | p4) / (p5 | p6) / (p7 | p8)
p
p
p
p
p
p
p
p
3
p
p
p
#| fig-width: 20
#| fig-height: 40
#| fig-cap: "Modify viridis palettes, also use different directions."
p1 <- SCpubr::do_FeaturePlot(sample,
features = "PC_1",
pt.size = 0.5,
use_viridis = FALSE,
sequential.palette = "YlGnBu",
sequential.direction = 1)
p2 <- SCpubr::do_FeaturePlot(sample,
features = "PC_1",
pt.size = 0.5,
use_viridis = FALSE,
sequential.palette = "YlOrBr",
sequential.direction = 1)
p3 <- SCpubr::do_FeaturePlot(sample,
features = "PC_1",
pt.size = 0.5,
use_viridis = FALSE,
sequential.palette = "YlOrRd",
sequential.direction = 1)
p4 <- SCpubr::do_FeaturePlot(sample,
features = "PC_1",
pt.size = 0.5,
use_viridis = FALSE,
sequential.palette = "Reds",
sequential.direction = 1)
p5 <- SCpubr::do_FeaturePlot(sample,
features = "PC_1",
pt.size = 0.5,
use_viridis = TRUE,
viridis.palette = "Purples",
viridis.direction = 1)
#| fig-width: 20
#| fig-height: 40
#| fig-cap: "Modify viridis palettes, also use different directions."
p1 <- SCpubr::do_FeaturePlot(sample,
features = "PC_1",
pt.size = 0.5,
use_viridis = FALSE,
sequential.palette = "YlGnBu",
sequential.direction = 1)
p2 <- SCpubr::do_FeaturePlot(sample,
features = "PC_1",
pt.size = 0.5,
use_viridis = FALSE,
sequential.palette = "YlOrBr",
sequential.direction = 1)
p3 <- SCpubr::do_FeaturePlot(sample,
features = "PC_1",
pt.size = 0.5,
use_viridis = FALSE,
sequential.palette = "YlOrRd",
sequential.direction = 1)
p4 <- SCpubr::do_FeaturePlot(sample,
features = "PC_1",
pt.size = 0.5,
use_viridis = FALSE,
sequential.palette = "Reds",
sequential.direction = 1)
p5 <- SCpubr::do_FeaturePlot(sample,
features = "PC_1",
pt.size = 0.5,
use_viridis = FALSE,
sequential.palette = "Purples",
sequential.direction = 1)
p6 <- SCpubr::do_FeaturePlot(sample,
features = "PC_1",
pt.size = 0.5,
use_viridis = FALSE,
sequential.palette = "Blues",
sequential.direction = -1)
p7 <- SCpubr::do_FeaturePlot(sample,
features = "PC_1",
pt.size = 0.5,
use_viridis = FALSE,
sequential.palette = "Oranges",
sequential.direction = 1)
p8 <- SCpubr::do_FeaturePlot(sample,
features = "PC_1",
pt.size = 0.5,
use_viridis = FALSE,
sequential.palette = "Greys",
sequential.direction = 1)
p <- (p1 | p2) / (p3 | p4) / (p5 | p6) / (p7 | p8)
p
p
p
#| fig-width: 20
#| fig-height: 40
#| fig-cap: "Modify viridis palettes, also use different directions."
p1 <- SCpubr::do_FeaturePlot(sample,
features = "PC_1",
pt.size = 0.5,
use_viridis = FALSE,
enforce_symmetry = TRUE,
diverging.palette = "Spectral")
p2 <- SCpubr::do_FeaturePlot(sample,
features = "PC_1",
pt.size = 0.5,
use_viridis = FALSE,
enforce_symmetry = TRUE,
diverging.palette = "RdYlBu")
p3 <- SCpubr::do_FeaturePlot(sample,
features = "PC_1",
pt.size = 0.5,
use_viridis = FALSE,
enforce_symmetry = TRUE,
diverging.palette = "RdYlGn")
p4 <- SCpubr::do_FeaturePlot(sample,
features = "PC_1",
pt.size = 0.5,
use_viridis = FALSE,
enforce_symmetry = TRUE,
diverging.palette = "RdBu")
p5 <- SCpubr::do_FeaturePlot(sample,
features = "PC_1",
pt.size = 0.5,
use_viridis = FALSE,
enforce_symmetry = TRUE,
diverging.palette = "RdGy")
p6 <- SCpubr::do_FeaturePlot(sample,
features = "PC_1",
pt.size = 0.5,
use_viridis = FALSE,
enforce_symmetry = TRUE,
diverging.palette = "PuOr")
p7 <- SCpubr::do_FeaturePlot(sample,
features = "PC_1",
pt.size = 0.5,
use_viridis = FALSE,
enforce_symmetry = TRUE,
diverging.palette = "PiYG")
p8 <- SCpubr::do_FeaturePlot(sample,
features = "PC_1",
pt.size = 0.5,
use_viridis = FALSE,
enforce_symmetry = TRUE,
diverging.palette = "BrBG")
p <- (p1 | p2) / (p3 | p4) / (p5 | p6) / (p7 | p8)
p
p
#| fig-width: 15
#| fig-height: 8
#| fig-cap: "Flip the axes"
p <- SCpubr::do_BarPlot(sample = sample,
group.by = "seurat_clusters",
split.by = "annotation",
position = "fill")
p
#| fig-width: 15
#| fig-height: 8
#| fig-cap: "Flip the axes"
p1 <- SCpubr::do_BarPlot(sample = sample,
group.by = "seurat_clusters",
split.by = "annotation",
position = "fill",
flip = FALSE)
p1 <- SCpubr::do_BarPlot(sample = sample,
group.by = "seurat_clusters",
split.by = "annotation",
position = "fill",
flip = TRUE)
p <- p1 | p2
p
p2 <- SCpubr::do_BarPlot(sample = sample,
group.by = "seurat_clusters",
split.by = "annotation",
position = "fill",
flip = TRUE)
p <- p1 | p2
p
p1 <- SCpubr::do_BarPlot(sample = sample,
group.by = "seurat_clusters",
split.by = "annotation",
position = "fill",
flip = FALSE)
p <- p1 | p2
p
?SCpubr::do_DimPlot
