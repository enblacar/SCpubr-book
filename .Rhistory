legend.title = "Monocyte signature")
p1 | p2 | p3
# Create a color scale for the unique values in seurat clusters.
colors <- c("0" = "#001219",
"1" = "#005f73",
"2" = "#0a9396",
"3" = "#94d2bd",
"4" = "#e9d8a6",
"5" = "#ee9b00",
"6" = "#ca6702",
"7" = "#bb3e03",
"8" = "#ae2012",
"9" = "#9b2226")
p <- SCpubr::do_BeeSwarmPlot(sample = sample,
feature_to_rank = "Monocyte_signature",
group.by = "seurat_clusters",
colors.use = colors)
p
# Create a color scale for the unique values in seurat clusters.
colors <- c("0" = "#001219",
"1" = "#005f73",
"2" = "#0a9396",
"3" = "#94d2bd",
"4" = "#e9d8a6",
"5" = "#ee9b00",
"6" = "#ca6702",
"7" = "#bb3e03",
"8" = "#ae2012",
"9" = "#9b2226")
p <- SCpubr::do_BeeSwarmPlot(sample = sample,
feature_to_rank = "Monocyte_signature",
group.by = "seurat_clusters",
colors.use = colors,
xlab = "Ranking for monocyte enrichment")
p
p <- Seurat::VlnPlot(sample,
features = "nCount_RNA")
p
p <- Seurat::VlnPlot(sample,
features = "nCount_RNA")
# "Surgically" add the alpha parameter in the ggplot2 object.
p$layers[[2]]$aes_params$alpha <- 0.05
p
p <- SCpubr::do_VlnPlot(sample = sample,
features = "nCount_RNA")
p <- SCpubr::do_VlnPlot(sample = sample,
feature = "nCount_RNA")
p
p <- SCpubr::do_VlnPlot(sample = sample,
feature = "nCount_RNA",
plot_boxplot = FALSE)
p
p <- SCpubr::do_VlnPlot(sample = sample,
feature = c("nCount_RNA"),
rotate_x_labels = TRUE,)
p <- SCpubr::do_VlnPlot(sample = sample,
feature = c("nCount_RNA"),
rotate_x_axis_labels = TRUE)
p
p <- SCpubr::do_VlnPlot(sample = sample,
feature = "nCount_RNA")
p
p <- SCpubr::do_VlnPlot(sample = sample,
feature = "nCount_RNA")
p
p <- SCpubr::do_ViolinPlot(sample = sample,
feature = "nCount_RNA")
p
p <- SCpubr::do_ViolinPlot(sample = sample,
feature = "nCount_RNA")
p
p <- SCpubr::do_ViolinPlot(sample = sample,
feature = "nCount_RNA",
plot_boxplot = FALSE)
p
p <- SCpubr::do_ViolinPlot(sample = sample,
feature = c("nCount_RNA"),
rotate_x_axis_labels = FALSE)
p
p <- SCpubr::do_ViolinPlot(sample = sample,
feature = "nCount_RNA",
y_cut = 30000)
p
p <- SCpubr::do_ViolinPlot(sample = sample,
feature = "nCount_RNA",
y_cut = 25000)
p
p1 <- SCpubr::do_ViolinPlot(sample = sample,
feature = "nCount_RNA")
p2 <- SCpubr::do_ViolinPlot(sample = sample,
feature = "nCount_RNA",
boxplot_width = 0.1)
p <- p1 / p2
p
p1 <- SCpubr::do_DotPlot(sample = sample,
features = "CD14")
p2 <- SCpubr::do_DotPlot(sample = sample,
features = "nFeature_RNA")
p1 | p2
genes <- c("IL7R", "CCR7", "CD14", "LYZ",
"S100A4", "MS4A1", "CD8A", "FCGR3A",
"MS4A7", "GNLY", "NKG7", "FCER1A",
"CST3", "PPBP")
p <- SCpubr::do_DotPlot(sample = sample,
features = genes)
p
genes <- list("Naive CD4+ T" = c("IL7R", "CCR7"),
"CD14+ Mono" = c("CD14", "LYZ"),
"Memory CD4+" = c("S100A4"),
"B" = c("MS4A1"),
"CD8+ T" = c("CD8A"),
"FCGR3A+ Mono" = c("FCGR3A", "MS4A7"),
"NK" = c("GNLY", "NKG7"),
"DC" = c("FCER1A", "CST3"),
"Platelet" = c("PPBP"))
p <- SCpubr::do_DotPlot(sample = sample,
features = genes)
p
genes <- list("Naive CD4+ T" = c("IL7R", "CCR7"),
"CD14+ Mono" = c("CD14", "LYZ"),
"Memory CD4+" = c("S100A4"),
"B" = c("MS4A1"),
"CD8+ T" = c("CD8A"),
"FCGR3A+ Mono" = c("FCGR3A", "MS4A7"),
"NK" = c("GNLY", "NKG7"),
"DC" = c("FCER1A", "CST3"),
"Platelet" = c("PPBP"))
p1 <- SCpubr::do_DotPlot(sample = sample,
features = genes,
plot.title = "Not clustered")
p2 <- SCpubr::do_DotPlot(sample = sample,
features = genes,
cluster.idents = TRUE,
plot.title = "Clustered")
p1 / p2
genes <- c("IL7R", "CCR7", "CD14", "LYZ",
"S100A4", "MS4A1", "CD8A", "FCGR3A",
"MS4A7", "GNLY", "NKG7", "FCER1A",
"CST3", "PPBP")
p1 <- SCpubr::do_DotPlot(sample = sample,
features = genes,
plot.title = "Not clustered",
flip = T)
p2 <- SCpubr::do_DotPlot(sample = sample,
features = genes,
cluster.idents = TRUE,
plot.title = "Clustered",
flip = T,
rotate_x_labels = T)
genes <- c("IL7R", "CCR7", "CD14", "LYZ",
"S100A4", "MS4A1", "CD8A", "FCGR3A",
"MS4A7", "GNLY", "NKG7", "FCER1A",
"CST3", "PPBP")
p1 <- SCpubr::do_DotPlot(sample = sample,
features = genes,
plot.title = "Not clustered",
flip = T)
p2 <- SCpubr::do_DotPlot(sample = sample,
features = genes,
cluster.idents = TRUE,
plot.title = "Clustered",
flip = T,
rotate_x_axis_labels = T)
p1 | p2
genes <- c("IL7R", "CCR7", "CD14", "LYZ",
"S100A4", "MS4A1", "CD8A", "FCGR3A",
"MS4A7", "GNLY", "NKG7", "FCER1A",
"CST3", "PPBP")
p1 <- SCpubr::do_DotPlot(sample = sample,
features = genes,
plot.title = "Not clustered",
flip = T)
p2 <- SCpubr::do_DotPlot(sample = sample,
features = genes,
cluster.idents = TRUE,
plot.title = "Clustered",
flip = T,
rotate_x_axis_labels = FALSE)
p1 | p2
p1 <- SCpubr::do_BarPlot(sample = sample,
features = "seurat_clusters",
legend = F,
plot.title = "Number of cells per cluster")
p1 <- SCpubr::do_BarPlot(sample = sample,
features = "seurat_clusters",
legend.position = "none",
plot.title = "Number of cells per cluster")
p1 <- SCpubr::do_BarPlot(sample = sample,
feature = "seurat_clusters",
legend.position = "none",
plot.title = "Number of cells per cluster")
p1 <- SCpubr::do_BarPlot(sample = sample,
group.by = "seurat_clusters",
legend.position = "none",
plot.title = "Number of cells per cluster")
p2 <- SCpubr::do_BarPlot(sample = sample,
group.by = "seurat_clusters",
legend.position = "none",
plot.title = "Number of cells per cluster",
horizontal = T)
p1 <- SCpubr::do_BarPlot(sample = sample,
group.by = "seurat_clusters",
legend.position = "none",
plot.title = "Number of cells per cluster")
p2 <- SCpubr::do_BarPlot(sample = sample,
group.by = "seurat_clusters",
legend.position = "none",
plot.title = "Number of cells per cluster",
flip = T)
p1 | p2
sample <- readRDS("/b06x-isilon/b06x-g/G703/eblanco/projects/test_SC_datasets/sc_dataset.rds")
library(magrittr)
p1 <- SCpubr::do_BarPlot(sample = sample,
group.by = "seurat_clusters",
legend.position = "none",
plot.title = "Number of cells per cluster")
p2 <- SCpubr::do_BarPlot(sample = sample,
group.by = "seurat_clusters",
legend.position = "none",
plot.title = "Number of cells per cluster",
flip = T)
p1 | p2
# We only have one value in orig.ident. Let's modify it so that it resembles a multi-sample Seurat object.
sample$modified_orig.ident <- sample(x = c("Sample_A", "Sample_B", "Sample_C"),
size = ncol(sample),
replace = T,
prob = c(0.2, 0.7, 0.1))
p1 <- SCpubr::do_BarPlot(sample,
group.by = "seurat_clusters"
,                        split.by = "modified_orig.ident",
plot.title = "Number of cells per cluster and sample",
position = "stack")
p2 <- SCpubr::do_BarPlot(sample,
group.by = "modified_orig.ident",
group.by = "seurat_clusters",
plot.title = "Number of cells per cluster and sample",
position = "stack")
# We only have one value in orig.ident. Let's modify it so that it resembles a multi-sample Seurat object.
sample$modified_orig.ident <- sample(x = c("Sample_A", "Sample_B", "Sample_C"),
size = ncol(sample),
replace = T,
prob = c(0.2, 0.7, 0.1))
p1 <- SCpubr::do_BarPlot(sample,
group.by = "seurat_clusters"
,                        split.by = "modified_orig.ident",
plot.title = "Number of cells per cluster and sample",
position = "stack")
p2 <- SCpubr::do_BarPlot(sample,
group.by = "modified_orig.ident",
split.by = "seurat_clusters",
plot.title = "Number of cells per cluster and sample",
position = "stack")
p1 | p2
# We only have one value in orig.ident. Let's modify it so that it resembles a multi-sample Seurat object.
sample$modified_orig.ident <- sample(x = c("Sample_A", "Sample_B", "Sample_C"),
size = ncol(sample),
replace = T,
prob = c(0.2, 0.7, 0.1))
p1 <- SCpubr::do_BarPlot(sample,
group.by = "seurat_clusters"
,                        split.by = "modified_orig.ident",
plot.title = "Number of cells per cluster in each sample",
position = "stack")
p2 <- SCpubr::do_BarPlot(sample,
group.by = "modified_orig.ident",
split.by = "seurat_clusters",
plot.title = "Number of cells per sample in each cluster",
position = "stack")
p1 | p2
# We are going to use the previously generated sample assignment.
p1 <- SCpubr::do_BarPlot(sample,
group.by = "modified_orig.ident",
plot.title = "Without split.by - position = stack",
position = "stack",
flip = FALSE)
p2 <- SCpubr::do_BarPlot(sample,
group.by = "modified_orig.ident",
plot.title = "Without split.by - position = fill",
position = "fill",
flip = FALSE)
p3 <- SCpubr::do_BarPlot(sample,
group.by = "modified_orig.ident",
split.by = "seurat_clusters",
plot.title = "With split.by - position = stack",
position = "stack",
flip = FALSE)
p4 <- SCpubr::do_BarPlot(sample,
group.by = "modified_orig.ident",
split.by = "seurat_clusters",
plot.title = "With split.by - position = fill",
position = "fill",
flip = FALSE)
p <- (p1 | p2) / (p3 | p4)
p
# We are going to use the previously generated sample assignment.
p1 <- SCpubr::do_BarPlot(sample,
group.by = "seurat_clusters",
plot.title = "Without split.by - position = stack",
position = "stack",
flip = FALSE)
p2 <- SCpubr::do_BarPlot(sample,
group.by = "seurat_clusters",
plot.title = "Without split.by - position = fill",
position = "fill",
flip = FALSE)
p3 <- SCpubr::do_BarPlot(sample,
group.by = "seurat_clusters",
split.by = "modified_orig.ident",
plot.title = "With split.by - position = stack",
position = "stack",
flip = FALSE)
p4 <- SCpubr::do_BarPlot(sample,
group.by = "seurat_clusters",
split.by = "modified_orig.ident",
plot.title = "With split.by - position = fill",
position = "fill",
flip = FALSE)
p <- (p1 | p2) / (p3 | p4)
p
# Geyser plot with categorical color scale.
p1 <- SCpubr::do_GeyserPlot(sample = sample,
features = "nCount_RNA",
scale_type = "categorical")
# Geyser plot with continuous color scale.
p2 <- SCpubr::do_GeyserPlot(sample = sample,
features = "nCount_RNA",
scale_type = "continuous")
p <- p1 / p2
p
# Geyser plot with categorical color scale without ordering by mean.
p1 <- SCpubr::do_GeyserPlot(sample = sample,
features = "nCount_RNA",
scale_type = "categorical",
order_by_mean = FALSE)
# Geyser plot with continuous color scale without ordering by mean.
p2 <- SCpubr::do_GeyserPlot(sample = sample,
features = "nCount_RNA",
scale_type = "continuous",
order_by_mean = FALSE)
p <- p1 / p2
p
# Geyser plot with continuous color scale.
p1 <- SCpubr::do_GeyserPlot(sample = sample,
features = "UMAP_2",
scale_type = "continuous",
symmetrical_scale = FALSE)
# Geyser plot with continuous color scale.
p1 <- SCpubr::do_GeyserPlot(sample = sample,
features = "UMAP_2",
scale_type = "continuous",
enforce_symmetry = FALSE)
# Geyser plot with continuous and symmetrical color scale.
p2 <- SCpubr::do_GeyserPlot(sample = sample,
features = "UMAP_2",
scale_type = "continuous",
enforce_symmetry = TRUE)
p <- p1 / p2
p
# Geyser plot with categorical color scale default X axis grouping.
p1 <- SCpubr::do_GeyserPlot(sample = sample,
features = "UMAP_2",
scale_type = "categorical",
group.by = NULL,
xlab = "Seurat clusters")
# Geyser plot with categorical color scale and custom grouping.
p2 <- SCpubr::do_GeyserPlot(sample = sample,
features = "UMAP_2",
scale_type = "categorical",
group.by = "orig.ident",
xlab = "Individual sample")
p <- p1 / p2
p
# We only have one value in orig.ident. Let's modify it so that it resembles a multi-sample Seurat object.
sample$modified_orig.ident <- sample(x = c("Sample_A", "Sample_B", "Sample_C"),
size = ncol(sample),
replace = T,
prob = c(0.2, 0.7, 0.1))
# Geyser plot with categorical color scale split by seurat clusters.
p1 <- SCpubr::do_GeyserPlot(sample = sample,
features = "UMAP_2",
scale_type = "categorical",
group.by = "modified_orig.ident",
split.by = "seurat_clusters")
# Geyser plot with continuous color scale split by seurat clusters.
p2 <- SCpubr::do_GeyserPlot(sample = sample,
features = "UMAP_2",
scale_type = "continuous",
group.by = "modified_orig.ident",
split.by = "seurat_clusters")
p <- p1 / p2
p
# Geyser plot with categorical color scale split by seurat clusters rotating labels.
p1 <- SCpubr::do_GeyserPlot(sample = sample,
features = "UMAP_2",
scale_type = "categorical",
group.by = "modified_orig.ident",
split.by = "seurat_clusters",
rotate_x_axis_labels = TRUE)
# Geyser plot with continuous color scale split by seurat clusters rotating labels.
p2 <- SCpubr::do_GeyserPlot(sample = sample,
features = "UMAP_2",
scale_type = "continuous",
symmetrical_scale = TRUE,
group.by = "modified_orig.ident",
split.by = "seurat_clusters",
rotate_x_axis_labels = TRUE)
# Geyser plot with categorical color scale split by seurat clusters rotating labels.
p1 <- SCpubr::do_GeyserPlot(sample = sample,
features = "UMAP_2",
scale_type = "categorical",
group.by = "modified_orig.ident",
split.by = "seurat_clusters",
rotate_x_axis_labels = FALSE)
# Geyser plot with continuous color scale split by seurat clusters rotating labels.
p2 <- SCpubr::do_GeyserPlot(sample = sample,
features = "UMAP_2",
scale_type = "continuous",
enforce_symmetry = TRUE,
group.by = "modified_orig.ident",
split.by = "seurat_clusters",
rotate_x_axis_labels = FALSE)
p <- p1 / p2
p
# Geyser plot with categorical color scale using color.by.
p1 <- SCpubr::do_GeyserPlot(sample = sample,
features = "UMAP_2",
scale_type = "categorical",
color.by = "modified_orig.ident")
# Geyser plot with continuous color scale using color.by.
p2 <- SCpubr::do_GeyserPlot(sample = sample,
features = "UMAP_2",
scale_type = "continuous",
enforce_symmetry = TRUE,
color.by = "nCount_RNA")
p <- p1 / p2
p
# Geyser plot with categorical color scale using color.by and split.by.
p1 <- SCpubr::do_GeyserPlot(sample = sample,
features = "UMAP_2",
scale_type = "categorical",
group.by = "orig.ident",
split.by = "seurat_clusters",
color.by = "modified_orig.ident")
# Geyser plot with continuous color scale using color.by and split.by.
p2 <- SCpubr::do_GeyserPlot(sample = sample,
features = "UMAP_2",
scale_type = "continuous",
enforce_symmetry = TRUE,
color.by = "nCount_RNA",
group.by = "orig.ident",
split.by = "seurat_clusters")
p <- p1 / p2
p
# Geyser plot with different jitter.
p0 <- SCpubr::do_GeyserPlot(sample = sample,
features = "UMAP_2",
scale_type = "continuous",
enforce_symmetry = TRUE,
jitter = 0.01)
p1 <- SCpubr::do_GeyserPlot(sample = sample,
features = "UMAP_2",
scale_type = "continuous",
enforce_symmetry = TRUE,
jitter = 0.1)
p2 <- SCpubr::do_GeyserPlot(sample = sample,
features = "UMAP_2",
scale_type = "continuous",
enforce_symmetry = TRUE,
jitter = 0.2)
p3 <- SCpubr::do_GeyserPlot(sample = sample,
features = "UMAP_2",
scale_type = "continuous",
enforce_symmetry = TRUE,
jitter = 0.3)
p4 <- SCpubr::do_GeyserPlot(sample = sample,
features = "UMAP_2",
scale_type = "continuous",
symmetrical_scale = TRUE,
jitter = 0.4)
# Geyser plot with different jitter.
p0 <- SCpubr::do_GeyserPlot(sample = sample,
features = "UMAP_2",
scale_type = "continuous",
enforce_symmetry = TRUE,
jitter = 0.01)
p1 <- SCpubr::do_GeyserPlot(sample = sample,
features = "UMAP_2",
scale_type = "continuous",
enforce_symmetry = TRUE,
jitter = 0.1)
p2 <- SCpubr::do_GeyserPlot(sample = sample,
features = "UMAP_2",
scale_type = "continuous",
enforce_symmetry = TRUE,
jitter = 0.2)
p3 <- SCpubr::do_GeyserPlot(sample = sample,
features = "UMAP_2",
scale_type = "continuous",
enforce_symmetry = TRUE,
jitter = 0.3)
p4 <- SCpubr::do_GeyserPlot(sample = sample,
features = "UMAP_2",
scale_type = "continuous",
enforce_symmetry = TRUE,
jitter = 0.4)
p5 <- SCpubr::do_GeyserPlot(sample = sample,
features = "UMAP_2",
scale_type = "continuous",
enforce_symmetry = TRUE,
jitter = 0.49)
p <- p0 / p1 / p2 / p3 / p4 / p5
p
