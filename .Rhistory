apace = 5000)
sample$assignment <- ifelse(sample$seurat_clusters %in% c("0", "2", "4"), "A", "B")
# Compute basic sankey plot.
p1 <- SCpubr::do_SankeyPlot(sample = sample,
first_group = "sub.cluster",
middle_groups = c("seurat_clusters", "assignment"),
last_group = "orig.ident",
type = "sankey",
space =  1000)
# Compute basic alluvial plot.
p2 <- SCpubr::do_SankeyPlot(sample = sample,
first_group = "sub.cluster",
middle_groups = c("seurat_clusters", "assignment"),
last_group = "orig.ident",
type = "sankey",
space = 5000)
p <- p1 | p2
p
sample$assignment <- ifelse(sample$seurat_clusters %in% c("0", "2", "4"), "A", "B")
# Compute basic sankey plot.
p1 <- SCpubr::do_SankeyPlot(sample = sample,
first_group = "sub.cluster",
middle_groups = c("seurat_clusters", "assignment"),
last_group = "orig.ident",
type = "sankey",
space =  1000)
# Compute basic alluvial plot.
p2 <- SCpubr::do_SankeyPlot(sample = sample,
first_group = "sub.cluster",
middle_groups = c("seurat_clusters", "assignment"),
last_group = "orig.ident",
type = "sankey",
space = 5000)
p <- p1 | p2
p
SCpubr::do_SankeyPlot(sample = sample,
first_group = "sub.cluster",
middle_groups = c("seurat_clusters", "assignment"),
last_group = "orig.ident",
type = "sankey",
colors.first = stats::setNames(SCpubr::do_ColorPalette(colors.use = "steelblue",
n = length(unique(sample$sub.cluster))),
unique(sample$sub.cluster)))
sample$sub.cluster <- paste0("sub_", sample$sub.cluster)
sample$sub.cluster
sample$assignment <- ifelse(sample$seurat_clusters %in% c("0", "2", "4"), "A", "B")
# Add more groups.
p1 <- SCpubr::do_SankeyPlot(sample = sample,
first_group = "sub.cluster",
middle_groups = c("seurat_clusters", "assignment"),
last_group = "orig.ident",
type = "sankey")
p2 <- SCpubr::do_SankeyPlot(sample = sample,
first_group = "sub.cluster",
middle_groups = c("seurat_clusters", "assignment"),
last_group = "orig.ident",
type = "alluvial")
p <- p1 | p2
p
sample$assignment <- ifelse(sample$seurat_clusters %in% c("0", "2", "4"), "A", "B")
# Add more groups.
p1 <- SCpubr::do_SankeyPlot(sample = sample,
first_group = "sub.cluster",
middle_groups = c("seurat_clusters", "assignment"),
last_group = "orig.ident",
type = "sankey")
p2 <- SCpubr::do_SankeyPlot(sample = sample,
first_group = "sub.cluster",
middle_groups = c("seurat_clusters", "assignment"),
last_group = "orig.ident",
type = "alluvial")
p <- p1 | p2
p
p <- SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "orig.ident")
p
p <- SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "orig.ident")
p
p <- SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "orig.ident")
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_chord1", output_format = "png")
p <- SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "orig.ident")
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_chord1", output_format = "png", width = 10, height = 10)
p <- SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "orig.ident")
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_chord1", output_format = "png", width = 16, height = 16)
sample$assignment <- ifelse(sample$seurat_clusters %in% c("0", "4", "7"), "A", "B")
p <- SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "assignment")
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_chord1", output_format = "png", width = 10, height = 10)
sample$assignment <- ifelse(sample$seurat_clusters %in% c("0", "4", "7"), "A", "B")
p <- SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "assignment")
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_chord1", output_format = "png", width = 7, height = 7)
sample$assignment <- ifelse(sample$seurat_clusters %in% c("0", "4", "7"), "A", "B")
sample$assignment[sample$seurat_clusters %in% c("1", "2")] <- "C"
sample$assignment[sample$seurat_clusters %in% c("10", "5")] <- "D"
sample$assignment[sample$seurat_clusters %in% c("8", "9")] <- "E"
p <- SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "assignment")
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_chord1", output_format = "png", width = 7, height = 7)
SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "assignment",
big.gap = 20)
p <- SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "assignment",
big.gap = 20)
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_chord2", output_format = "png", width = 7, height = 7)
p <- SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "assignment",
big.gap = 20)
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_chord2", output_format = "png", width = 10, height = 10)
p <- SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "assignment",
big.gap = 10)
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_chord2", output_format = "png", width = 10, height = 10)
p <- SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "assignment")
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_chord2", output_format = "png", width = 10, height = 10)
p <- SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "assignment")
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_chord2", output_format = "png", width = 16, height = 16)
p <- SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "assignment")
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_chord1", output_format = "png", width = 7, height = 7)
SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "assignment")
sample$assignment <- ifelse(sample$seurat_clusters %in% c("0", "4", "7"), "A", "B")
sample$assignment[sample$seurat_clusters %in% c("1", "2")] <- "C"
sample$assignment[sample$seurat_clusters %in% c("10", "5")] <- "D"
sample$assignment[sample$seurat_clusters %in% c("8", "9")] <- "E"
p <- SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "assignment")
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_chord1", output_format = "png", width = 7, height = 7)
p <- SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "assignment")
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_chord2", output_format = "png", width = 7, height = 7)
sample$assignment <- ifelse(sample$seurat_clusters %in% c("0", "4", "7"), "A", "B")
sample$assignment[sample$seurat_clusters %in% c("1", "2")] <- "C"
sample$assignment[sample$seurat_clusters %in% c("10", "5")] <- "D"
sample$assignment[sample$seurat_clusters %in% c("8", "9")] <- "E"
p <- SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "assignment")
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_chord1", output_format = "png", width = 7, height = 7)
sample$assignment <- ifelse(sample$seurat_clusters %in% c("0", "4", "7"), "A", "B")
sample$assignment[sample$seurat_clusters %in% c("1", "2")] <- "C"
sample$assignment[sample$seurat_clusters %in% c("10", "5")] <- "D"
sample$assignment[sample$seurat_clusters %in% c("8", "9")] <- "E"
p <- SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "assignment")
p
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_chord1", output_format = "png", width = 7, height = 7)
p <- SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "assignment",
big.gap = 40)
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_chord2", output_format = "png", width = 7, height = 7)
p <- SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "assignment",
small.gap = 5)
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_chord2", output_format = "png", width = 7, height = 7)
p <- SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "assignment",
big.gap = 40)
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_chord2", output_format = "png", width = 7, height = 7)
p <- SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "assignment",
small.gap = 5)
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_chord3", output_format = "png", width = 7, height = 7)
library(Seurat)
p <- SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "assignment",
alignment = "horizontal")
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_chord4", output_format = "png", width = 7, height = 7)
p <- SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "assignment",
alignment = "vertical")
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_chord5", output_format = "png", width = 7, height = 7)
library(Seurat)
sample <- readRDS("/b06x-isilon/b06x-g/G703/eblanco/projects/test_SC_datasets/sc_dataset.rds")
p <- SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "assignment",
alignment = "horizontal")
sample$assignment <- ifelse(sample$seurat_clusters %in% c("0", "4", "7"), "A", "B")
sample$assignment[sample$seurat_clusters %in% c("1", "2")] <- "C"
sample$assignment[sample$seurat_clusters %in% c("10", "5")] <- "D"
sample$assignment[sample$seurat_clusters %in% c("8", "9")] <- "E"
p <- SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "assignment",
alignment = "horizontal")
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_chord4", output_format = "png", width = 7, height = 7)
p <- SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "assignment",
alignment = "vertical")
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_chord5", output_format = "png", width = 7, height = 7)
p <- SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "assignment",
directional = 0)
p <- SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "assignment",
directional = 1)
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_chord7", output_format = "png", width = 7, height = 7)
p <- SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "assignment",
directional = -1)
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_chord8", output_format = "png", width = 7, height = 7)
p <- SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "assignment",
directional = 2)
p <- SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "assignment",
directional = 2,
direction.type = "diffHeight")
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_chord9", output_format = "png", width = 7, height = 7)
# We need to set direction.type to diffHeight only as arrows are, by nature, directional.
p <- SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "assignment",
directional = 0,
direction.type = "diffHeight")
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_chord6", output_format = "png", width = 7, height = 7)
# Add more padding to the labels.
p <- SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "assignment",
padding_labels = 8)
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_chord10", output_format = "png", width = 7, height = 7)
# Add more padding to the labels.
p <- SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "assignment",
scale = TRUE)
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_chord11", output_format = "png", width = 7, height = 7)
# Add more padding to the labels.
p <- SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "assignment",
scale = TRUE,
padding_labels = 8)
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_chord11", output_format = "png", width = 7, height = 7)
SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "seurat_clusters")
sample$seurat_clusters2 <- sample$seurat_clusters
SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "seurat_clusters2")
SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "seurat_clusters2",
self.link = TRUE)
SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "seurat_clusters2",
self.link = 1)
SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "seurat_clusters2",
self.link = 2)
SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "seurat_clusters2",
self.link = 1)
SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "seurat_clusters2",
self.link = 2)
?circlize::chordDiagram
# Prevent self linking.
sample$seurat_clusters2 <- sample$seurat_clusters
p <- SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "seurat_clusters2",
self.link = 1)
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_chord12", output_format = "png", width = 7, height = 7)
# Allow self linking.
sample$seurat_clusters2 <- sample$seurat_clusters
p <- SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "seurat_clusters2",
self.link = 2)
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_chord13", output_format = "png", width = 7, height = 7)
SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "seurat_clusters2",
self.link = 2, scale = TRUE)
# Prevent self linking.
sample$seurat_clusters2 <- sample$seurat_clusters
p <- SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "seurat_clusters2",
self.link = 1,
scale = TRUE)
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_chord12", output_format = "png", width = 7, height = 7)
# Allow self linking.
sample$seurat_clusters2 <- sample$seurat_clusters
p <- SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "seurat_clusters2",
self.link = 2,
scale = TRUE)
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_chord13", output_format = "png", width = 7, height = 7)
# Set triangle arrows.
p <- SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "assignment",
link.arr.type = "triangle")
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_chord14", output_format = "png", width = 7, height = 7)
# Set big arrows.
p <- SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "assignment",
link.arr.type = "big.arrow")
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_chord15", output_format = "png", width = 7, height = 7)
# Set big arrows.
p <- SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "assignment",
z_index = TRUE)
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_chord16", output_format = "png", width = 7, height = 7)
circlize::circos.clear()
library(Seurat)
sample <- readRDS("/b06x-isilon/b06x-g/G703/eblanco/projects/test_SC_datasets/sc_dataset.rds")
sample$assignment <- ifelse(sample$seurat_clusters %in% c("0", "4", "7"), "A", "B")
sample$assignment[sample$seurat_clusters %in% c("1", "2")] <- "C"
sample$assignment[sample$seurat_clusters %in% c("10", "5")] <- "D"
sample$assignment[sample$seurat_clusters %in% c("8", "9")] <- "E"
p <- SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "assignment",
alignment = "horizontal")
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_chord4", output_format = "png", width = 7, height = 7)
p
sample <- readRDS("/b06x-isilon/b06x-g/G703/eblanco/projects/test_SC_datasets/sc_dataset.rds")
de_genes <- readRDS("/b06x-isilon/b06x-g/G703/eblanco/projects/test_SC_datasets/pairwise_de_genes.rds")
# Generate a volcano plot.
p <- SCpubr::do_VolcanoPlot(sample = sample,
de_genes = de_genes)
p
sample <- readRDS("/b06x-isilon/b06x-g/G703/eblanco/projects/test_SC_datasets/sc_dataset.rds")
cds <- suppressMessages({suppressWarnings({SeuratWrappers::as.cell_data_set(sample)})})
# Genes to use.
pseudotime_genes <- c("CD14", "LYN")
# Compute trajectory graph.
out <- SCpubr::do_PseudotimePlot(sample = sample,
cds = cds,
compute_monocle_partitions = TRUE,
compute_monocle_clusters = FALSE,
pseudotime_genes = pseudotime_genes)
# Retrieve trajectory groups.
p1 <- out$trajectory_groups
# Retrieve trajectory partitions.
p2 <- out$trajectory_partitions
p <- p1 | p2
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_pseudo1", output_format = "png", width = 7, height = 7)
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_pseudo1", output_format = "png", width = 14, height = 8)
# Change trajectory graph width.
out <- SCpubr::do_PseudotimePlot(sample = sample,
cds = cds,
compute_monocle_partitions = TRUE,
compute_monocle_clusters = FALSE,
pseudotime_genes = pseudotime_genes,
trajectory_graph_segment_size = 1)
p1 <- out$trajectory_partitions
out <- SCpubr::do_PseudotimePlot(sample = sample,
cds = cds,
compute_monocle_partitions = TRUE,
compute_monocle_clusters = FALSE,
pseudotime_genes = pseudotime_genes,
trajectory_graph_segment_size = 2)
p2 <- out$trajectory_partitions
out <- SCpubr::do_PseudotimePlot(sample = sample,
cds = cds,
compute_monocle_partitions = TRUE,
compute_monocle_clusters = FALSE,
pseudotime_genes = pseudotime_genes,
trajectory_graph_segment_size = 3)
p3 <- out$trajectory_partitions
out <- SCpubr::do_PseudotimePlot(sample = sample,
cds = cds,
compute_monocle_partitions = TRUE,
compute_monocle_clusters = FALSE,
pseudotime_genes = pseudotime_genes,
trajectory_graph_segment_size = 3,
trajectory_graph_color = "white")
p4 <- out$trajectory_partitions
p <- (p1 | p2) / (p3 | p4)
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_pseudo2", output_format = "png", width = 14, height = 16)
?ggsignif::geom_signif
library(ggsignif)
# Add nodes, branches and leaves to the trajectory graph.
out <- SCpubr::do_PseudotimePlot(sample = sample,
cds = cds,
compute_monocle_partitions = TRUE,
compute_monocle_clusters = FALSE,
pseudotime_genes = pseudotime_genes,
trajectory_graph_segment_size = 2,
label_roots = TRUE)
p1 <- out$trajectory_partitions
out <- SCpubr::do_PseudotimePlot(sample = sample,
cds = cds,
compute_monocle_partitions = TRUE,
compute_monocle_clusters = FALSE,
pseudotime_genes = pseudotime_genes,
trajectory_graph_segment_size = 2,
label_roots = TRUE,
label_branches = TRUE)
p2 <- out$trajectory_partitions
out <- SCpubr::do_PseudotimePlot(sample = sample,
cds = cds,
compute_monocle_partitions = TRUE,
compute_monocle_clusters = FALSE,
pseudotime_genes = pseudotime_genes,
trajectory_graph_segment_size = 2,
label_roots = TRUE,
label_branches = TRUE,
label_leaves = TRUE)
p3 <- out$trajectory_partitions
p <- p1 / p2 / p3
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_pseudo3", output_format = "png", width = 21, height = 8)
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_pseudo3", output_format = "png", width = 7, height = 24)
# Plot pseudotime with monocle partitions using highest score as root.
out <- SCpubr::do_PseudotimePlot(sample = sample,
cds = cds,
compute_monocle_partitions = TRUE,
compute_monocle_clusters = FALSE,
pseudotime_genes = pseudotime_genes,
is_max_score_the_start = TRUE)
p1 <- out$pseudotime
# Plot pseudotime with monocle partitions using lowest score as root.
out <- SCpubr::do_PseudotimePlot(sample = sample,
cds = cds,
compute_monocle_partitions = TRUE,
compute_monocle_clusters = FALSE,
pseudotime_genes = pseudotime_genes,
is_max_score_the_start = FALSE)
p2 <- out$pseudotime
# Plot pseudotime with monocle partitions using highest score as root.
out <- SCpubr::do_PseudotimePlot(sample = sample,
cds = cds,
compute_monocle_partitions = FALSE,
compute_monocle_clusters = FALSE,
pseudotime_genes = pseudotime_genes,
is_max_score_the_start = TRUE)
p3 <- out$pseudotime
# Plot pseudotime with monocle partitions using lowest score as root.
out <- SCpubr::do_PseudotimePlot(sample = sample,
cds = cds,
compute_monocle_partitions = FALSE,
compute_monocle_clusters = FALSE,
pseudotime_genes = pseudotime_genes,
is_max_score_the_start = FALSE)
p4 <- out$pseudotime
p <- (p1 | p2) / (p3 | p4)
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_pseudo4", output_format = "png", width = 14, height = 16)
# Plot pseudotime with monocle partitions using highest score as root.
out <- SCpubr::do_PseudotimePlot(sample = sample,
cds = cds,
compute_monocle_partitions = TRUE,
compute_monocle_clusters = FALSE,
pseudotime_genes = pseudotime_genes,
enforce_symmetry = FALSE,
is_max_score_the_start = TRUE)
p1 <- out$pseudotime
p3 <- out$enrichment
# Plot pseudotime with monocle partitions using lowest score as root.
out <- SCpubr::do_PseudotimePlot(sample = sample,
cds = cds,
compute_monocle_partitions = TRUE,
compute_monocle_clusters = FALSE,
pseudotime_genes = pseudotime_genes,
enforce_symmetry = TRUE,
is_max_score_the_start = FALSE)
p2 <- out$pseudotime
p4 <- out$enrichment
p <- (p1 | p2) / (p3 | p4)
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_pseudo5", output_format = "png", width = 14, height = 16)
