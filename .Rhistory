?circlize::chordDiagram
# Prevent self linking.
sample$seurat_clusters2 <- sample$seurat_clusters
p <- SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "seurat_clusters2",
self.link = 1)
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_chord12", output_format = "png", width = 7, height = 7)
# Allow self linking.
sample$seurat_clusters2 <- sample$seurat_clusters
p <- SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "seurat_clusters2",
self.link = 2)
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_chord13", output_format = "png", width = 7, height = 7)
SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "seurat_clusters2",
self.link = 2, scale = TRUE)
# Prevent self linking.
sample$seurat_clusters2 <- sample$seurat_clusters
p <- SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "seurat_clusters2",
self.link = 1,
scale = TRUE)
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_chord12", output_format = "png", width = 7, height = 7)
# Allow self linking.
sample$seurat_clusters2 <- sample$seurat_clusters
p <- SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "seurat_clusters2",
self.link = 2,
scale = TRUE)
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_chord13", output_format = "png", width = 7, height = 7)
# Set triangle arrows.
p <- SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "assignment",
link.arr.type = "triangle")
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_chord14", output_format = "png", width = 7, height = 7)
# Set big arrows.
p <- SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "assignment",
link.arr.type = "big.arrow")
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_chord15", output_format = "png", width = 7, height = 7)
# Set big arrows.
p <- SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "assignment",
z_index = TRUE)
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_chord16", output_format = "png", width = 7, height = 7)
circlize::circos.clear()
library(Seurat)
sample <- readRDS("/b06x-isilon/b06x-g/G703/eblanco/projects/test_SC_datasets/sc_dataset.rds")
sample$assignment <- ifelse(sample$seurat_clusters %in% c("0", "4", "7"), "A", "B")
sample$assignment[sample$seurat_clusters %in% c("1", "2")] <- "C"
sample$assignment[sample$seurat_clusters %in% c("10", "5")] <- "D"
sample$assignment[sample$seurat_clusters %in% c("8", "9")] <- "E"
p <- SCpubr::do_ChordDiagramPlot(sample = sample,
from = "seurat_clusters",
to = "assignment",
alignment = "horizontal")
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_chord4", output_format = "png", width = 7, height = 7)
p
sample <- readRDS("/b06x-isilon/b06x-g/G703/eblanco/projects/test_SC_datasets/sc_dataset.rds")
de_genes <- readRDS("/b06x-isilon/b06x-g/G703/eblanco/projects/test_SC_datasets/pairwise_de_genes.rds")
# Generate a volcano plot.
p <- SCpubr::do_VolcanoPlot(sample = sample,
de_genes = de_genes)
p
sample <- readRDS("/b06x-isilon/b06x-g/G703/eblanco/projects/test_SC_datasets/sc_dataset.rds")
cds <- suppressMessages({suppressWarnings({SeuratWrappers::as.cell_data_set(sample)})})
# Genes to use.
pseudotime_genes <- c("CD14", "LYN")
# Compute trajectory graph.
out <- SCpubr::do_PseudotimePlot(sample = sample,
cds = cds,
compute_monocle_partitions = TRUE,
compute_monocle_clusters = FALSE,
pseudotime_genes = pseudotime_genes)
# Retrieve trajectory groups.
p1 <- out$trajectory_groups
# Retrieve trajectory partitions.
p2 <- out$trajectory_partitions
p <- p1 | p2
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_pseudo1", output_format = "png", width = 7, height = 7)
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_pseudo1", output_format = "png", width = 14, height = 8)
# Change trajectory graph width.
out <- SCpubr::do_PseudotimePlot(sample = sample,
cds = cds,
compute_monocle_partitions = TRUE,
compute_monocle_clusters = FALSE,
pseudotime_genes = pseudotime_genes,
trajectory_graph_segment_size = 1)
p1 <- out$trajectory_partitions
out <- SCpubr::do_PseudotimePlot(sample = sample,
cds = cds,
compute_monocle_partitions = TRUE,
compute_monocle_clusters = FALSE,
pseudotime_genes = pseudotime_genes,
trajectory_graph_segment_size = 2)
p2 <- out$trajectory_partitions
out <- SCpubr::do_PseudotimePlot(sample = sample,
cds = cds,
compute_monocle_partitions = TRUE,
compute_monocle_clusters = FALSE,
pseudotime_genes = pseudotime_genes,
trajectory_graph_segment_size = 3)
p3 <- out$trajectory_partitions
out <- SCpubr::do_PseudotimePlot(sample = sample,
cds = cds,
compute_monocle_partitions = TRUE,
compute_monocle_clusters = FALSE,
pseudotime_genes = pseudotime_genes,
trajectory_graph_segment_size = 3,
trajectory_graph_color = "white")
p4 <- out$trajectory_partitions
p <- (p1 | p2) / (p3 | p4)
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_pseudo2", output_format = "png", width = 14, height = 16)
?ggsignif::geom_signif
library(ggsignif)
# Add nodes, branches and leaves to the trajectory graph.
out <- SCpubr::do_PseudotimePlot(sample = sample,
cds = cds,
compute_monocle_partitions = TRUE,
compute_monocle_clusters = FALSE,
pseudotime_genes = pseudotime_genes,
trajectory_graph_segment_size = 2,
label_roots = TRUE)
p1 <- out$trajectory_partitions
out <- SCpubr::do_PseudotimePlot(sample = sample,
cds = cds,
compute_monocle_partitions = TRUE,
compute_monocle_clusters = FALSE,
pseudotime_genes = pseudotime_genes,
trajectory_graph_segment_size = 2,
label_roots = TRUE,
label_branches = TRUE)
p2 <- out$trajectory_partitions
out <- SCpubr::do_PseudotimePlot(sample = sample,
cds = cds,
compute_monocle_partitions = TRUE,
compute_monocle_clusters = FALSE,
pseudotime_genes = pseudotime_genes,
trajectory_graph_segment_size = 2,
label_roots = TRUE,
label_branches = TRUE,
label_leaves = TRUE)
p3 <- out$trajectory_partitions
p <- p1 / p2 / p3
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_pseudo3", output_format = "png", width = 21, height = 8)
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_pseudo3", output_format = "png", width = 7, height = 24)
# Plot pseudotime with monocle partitions using highest score as root.
out <- SCpubr::do_PseudotimePlot(sample = sample,
cds = cds,
compute_monocle_partitions = TRUE,
compute_monocle_clusters = FALSE,
pseudotime_genes = pseudotime_genes,
is_max_score_the_start = TRUE)
p1 <- out$pseudotime
# Plot pseudotime with monocle partitions using lowest score as root.
out <- SCpubr::do_PseudotimePlot(sample = sample,
cds = cds,
compute_monocle_partitions = TRUE,
compute_monocle_clusters = FALSE,
pseudotime_genes = pseudotime_genes,
is_max_score_the_start = FALSE)
p2 <- out$pseudotime
# Plot pseudotime with monocle partitions using highest score as root.
out <- SCpubr::do_PseudotimePlot(sample = sample,
cds = cds,
compute_monocle_partitions = FALSE,
compute_monocle_clusters = FALSE,
pseudotime_genes = pseudotime_genes,
is_max_score_the_start = TRUE)
p3 <- out$pseudotime
# Plot pseudotime with monocle partitions using lowest score as root.
out <- SCpubr::do_PseudotimePlot(sample = sample,
cds = cds,
compute_monocle_partitions = FALSE,
compute_monocle_clusters = FALSE,
pseudotime_genes = pseudotime_genes,
is_max_score_the_start = FALSE)
p4 <- out$pseudotime
p <- (p1 | p2) / (p3 | p4)
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_pseudo4", output_format = "png", width = 14, height = 16)
# Plot pseudotime with monocle partitions using highest score as root.
out <- SCpubr::do_PseudotimePlot(sample = sample,
cds = cds,
compute_monocle_partitions = TRUE,
compute_monocle_clusters = FALSE,
pseudotime_genes = pseudotime_genes,
enforce_symmetry = FALSE,
is_max_score_the_start = TRUE)
p1 <- out$pseudotime
p3 <- out$enrichment
# Plot pseudotime with monocle partitions using lowest score as root.
out <- SCpubr::do_PseudotimePlot(sample = sample,
cds = cds,
compute_monocle_partitions = TRUE,
compute_monocle_clusters = FALSE,
pseudotime_genes = pseudotime_genes,
enforce_symmetry = TRUE,
is_max_score_the_start = FALSE)
p2 <- out$pseudotime
p4 <- out$enrichment
p <- (p1 | p2) / (p3 | p4)
SCpubr::save_Plot(p, figure_path = "./images/", file_name = "example_pseudo5", output_format = "png", width = 14, height = 16)
de_genes <- readRDS("/b06x-isilon/b06x-g/G703/eblanco/projects/test_SC_datasets/pairwise_de_genes.rds")
sample <- readRDS("/b06x-isilon/b06x-g/G703/eblanco/projects/test_SC_datasets/sc_dataset.rds")
# Basic box plot.
p <- SCpubr::do_BoxPlot(sample = sample,
feature = "nCount_RNA")
sample <- readRDS("/b06x-isilon/b06x-g/G703/eblanco/projects/test_SC_datasets/sc_dataset.rds")
# Basic box plot.
p <- SCpubr::do_BoxPlot(sample = sample,
feature = "nCount_RNA")
p
sample <- readRDS("/b06x-isilon/b06x-g/G703/eblanco/projects/test_SC_datasets/sc_dataset.rds")
sample <- readRDS("/b06x-isilon/b06x-g/G703/eblanco/projects/test_SC_datasets/sc_dataset.rds")
# Basic box plot.
p <- SCpubr::do_BoxPlot(sample = sample,
feature = "nCount_RNA")
p
# Flip the box plot.
p <- SCpubr::do_BoxPlot(sample = sample,
feature = "nCount_RNA",
flip = TRUE)
p
# Use silhouette.
p <- SCpubr::do_BoxPlot(sample = sample,
feature = "nCount_RNA",
flip = TRUE)
p
# Use silhouette.
p <- SCpubr::do_BoxPlot(sample = sample,
feature = "nCount_RNA",
flip = TRUE,
use_silhouette = TRUE)
p
# Use silhouette.
p <- SCpubr::do_BoxPlot(sample = sample,
feature = "nCount_RNA",
flip = TRUE,
order = TRUE)
p
# Use silhouette.
p <- SCpubr::do_BoxPlot(sample = sample,
feature = "nCount_RNA",
order = TRUE)
p
sample$custom_group = ifelse(colnames(sample) %in% sample(colnames(sample), 4000), "A", "B")
# Generate a custom group.
sample$custom_group = ifelse(colnames(sample) %in% sample(colnames(sample), 4000), "A", "B")
# Flip the box plot.
p <- SCpubr::do_BoxPlot(sample = sample,
feature = "nCount_RNA",
group.by = "custom_group")
p
# Apply second grouping.
p <- SCpubr::do_BoxPlot(sample = sample,
feature = "nCount_RNA",
split.by = "custom_group")
p
# Apply second grouping.
p <- SCpubr::do_BoxPlot(sample = sample,
feature = "nCount_RNA",
use_test = TRUE,
comparisons = list(c("0", "1"),
c("3", "4"),
c("5", "9")))
p
# Apply statistical tests and show the p-value.
p <- SCpubr::do_BoxPlot(sample = sample,
feature = "nCount_RNA",
use_test = TRUE,
comparisons = list(c("0", "1"),
c("3", "4"),
c("5", "9")),
map_signif_level = FALSE)
p
sample <- readRDS("/b06x-isilon/b06x-g/G703/eblanco/projects/test_SC_datasets/sc_dataset.rds")
p1 <- SCpubr::do_DotPlot(sample = sample,
features = "CD14")
p2 <- SCpubr::do_DotPlot(sample = sample,
features = "nFeature_RNA")
p1 | p2
SCpubr::do_DotPlot
dbs <- sort(enrichR::listEnrichrDbs()[, 'libraryName'])
# Genes related to breast cancer.
genes <- c("ABCB1", "ABCG2", "AHR", "AKT1", "AR")
p <- SCpubr::do_TermEnrichmentPlot(genes = genes,
dbs_use = "GO_Biological_Process_2021",
nterms = 15)
sample <- SCpubr:::use_dataset()
test <- Seurat::DietSeurat(sample, scale.data = TRUE, assay = "SCT")
test <- Seurat::DietSeurat(sample, scale.data = FALSE, assay = "SCT")
test <- Seurat::DietSeurat(sample, scale.data = FALSE, assay = "SCT", counts = FALSE)
test
Seurat::DietSeurat()
?Seurat::DietSeurat
test <- Seurat::DietSeurat(sample, scale.data = FALSE, assay = "SCT", counts = FALSE, dimreducs = TRUE, graphs = TRUE)
SCpubr::do_DimPlot(sample = test)
test
test <- Seurat::DietSeurat(sample, scale.data = FALSE, assay = "SCT", counts = FALSE, dimreducs = TRUE, graphs = TRUE)
test
test <- Seurat::DietSeurat(sample, scale.data = FALSE, assay = "SCT", counts = FALSE, dimreducs = c("pca", "umap"), graphs = TRUE)
sample@graphs
test <- Seurat::DietSeurat(sample, scale.data = FALSE, assay = "SCT", counts = FALSE, dimreducs = c("pca", "umap"), graphs = c("SCT_nn", "SCT_snn"))
SCpubr::do_DimPlot(sample = test)
# Set necessary enrichR global options. This is copied from EnrichR code to avoid having to load the package.
suppressMessages({
options(enrichR.base.address = "https://maayanlab.cloud/Enrichr/")
options(enrichR.live = TRUE)
options(modEnrichR.use = TRUE)
options(enrichR.sites.base.address = "https://maayanlab.cloud/")
options(enrichR.sites = c("Enrichr", "FlyEnrichr", "WormEnrichr", "YeastEnrichr", "FishEnrichr"))
# Set the search to Human genes.
enrichR::setEnrichrSite(site = site)
websiteLive <- TRUE
dbs <- enrichR::listEnrichrDbs()
# Get all the possible databases to query.
dbs <- sort(dbs$libraryName)
})
# Set necessary enrichR global options. This is copied from EnrichR code to avoid having to load the package.
suppressMessages({
options(enrichR.base.address = "https://maayanlab.cloud/Enrichr/")
options(enrichR.live = TRUE)
options(modEnrichR.use = TRUE)
options(enrichR.sites.base.address = "https://maayanlab.cloud/")
options(enrichR.sites = c("Enrichr", "FlyEnrichr", "WormEnrichr", "YeastEnrichr", "FishEnrichr"))
# Set the search to Human genes.
enrichR::setEnrichrSite(site = "Enrichr")
websiteLive <- TRUE
dbs <- enrichR::listEnrichrDbs()
# Get all the possible databases to query.
dbs <- sort(dbs$libraryName)
})
# Choose the dataset to query against.
dbs_use <- "GO_Biological_Process_2021"
# List of genes to use as input.
genes <- c("ABCB1", "ABCG2", "AHR", "AKT1", "AR")
# Retrieve the enriched terms.
enriched_terms <- enrichR::enrichr(genes, dbs_use)
enriched_terms
class(enriched_terms)
names(enriched_terms)
enriched_terms <- SCpubr:::test.data$enriched_terms
enriched_terms <- SCpubr:::test.data$enriched_terms
# Increased number of terms.
p <- SCpubr::do_TermEnrichmentPlot(enriched_terms = enriched_terms$GO_Biological_Process_2021,
nterms = 15)
enriched_terms$GO_Biological_Process_2021
enriched_terms$GO_Cellular_Component_2021 <- NULL
enriched_terms$Azimuth_Cell_Types_2021 <- NULL
# Increased number of terms.
p <- SCpubr::do_TermEnrichmentPlot(enriched_terms = enriched_terms,
nterms = 15)
p
sample <- readRDS("/b06x-isilon/b06x-g/G703/eblanco/projects/test_SC_datasets/sc_dataset.rds")
de_genes <- readRDS("/b06x-isilon/b06x-g/G703/eblanco/projects/test_SC_datasets/pairwise_de_genes.rds")
# Generate a volcano plot.
p <- SCpubr::do_VolcanoPlot(sample = sample,
de_genes = de_genes)
sample <- readRDS("/b06x-isilon/b06x-g/G703/eblanco/projects/test_SC_datasets/sc_dataset.rds")
de_genes <- readRDS("/b06x-isilon/b06x-g/G703/eblanco/projects/test_SC_datasets/pairwise_de_genes.rds")
# Generate a volcano plot.
p <- SCpubr::do_VolcanoPlot(sample = sample,
de_genes = de_genes)
p
# Modify cutoffs.
p <- SCpubr::do_VolcanoPlot(sample = sample,
de_genes = de_genes,
pval_cutoff = 1e-15,
FC_cutoff = 0.2)
p
# Modify number of gene tags.
p <- SCpubr::do_VolcanoPlot(sample = sample,
de_genes = de_genes,
n_genes = 15)
p
sample <- readRDS("/b06x-isilon/b06x-g/G703/eblanco/projects/test_SC_datasets/sc_dataset.rds")
de_genes <- readRDS("/b06x-isilon/b06x-g/G703/eblanco/projects/test_SC_datasets/pairwise_de_genes.rds")
# Generate a volcano plot.
p <- SCpubr::do_VolcanoPlot(sample = sample,
de_genes = de_genes)
p
# Modify cutoffs.
p <- SCpubr::do_VolcanoPlot(sample = sample,
de_genes = de_genes,
pval_cutoff = 1e-15,
FC_cutoff = 0.2)
p
# Modify number of gene tags.
p <- SCpubr::do_VolcanoPlot(sample = sample,
de_genes = de_genes,
n_genes = 15)
p
sample <- readRDS("/b06x-isilon/b06x-g/G703/eblanco/projects/test_SC_datasets/sc_dataset.rds")
de_genes <- readRDS("/b06x-isilon/b06x-g/G703/eblanco/projects/test_SC_datasets/pairwise_de_genes.rds")
# Generate a volcano plot.
p <- SCpubr::do_VolcanoPlot(sample = sample,
de_genes = de_genes)
p
# Modify cutoffs.
p <- SCpubr::do_VolcanoPlot(sample = sample,
de_genes = de_genes,
pval_cutoff = 1e-15,
FC_cutoff = 0.2)
p
# Modify number of gene tags.
p <- SCpubr::do_VolcanoPlot(sample = sample,
de_genes = de_genes,
n_genes = 15)
p
sample <- readRDS("/b06x-isilon/b06x-g/G703/eblanco/projects/test_SC_datasets/sc_dataset.rds")
de_genes <- readRDS("/b06x-isilon/b06x-g/G703/eblanco/projects/test_SC_datasets/pairwise_de_genes.rds")
# Generate a volcano plot.
p <- SCpubr::do_VolcanoPlot(sample = sample,
de_genes = de_genes)
p
# Modify cutoffs.
p <- SCpubr::do_VolcanoPlot(sample = sample,
de_genes = de_genes,
pval_cutoff = 1e-15,
FC_cutoff = 0.2)
p
# Modify number of gene tags.
p <- SCpubr::do_VolcanoPlot(sample = sample,
de_genes = de_genes,
n_genes = 15)
p
sample <- readRDS("/b06x-isilon/b06x-g/G703/eblanco/projects/test_SC_datasets/sc_dataset.rds")
de_genes <- readRDS("/b06x-isilon/b06x-g/G703/eblanco/projects/test_SC_datasets/pairwise_de_genes.rds")
# Generate a volcano plot.
p <- SCpubr::do_VolcanoPlot(sample = sample,
de_genes = de_genes)
p
# Modify cutoffs.
p <- SCpubr::do_VolcanoPlot(sample = sample,
de_genes = de_genes,
pval_cutoff = 1e-15,
FC_cutoff = 0.2)
p
# Modify cutoffs.
p <- SCpubr::do_VolcanoPlot(sample = sample,
de_genes = de_genes,
pval_cutoff = 0.0000001,
FC_cutoff = 0.2)
p
-log10(0.0000001)
-log10(0.0000000000000000000001)
-log10(0.0000000000000000000000000000000000)
-log10(0.00000000000000000000000000000000001)
# Modify cutoffs.
p <- SCpubr::do_VolcanoPlot(sample = sample,
de_genes = de_genes,
pval_cutoff = 0.00000000000000000000000000000000001,
FC_cutoff = 0.2)
p
# Modify cutoffs.
p <- SCpubr::do_VolcanoPlot(sample = sample,
de_genes = de_genes,
pval_cutoff = 0.05,
FC_cutoff = 0.2)
p
# Generate a volcano plot.
p <- SCpubr::do_VolcanoPlot(sample = sample,
de_genes = de_genes)
p
# Generate a volcano plot.
p <- SCpubr::do_VolcanoPlot(sample = sample,
de_genes = de_genes)
p
# Modify number of gene tags.
p <- SCpubr::do_VolcanoPlot(sample = sample,
de_genes = de_genes,
n_genes = 15)
p
# Modify cutoffs.
p <- SCpubr::do_VolcanoPlot(sample = sample,
de_genes = de_genes,
pval_cutoff = 1e-50,
FC_cutoff = 0.2)
p
-log10(1e-50)
SCpubr::do_VolcanoPlot(sample = sample,
de_genes = de_genes,
pval_cutoff = 1e-50,
FC_cutoff = 0.2) + ggplot2::geom_hline(yintercept = 200)
SCpubr::do_VolcanoPlot(sample = sample,
de_genes = de_genes,
pval_cutoff = 1e-50,
FC_cutoff = 0.2) + ggplot2::geom_hline(yintercept = -log10(0.05))
SCpubr::do_VolcanoPlot(sample = sample,
de_genes = de_genes,
pval_cutoff = 1e-50,
FC_cutoff = 0.2) + ggplot2::geom_hline(yintercept = -log10(1e-50))
sample <- readRDS("/b06x-isilon/b06x-g/G703/eblanco/projects/test_SC_datasets/sc_dataset.rds")
de_genes <- readRDS("/b06x-isilon/b06x-g/G703/eblanco/projects/test_SC_datasets/pairwise_de_genes.rds")
# Generate a volcano plot.
p <- SCpubr::do_VolcanoPlot(sample = sample,
de_genes = de_genes)
p
# Modify cutoffs.
p <- SCpubr::do_VolcanoPlot(sample = sample,
de_genes = de_genes,
pval_cutoff = 1e-50,
FC_cutoff = 0.2)
p
