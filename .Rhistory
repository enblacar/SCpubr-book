plot.subtitle = "Everything is commented!",
plot.caption = "Dataset from: ...",
individual.titles = c("Plot A",
"Plot_B",
NA,
"Plot_D"),
individual.subtitles = c("Subtitle A",
NA,
"Subtitle C",
"Subtitle D"),
individual.captions = c("Caption A",
"Caption B",
"Caption C",
"Caption D"),
ncol = 2)
p
```
## Working with subsets of cells
One of the things that can be misleading is that it could be the case that a **very specific subset of cells are driving the ends of the color scales**. Let's say that we have identified that clusters 2, 5, and 8 are responsible for this behavior. We would like to plot the values without taking those cells into consideration. The very first thing that comes to mind is, indeed, removing the cells completely, resulting in the following:
```{r, fig.cap = "SCpubr FeaturePlot, removing cells from clusters 2, 5 and 8", fig.width=7, fig.height=8}
# Subset the cells in the Seurat object to remove unwanted cells.
cells.plot <- colnames(sample[, !(sample$seurat_clusters %in% c("2", "5", "8"))])
p <- SCpubr::do_FeaturePlot(sample[, cells.plot],
features = c("CD14"))
p
```
However, this falls back to the same problem as with `Seurat::DimPlot` with the `split.by` parameter. We lose the overall context of where the cells are, as we lost the original **UMAP silhouette**. This can be fixed by using the `cells.highlight` parameter:
```{r, fig.cap = "SCpubr FeaturePlot, masking cells from clusters 2, 5 and 8", fig.width=7, fig.height=8}
# Using cells.highlight parameter to select the cells we want to include in the plot.
p <- SCpubr::do_FeaturePlot(sample = sample,
cells.highlight = cells.plot,
features = c("CD14"))
p
```
This way, by adding the cells back and modifying the legend, we accomplish the desired effect. Furthermore, `SCpubr::do_FeaturePlot()` also accepts a vector of the identities to plot, as long as they are part of `levels(seurat_object)`. This can be achieved by using the `idents.highlight` instead.
```{r, fig.cap = "SCpubr FeaturePlot, masking cells from clusters 2, 5 and 8 using idents.highlight", fig.width=7, fig.height=8}
# Selecting given identitites to include in the plot.
p <- SCpubr::do_FeaturePlot(sample = sample,
idents.highlight = levels(sample)[!(levels(sample) %in% c("0", "2", "5", "8"))],
features = c("CD14"))
p
```
## Splitting the FeaturePlot by a variable
In some cases, we want to visualize a given feature, let's say, the expression of `LYN` across another variable, for instance `seurat_clusters`. This can be achieved easily in `Seurat` by using the `split.by` parameter. For the sake of representation, let's reduce the number of clusters.
```{r, fig.cap = "Seurat FeaturePlot split by clusters.", fig.width=14, fig.height=4}
# Group clusters into three values for visualization purposes.
sample$new_clusters <- as.character(sample$seurat_clusters)
sample$new_clusters[sample$new_clusters %in% c("0", "1", "2", "3")] <- "Cluster 1"
sample$new_clusters[sample$new_clusters %in% c("4", "5", "6")] <- "Cluster 2"
sample$new_clusters[sample$new_clusters %in% c("7", "8", "9")] <- "Cluster 3"
# Seurat Feature Plot using split.by.
p <- Seurat::FeaturePlot(sample,
features = "LYN",
split.by = "new_clusters")
p
```
Apart from the general aesthetic discrepancies mentioned before, there are two main aspects missing. First, is the loss of the **UMAP silhouette**. Secondly, knowing that, by default, the color scale is shared across all the plots, we would like to know the range of values this color scale is displaying. In this two aspects is where `SCpubr::do_FeaturePlot()` delves into:
```{r, fig.cap = "SCpubr FeaturePlot split by clusters.", fig.width=14, fig.height=4}
# SCpubr Feature Plot using split.by
p <- SCpubr::do_FeaturePlot(sample = sample,
features = "LYN",
split.by = "new_clusters")
p
```
This way, we are able to achieve a better understandable plot. Furthermore, we can query multiple features. In the following example, we provide each of the three possible examples of features:
- `LYN` is a gene located in the rownames of the count matrix (`rownames(sample)``).
- `nCount_RNA` is a metadata variable located in `colnames(sample@meta.data)`.
- `PC_1` is a column of a dimensional reduction embedding, located in `colnames(sample@reductions[["pca"]][[]])`
```{r, fig.cap = "SCpubr FeaturePlot split by clusters using multiple features.", fig.width=20, fig.height=4}
# Use split.by with multiple features.
p <- SCpubr::do_FeaturePlot(sample,
features = c("LYN", "nCount_RNA", "PC_1"),
split.by = "new_clusters")
p
```
We can even subset the previous plot to any set ofidentities in `split.by` we are particularly interested in. The color scale also limits itself to contain only the values in the selected identities. This can be achieved by provided a vector with the identities to `split.by.idents` parameter.
```{r, fig.cap = "SCpubr FeaturePlot split by clusters using multiple features and selected identities.", fig.width=20, fig.height=5}
# Using split.by.idents parameter alongside split.by.
p <- SCpubr::do_FeaturePlot(sample,
features = c("LYN", "nCount_RNA", "PC_1"),
split.by = "seurat_clusters",
split.by.idents = c("2", "5"))
p
```
3
install.packages("rmarkdown")
p <- SCpubr::do_NebulosaPlot(sample = sample,
features = c("CD14", "CD8A"),
joint = TRUE,
individual.titles = c("Plot A",
NA,
"Combined density"),
plot.title = "Density analysis")
sample <- readRDS("/b06x-isilon/b06x-g/G703/eblanco/projects/test_SC_datasets/sc_dataset.rds")
p <- SCpubr::do_NebulosaPlot(sample = sample,
features = "CD14")
p
p1 <- SCpubr::do_DimPlot(sample = sample,
reduction = "pca",
label = T,
legend = F,
dims = c(1, 2))
p2 <- SCpubr::do_DimPlot(sample = sample,
reduction = "pca",
label = T,
legend = F,
dims = c(3, 4))
p3 <- SCpubr::do_BeeSwarmPlot(sample = sample,
feature_to_rank = "PC_1",
group.by = "seurat_clusters",
continuous_feature = F)
p4 <- SCpubr::do_BeeSwarmPlot(sample = sample,
feature_to_rank = "PC_4",
group.by = "seurat_clusters",
continuous_feature = F)
(p1 | p3) / (p2 | p4)
p1 <- SCpubr::do_VlnPlot(sample = sample,
features = "nCount_RNA")
p2 <- SCpubr::do_VlnPlot(sample = sample,
features = "nCount_RNA",
boxplot_width = 0.1)
p <- p1 / p2
p
genes <- list("Naive CD4+ T" = c("IL7R", "CCR7"),
"CD14+ Mono" = c("CD14", "LYZ"),
"Memory CD4+" = c("S100A4"),
"B" = c("MS4A1"),
"CD8+ T" = c("CD8A"),
"FCGR3A+ Mono" = c("FCGR3A", "MS4A7"),
"NK" = c("GNLY", "NKG7"),
"DC" = c("FCER1A", "CST3"),
"Platelet" = c("PPBP"))
p1 <- SCpubr::do_DotPlot(sample = sample,
features = genes,
plot.title = "Not clustered")
p2 <- SCpubr::do_DotPlot(sample = sample,
features = genes,
cluster.idents = TRUE,
plot.title = "Clustered")
p1 / p2
# Modify proportions.
sample$modified_seurat_clusters <- as.character(sample$seurat_clusters)
sample$modified_seurat_clusters[sample$modified_orig.ident == "Sample_A" & sample$modified_seurat_clusters %in% c("0", "2", "3", "4", "5", "6", "7")] <- "1"
# We only have one value in orig.ident. Let's modify it so that it resembles a multi-sample Seurat object.
sample$modified_orig.ident <- sample(x = c("Sample_A", "Sample_B", "Sample_C"),
size = ncol(sample),
replace = T,
prob = c(0.2, 0.7, 0.1))
p1 <- SCpubr::do_BarPlot(sample,
features = "modified_orig.ident",
plot.title = "Number of cells per sample",
position = "stack",
legend = T,
horizontal = F)
p2 <- SCpubr::do_BarPlot(sample,
features = "modified_orig.ident",
group.by = "seurat_clusters",
plot.title = "Number of cells per cluster and sample",
position = "stack",
legend = T,
horizontal = F)
p1 | p2
# Genes related to breast cancer.
genes <- c("ABCB1", "ABCG2", "AHR", "AKT1", "AR")
p <- SCpubr::do_TermEnrichmentPlot(genes = genes,
dbs_use = "C")
patchwork::wrap_plots(p, ncol = 2)
# Define list of genes.
genes <- list("Naive CD4+ T" = c("IL7R", "CCR7"),
"CD14+ Mono" = c("CD14", "LYZ"),
"Memory CD4+" = c("S100A4"),
"B" = c("MS4A1"),
"CD8+ T" = c("CD8A"),
"FCGR3A+ Mono" = c("FCGR3A", "MS4A7"),
"NK" = c("GNLY", "NKG7"),
"DC" = c("FCER1A", "CST3"),
"Platelet" = c("PPBP"))
# Default parameters.
p <- SCpubr::do_EnrichmentHeatmap(sample = sample,
list_genes = genes)
p
# Default values.
p <- SCpubr::do_CorrelationPlot(sample = sample)
p
gene_set <- list("A" = Seurat::VariableFeatures(sample)[1:10],
"B" = Seurat::VariableFeatures(sample)[11:20],
"C" = Seurat::VariableFeatures(sample)[21:30],
"D" = Seurat::VariableFeatures(sample)[31:40])
p <- SCpubr::do_CellularStatesPlot(sample = sample,
gene_list = gene_set,
x1 = "A",
y1 = "B")
install.packages("ggExtra")
p <- SCpubr::do_CellularStatesPlot(sample = sample,
gene_list = gene_set,
x1 = "A",
y1 = "B")
p
# Generate a color palette with a given number of colors.
SCpubr::do_ColorPalette(colors.use = "steelblue",
n = 7)
?SCpubr::do_LigandReceptorPlot
sample <- readRDS("/b06x-isilon/b06x-g/G703/eblanco/projects/test_SC_datasets/sc_dataset.rds")
liana_output <- readRDS("/b06x-isilon/b06x-g/G703/eblanco/projects/test_SC_datasets/liana_cellphoneDB.rds")
# Ligand Receptor analysis plot.
p <- SCpubr::do_LigandReceptorPlot(from_output = TRUE,
liana_output = liana_output)
# Ligand Receptor analysis plot.
p <- SCpubr::do_LigandReceptorPlot(from_output = TRUE,
liana_output = liana_output)
p
# Ligand Receptor analysis plot.
p <- SCpubr::do_LigandReceptorPlot(from_output = TRUE,
liana_output = liana_output,
top_interactions = 150)
p
# Ligand Receptor analysis plot.
p <- SCpubr::do_LigandReceptorPlot(from_output = TRUE,
liana_output = liana_output,
top_interactions = 150)
p
# Ligand Receptor analysis plot with extra interactions.
p <- SCpubr::do_LigandReceptorPlot(from_output = TRUE,
liana_output = liana_output,
top_interactions = 150,
dot.size = 2)
p
# Ligand Receptor analysis plot with extra interactions.
p <- SCpubr::do_LigandReceptorPlot(from_output = TRUE,
liana_output = liana_output,
top_interactions = 150,
dot.size = 2,
plot_grid = TRUE,
grid.color = "grey90",
grid.type = "dotted")
p
# Ligand Receptor analysis plot with grid.
p <- SCpubr::do_LigandReceptorPlot(from_output = TRUE,
liana_output = liana_output,
top_interactions = 150,
dot.size = 2,
plot_grid = TRUE,
grid.color = "grey90",
grid.type = "dotted",
flip = TRUE)
p
# Ligand Receptor analysis plot with inverted axes.
p <- SCpubr::do_LigandReceptorPlot(from_output = TRUE,
liana_output = liana_output,
top_interactions = 150,
dot.size = 2,
plot_grid = TRUE,
grid.color = "grey90",
grid.type = "dotted",
flip = TRUE,
x_labels_angle = 90,
rotate_strip_text = TRUE)
p
# Ligand Receptor analysis plot with inverted axes grouped by ligand.complex.
p <- SCpubr::do_LigandReceptorPlot(from_output = TRUE,
liana_output = liana_output,
top_interactions = 150,
dot.size = 2,
plot_grid = TRUE,
grid.color = "grey90",
grid.type = "dotted",
flip = TRUE,
x_labels_angle = 90,
rotate_strip_text = TRUE,
split.by = "ligand.complex")
# Ligand Receptor analysis plot with inverted axes grouped by ligand.complex.
p <- SCpubr::do_LigandReceptorPlot(from_output = TRUE,
liana_output = liana_output,
top_interactions = 150,
dot.size = 2,
plot_grid = TRUE,
grid.color = "grey90",
grid.type = "dotted",
flip = TRUE,
x_labels_angle = 90,
rotate_strip_text = TRUE,
split.by = "ligand.complex")
p
# Ligand Receptor analysis plot with inverted axes grouped by ligand.complex.
p <- SCpubr::do_LigandReceptorPlot(from_output = TRUE,
liana_output = liana_output,
top_interactions = 150,
dot.size = 2,
plot_grid = TRUE,
grid.color = "grey90",
grid.type = "dotted",
flip = TRUE,
x_labels_angle = 90,
rotate_strip_text = TRUE,
split.by = "ligand.complex")
p
# Ligand Receptor analysis plot with inverted axes grouped by ligand.complex.
p <- SCpubr::do_LigandReceptorPlot(from_output = TRUE,
liana_output = liana_output,
top_interactions = 150,
dot.size = 2,
plot_grid = TRUE,
grid.color = "grey90",
grid.type = "dotted",
flip = TRUE,
x_labels_angle = 90,
rotate_strip_text = TRUE,
split.by = "receptor.complex")
p
# Ligand Receptor analysis plot with inverted axes with filtered source and targets.
p <- SCpubr::do_LigandReceptorPlot(from_output = TRUE,
liana_output = liana_output,
top_interactions = 50,
dot.size = 2,
plot_grid = TRUE,
grid.color = "grey90",
grid.type = "dotted",
flip = TRUE,
x_labels_angle = 90,
rotate_strip_text = TRUE,
keep_source = c("0", "1"),
keep_target = c("3", "5", "7"))
p
# Ligand Receptor analysis plot with inverted axes with filtered source and targets.
p <- SCpubr::do_LigandReceptorPlot(from_output = TRUE,
liana_output = liana_output,
top_interactions = 150,
dot.size = 2,
plot_grid = TRUE,
grid.color = "grey90",
grid.type = "dotted",
flip = TRUE,
x_labels_angle = 90,
rotate_strip_text = TRUE,
keep_source = c("0", "1"),
keep_target = c("3", "5", "7"))
p
# Ligand Receptor analysis plot with inverted axes with filtered source and targets.
p <- SCpubr::do_LigandReceptorPlot(from_output = TRUE,
liana_output = liana_output,
top_interactions = 150,
dot.size = 2,
plot_grid = TRUE,
grid.color = "grey90",
grid.type = "dotted",
flip = TRUE,
x_labels_angle = 90,
rotate_strip_text = TRUE,
keep_source = c("0", "1", "8"),
keep_target = c("3", "5", "7"))
p
gene_set <- list("A" = Seurat::VariableFeatures(sample)[1:10],
"B" = Seurat::VariableFeatures(sample)[11:20],
"C" = Seurat::VariableFeatures(sample)[21:30],
"D" = Seurat::VariableFeatures(sample)[31:40])
out <- SCpubr::do_CellularStatesPlot(sample = sample,
gene_list = gene_set,
x1 = "A",
y1 = "C",
x2 = "B",
y2 = "D",
enforce_symmetry = TRUE,
plot_features = TRUE,
features = c("PC_1", "nFeature_RNA"))
out <- SCpubr::do_CellularStatesPlot(sample = sample,
gene_list = gene_set,
x1 = "A",
y1 = "C",
x2 = "B",
y2 = "D",
enforce_symmetry = TRUE,
plot_features = TRUE,
features = c("PC_1", "nFeature_RNA"))
p <- out$main | out$PC_1 | out$nFeature_RNA
p
out <- SCpubr::do_CellularStatesPlot(sample = sample,
gene_list = gene_set,
x1 = "A",
y1 = "C",
x2 = "B",
y2 = "D",
plot_cell_borders = TRUE,
enforce_symmetry = TRUE,
plot_features = TRUE,
features = c("PC_1", "nFeature_RNA"))
p <- out$main | out$PC_1 | out$nFeature_RNA
p
out <- SCpubr::do_CellularStatesPlot(sample = sample,
gene_list = gene_set,
x1 = "A",
y1 = "C",
x2 = "B",
y2 = "D",
plot_cell_borders = TRUE,
enforce_symmetry = TRUE,
plot_enrichment_scores = TRUE)
p <- out$main | out$PC_1 | out$nFeature_RNA
p
out <- SCpubr::do_CellularStatesPlot(sample = sample,
gene_list = gene_set,
x1 = "A",
y1 = "C",
x2 = "B",
y2 = "D",
plot_cell_borders = TRUE,
enforce_symmetry = TRUE,
plot_enrichment_scores = TRUE)
p <- out$main | (patchwork::wrap_elements(out$A, out$B, out$C, out$D))
patchwork::wrap_elements(out$A, out$B, out$C, out$D)
layout <- "AABC
AADE"
p <- patchwork::wrap_plots(A = out$main,
B = out$A,
C = out$B,
D = out$C,
E = out$D,
design = layout)
p
p1 <- SCpubr::do_DimPlot(sample = sample)
p2 <- SCpubr::do_DimPlot(sample = sample,
plot_cell_borders = TRUE)
p <- p1 | p2
p
p1 <- SCpubr::do_DimPlot(sample = sample)
p2 <- SCpubr::do_DimPlot(sample = sample,
plot_cell_borders = TRUE)
p3 <- SCpubr::do_DimPlot(sample = sample,
plot_cell_borders = TRUE,
border.size = 2)
p <- p1 | p2 | p3
p
?SCpubr::do_DimPlot
p1 <- SCpubr::do_DimPlot(sample = sample)
p2 <- SCpubr::do_DimPlot(sample = sample,
plot_cell_borders = TRUE)
p3 <- SCpubr::do_DimPlot(sample = sample,
plot_cell_borders = TRUE,
border.size = 3)
p <- p1 | p2 | p3
p
p1 <- SCpubr::do_FeaturePlot(sample = sample)
p1 <- SCpubr::do_FeaturePlot(sample = sample,
features = "CD14")
p2 <- SCpubr::do_FeaturePlot(sample = sample,
plot_cell_borders = TRUE,
features = "CD14")
p3 <- SCpubr::do_FeaturePlot(sample = sample,
plot_cell_borders = TRUE,
border.size = 3,
features = "CD14")
p <- p1 | p2 | p3
p
p1 <- SCpubr::do_NebulosaPlot(sample = sample,
features = "CD14")
p2 <- SCpubr::do_NebulosaPlot(sample = sample,
plot_cell_borders = TRUE,
features = "CD14")
p3 <- SCpubr::do_NebulosaPlot(sample = sample,
plot_cell_borders = TRUE,
border.size = 3,
features = "CD14")
p <- p1 | p2 | p3
p
p1 <- SCpubr::do_BeeSwarmPlot(sample = sample,
feature_to_rank = "PC_1",
group.by = "seurat_clusters")
p2 <- SCpubr::do_BeeSwarmPlot(sample = sample,
feature_to_rank = "PC_1",
group.by = "seurat_clusters",
plot_cell_borders = TRUE)
p3 <- SCpubr::do_BeeSwarmPlot(sample = sample,
feature_to_rank = "PC_1",
group.by = "seurat_clusters",
plot_cell_borders = TRUE,
border.size = 3)
p <- p1 | p2 | p3
p
genes <- list("A" = Seurat::VariableFeatures(sample)[1:5],
"B" = Seurat::VariableFeatures(sample)[6:10],
"C" = Seurat::VariableFeatures(sample)[11:15],
"D" = Seurat::VariableFeatures(sample)[16:20])
p1 <- SCpubr:::do_CellularStatesPlot(sample = sample,
gene_list = genes,
x1 = "A",
y1 = "B",
x2 = "C",
y2 = "D",
enforce_symmetry = T,
legend.position = "bottom")
p2 <- SCpubr:::do_CellularStatesPlot(sample = sample,
gene_list = genes,
x1 = "A",
y1 = "B",
x2 = "C",
y2 = "D",
enforce_symmetry = T,
legend.position = "bottom",
plot_cell_borders = TRUE)
p3 <- SCpubr:::do_CellularStatesPlot(sample = sample,
gene_list = genes,
x1 = "A",
y1 = "B",
x2 = "C",
y2 = "D",
enforce_symmetry = T,
legend.position = "bottom",
plot_cell_borders = TRUE,
border.size = 3)
p <- p1 | p2 | p3
p
install.packages("downlit")
install.packages("kableExtra")
